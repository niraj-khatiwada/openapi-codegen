/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
export enum TokenType {
  REFRESH = 'REFRESH',
  ACCESS = 'ACCESS',
  TENANT_USER_INVITATION = 'TENANT_USER_INVITATION',
  RESET_PASSWORD = 'RESET_PASSWORD',
}

export enum ForgotPaswordDTODomain {
  ata = 'ata',
  showrunner = 'showrunner',
}

export enum Role {
  USER = 'USER',
  SUPER_ADMIN = 'SUPER_ADMIN',
  TENANT_ADMIN = 'TENANT_ADMIN',
  TENANT_USER = 'TENANT_USER',
}

export enum FilterComparators {
  EqualTo = 'EqualTo',
  Between = 'Between',
  In = 'In',
  BooleanIn = 'BooleanIn',
}

export enum TenantStatus {
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE',
}

export enum TenantInvitationStatus {
  PENDING = 'PENDING',
  SUCCESS = 'SUCCESS',
  FAILED = 'FAILED',
}

export enum AssemblyMissionDtoStatus {
  PENDING = 'PENDING',
  INPROGRESS = 'INPROGRESS',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
}

export enum PlaceDtoShotType {
  Close_Up_Shot = 'Close_Up_Shot',
  Extreme_Long_Shot = 'Extreme_Long_Shot',
  Long_Shot = 'Long_Shot',
  Medium_Shot = 'Medium_Shot',
  Extreme_Close_Up_Shot = 'Extreme_Close_Up_Shot',
  Full_Shot = 'Full_Shot',
  Birds_Eye_View_Shot = 'Birds_Eye_View_Shot',
  Rule_of_Thirds_Shot = 'Rule_of_Thirds_Shot',
  Silhouette_Shot = 'Silhouette_Shot',
  Over_The_Shoulder_Shot = 'Over_The_Shoulder_Shot',
  Point_Of_View_Shot = 'Point_Of_View_Shot',
  Low_Angle_Shot = 'Low_Angle_Shot',
  High_Angle_Shot = 'High_Angle_Shot',
  Eye_Level_Shot = 'Eye_Level_Shot',
  Dutch_Angle_Shot = 'Dutch_Angle_Shot',
  Drone_Shot = 'Drone_Shot',
  Candid_Shot = 'Candid_Shot',
}

export enum JobDtoType {
  SHOT_UNREAL_VIDEO_GENERATION = 'SHOT_UNREAL_VIDEO_GENERATION',
  SCENE_VIDEO_GENERATION = 'SCENE_VIDEO_GENERATION',
  EPISODE_VIDEO_GENERATION = 'EPISODE_VIDEO_GENERATION',
  AUDIO_GENERATION = 'AUDIO_GENERATION',
  SHOT_2D_VIDEO_GENERATION = 'SHOT_2D_VIDEO_GENERATION',
}

export enum JobDtoStatus {
  PENDING = 'PENDING',
  STARTED = 'STARTED',
  COMPLETED = 'COMPLETED',
  PROGRESS = 'PROGRESS',
  ERROR = 'ERROR',
}

export enum CharacterGenderENUM {
  MALE = 'MALE',
  FEMALE = 'FEMALE',
}

export enum AudioVoiceType {
  en_US_DavisNeural = 'en_US_DavisNeural',
  en_US_GuyNeural = 'en_US_GuyNeural',
  en_US_BrandonNeural = 'en_US_BrandonNeural',
  en_US_ChristopherNeural = 'en_US_ChristopherNeural',
  en_US_EricNeural = 'en_US_EricNeural',
  en_US_JacobNeural = 'en_US_JacobNeural',
  en_US_JasonNeural = 'en_US_JasonNeural',
  en_US_RogerNeural = 'en_US_RogerNeural',
  en_US_SteffanNeural = 'en_US_SteffanNeural',
  en_US_TonyNeural = 'en_US_TonyNeural',
  en_US_AIGenerate1Neural = 'en_US_AIGenerate1Neural',
  en_US_RyanMultilingualNeural = 'en_US_RyanMultilingualNeural',
  en_US_AshleyNeural = 'en_US_AshleyNeural',
  en_US_CoraNeural = 'en_US_CoraNeural',
  en_US_JaneNeural = 'en_US_JaneNeural',
  en_US_MichelleNeural = 'en_US_MichelleNeural',
  en_US_MonicaNeural = 'en_US_MonicaNeural',
  en_US_NancyNeural = 'en_US_NancyNeural',
  en_US_SaraNeural = 'en_US_SaraNeural',
  en_US_JennyNeural = 'en_US_JennyNeural',
  en_US_AmberNeural = 'en_US_AmberNeural',
  en_US_AnaNeural = 'en_US_AnaNeural',
  en_US_AriaNeural = 'en_US_AriaNeural',
  en_US_ElizabethNeural = 'en_US_ElizabethNeural',
  en_US_AIGenerate2Neural = 'en_US_AIGenerate2Neural',
  en_US_JennyMultilingualNeural = 'en_US_JennyMultilingualNeural',
  en_US_JennyMultilingualV2Neural = 'en_US_JennyMultilingualV2Neural',
}

export enum CastDtoRole {
  GOOD_GUY = 'GOOD_GUY',
  BAD_GUY = 'BAD_GUY',
  PROTAGONIST = 'PROTAGONIST',
  ANTAGONIST = 'ANTAGONIST',
}

export enum ShotCastDtoCharacterPlacement {
  Far_Left = 'Far_Left',
  Left = 'Left',
  Middle = 'Middle',
  Right = 'Right',
  Far_Right = 'Far_Right',
}

export enum ShotCastDtoRotation {
  ZERO = 0,
  NINETY = 90,
  ONE_HUNDRED_NINETY = 190,
  TWO_HUNDRED_SEVENTY = 270,
}

export enum ShotDtoShotType {
  Close_Up_Shot = 'Close_Up_Shot',
  Extreme_Long_Shot = 'Extreme_Long_Shot',
  Long_Shot = 'Long_Shot',
  Medium_Shot = 'Medium_Shot',
  Extreme_Close_Up_Shot = 'Extreme_Close_Up_Shot',
  Full_Shot = 'Full_Shot',
  Birds_Eye_View_Shot = 'Birds_Eye_View_Shot',
  Rule_of_Thirds_Shot = 'Rule_of_Thirds_Shot',
  Silhouette_Shot = 'Silhouette_Shot',
  Over_The_Shoulder_Shot = 'Over_The_Shoulder_Shot',
  Point_Of_View_Shot = 'Point_Of_View_Shot',
  Low_Angle_Shot = 'Low_Angle_Shot',
  High_Angle_Shot = 'High_Angle_Shot',
  Eye_Level_Shot = 'Eye_Level_Shot',
  Dutch_Angle_Shot = 'Dutch_Angle_Shot',
  Drone_Shot = 'Drone_Shot',
  Candid_Shot = 'Candid_Shot',
}

export enum ShotDtoTransitionIn {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum ShotDtoTransitionOut {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum ShotDtoAspectRatio {
  Aspect_9_16 = 'Aspect_9_16',
  Aspect_16_9 = 'Aspect_16_9',
  Aspect_1_1 = 'Aspect_1_1',
}

export enum CreateShotDtoShotType {
  Close_Up_Shot = 'Close_Up_Shot',
  Extreme_Long_Shot = 'Extreme_Long_Shot',
  Long_Shot = 'Long_Shot',
  Medium_Shot = 'Medium_Shot',
  Extreme_Close_Up_Shot = 'Extreme_Close_Up_Shot',
  Full_Shot = 'Full_Shot',
  Birds_Eye_View_Shot = 'Birds_Eye_View_Shot',
  Rule_of_Thirds_Shot = 'Rule_of_Thirds_Shot',
  Silhouette_Shot = 'Silhouette_Shot',
  Over_The_Shoulder_Shot = 'Over_The_Shoulder_Shot',
  Point_Of_View_Shot = 'Point_Of_View_Shot',
  Low_Angle_Shot = 'Low_Angle_Shot',
  High_Angle_Shot = 'High_Angle_Shot',
  Eye_Level_Shot = 'Eye_Level_Shot',
  Dutch_Angle_Shot = 'Dutch_Angle_Shot',
  Drone_Shot = 'Drone_Shot',
  Candid_Shot = 'Candid_Shot',
}

export enum CreateShotDtoTransitionIn {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum CreateShotDtoTransitionOut {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum CreateShotDtoAspectRatio {
  Aspect_9_16 = 'Aspect_9_16',
  Aspect_16_9 = 'Aspect_16_9',
  Aspect_1_1 = 'Aspect_1_1',
}

export enum UpdateShotDtoShotType {
  Close_Up_Shot = 'Close_Up_Shot',
  Extreme_Long_Shot = 'Extreme_Long_Shot',
  Long_Shot = 'Long_Shot',
  Medium_Shot = 'Medium_Shot',
  Extreme_Close_Up_Shot = 'Extreme_Close_Up_Shot',
  Full_Shot = 'Full_Shot',
  Birds_Eye_View_Shot = 'Birds_Eye_View_Shot',
  Rule_of_Thirds_Shot = 'Rule_of_Thirds_Shot',
  Silhouette_Shot = 'Silhouette_Shot',
  Over_The_Shoulder_Shot = 'Over_The_Shoulder_Shot',
  Point_Of_View_Shot = 'Point_Of_View_Shot',
  Low_Angle_Shot = 'Low_Angle_Shot',
  High_Angle_Shot = 'High_Angle_Shot',
  Eye_Level_Shot = 'Eye_Level_Shot',
  Dutch_Angle_Shot = 'Dutch_Angle_Shot',
  Drone_Shot = 'Drone_Shot',
  Candid_Shot = 'Candid_Shot',
}

export enum UpdateShotDtoTransitionIn {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum UpdateShotDtoTransitionOut {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum UpdateShotDtoAspectRatio {
  Aspect_9_16 = 'Aspect_9_16',
  Aspect_16_9 = 'Aspect_16_9',
  Aspect_1_1 = 'Aspect_1_1',
}

export enum SceneDtoTransitionIn {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum SceneDtoTransitionOut {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum CreateSceneDtoTransitionIn {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum CreateSceneDtoTransitionOut {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum UpdateSceneDtoTransitionIn {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum UpdateSceneDtoTransitionOut {
  Cut = 'Cut',
  Fade_In = 'Fade_In',
  Fade_Out = 'Fade_Out',
  Jump_Cut = 'Jump_Cut',
}

export enum JobState {
  active = 'active',
  delayed = 'delayed',
  completed = 'completed',
  failed = 'failed',
  waiting = 'waiting',
}

export enum EpisodeDtoRealMonth {
  January = 'January',
  February = 'February',
  March = 'March',
  April = 'April',
  May = 'May',
  June = 'June',
  July = 'July',
  August = 'August',
  September = 'September',
  October = 'October',
  November = 'November',
  December = 'December',
}

export enum EpisodeDtoAspectRatio {
  Aspect_9_16 = 'Aspect_9_16',
  Aspect_16_9 = 'Aspect_16_9',
  Aspect_1_1 = 'Aspect_1_1',
}

export enum CreateEpisodeDtoRealMonth {
  January = 'January',
  February = 'February',
  March = 'March',
  April = 'April',
  May = 'May',
  June = 'June',
  July = 'July',
  August = 'August',
  September = 'September',
  October = 'October',
  November = 'November',
  December = 'December',
}

export enum CreateEpisodeDtoAspectRatio {
  Aspect_9_16 = 'Aspect_9_16',
  Aspect_16_9 = 'Aspect_16_9',
  Aspect_1_1 = 'Aspect_1_1',
}

export enum UpdateEpisodeDtoRealMonth {
  January = 'January',
  February = 'February',
  March = 'March',
  April = 'April',
  May = 'May',
  June = 'June',
  July = 'July',
  August = 'August',
  September = 'September',
  October = 'October',
  November = 'November',
  December = 'December',
}

export enum UpdateEpisodeDtoAspectRatio {
  Aspect_9_16 = 'Aspect_9_16',
  Aspect_16_9 = 'Aspect_16_9',
  Aspect_1_1 = 'Aspect_1_1',
}

export enum ProjectDtoType {
  TVSeries = 'TVSeries',
  Movie = 'Movie',
  Documentary = 'Documentary',
  TikTok = 'TikTok',
  YouTube = 'YouTube',
}

export enum ProjectDtoStatus {
  InProgress = 'InProgress',
  Completed = 'Completed',
}

export enum UpdateProjectDtoStatus {
  InProgress = 'InProgress',
  Completed = 'Completed',
}

export enum CreateCastDtoRole {
  GOOD_GUY = 'GOOD_GUY',
  BAD_GUY = 'BAD_GUY',
  PROTAGONIST = 'PROTAGONIST',
  ANTAGONIST = 'ANTAGONIST',
}

export enum CreateCastDtoVoiceType {
  en_US_DavisNeural = 'en_US_DavisNeural',
  en_US_GuyNeural = 'en_US_GuyNeural',
  en_US_BrandonNeural = 'en_US_BrandonNeural',
  en_US_ChristopherNeural = 'en_US_ChristopherNeural',
  en_US_EricNeural = 'en_US_EricNeural',
  en_US_JacobNeural = 'en_US_JacobNeural',
  en_US_JasonNeural = 'en_US_JasonNeural',
  en_US_RogerNeural = 'en_US_RogerNeural',
  en_US_SteffanNeural = 'en_US_SteffanNeural',
  en_US_TonyNeural = 'en_US_TonyNeural',
  en_US_AIGenerate1Neural = 'en_US_AIGenerate1Neural',
  en_US_RyanMultilingualNeural = 'en_US_RyanMultilingualNeural',
  en_US_AshleyNeural = 'en_US_AshleyNeural',
  en_US_CoraNeural = 'en_US_CoraNeural',
  en_US_JaneNeural = 'en_US_JaneNeural',
  en_US_MichelleNeural = 'en_US_MichelleNeural',
  en_US_MonicaNeural = 'en_US_MonicaNeural',
  en_US_NancyNeural = 'en_US_NancyNeural',
  en_US_SaraNeural = 'en_US_SaraNeural',
  en_US_JennyNeural = 'en_US_JennyNeural',
  en_US_AmberNeural = 'en_US_AmberNeural',
  en_US_AnaNeural = 'en_US_AnaNeural',
  en_US_AriaNeural = 'en_US_AriaNeural',
  en_US_ElizabethNeural = 'en_US_ElizabethNeural',
  en_US_AIGenerate2Neural = 'en_US_AIGenerate2Neural',
  en_US_JennyMultilingualNeural = 'en_US_JennyMultilingualNeural',
  en_US_JennyMultilingualV2Neural = 'en_US_JennyMultilingualV2Neural',
}

export enum UpdateCastDtoRole {
  GOOD_GUY = 'GOOD_GUY',
  BAD_GUY = 'BAD_GUY',
  PROTAGONIST = 'PROTAGONIST',
  ANTAGONIST = 'ANTAGONIST',
}

export enum UpdateCastDtoVoiceType {
  en_US_DavisNeural = 'en_US_DavisNeural',
  en_US_GuyNeural = 'en_US_GuyNeural',
  en_US_BrandonNeural = 'en_US_BrandonNeural',
  en_US_ChristopherNeural = 'en_US_ChristopherNeural',
  en_US_EricNeural = 'en_US_EricNeural',
  en_US_JacobNeural = 'en_US_JacobNeural',
  en_US_JasonNeural = 'en_US_JasonNeural',
  en_US_RogerNeural = 'en_US_RogerNeural',
  en_US_SteffanNeural = 'en_US_SteffanNeural',
  en_US_TonyNeural = 'en_US_TonyNeural',
  en_US_AIGenerate1Neural = 'en_US_AIGenerate1Neural',
  en_US_RyanMultilingualNeural = 'en_US_RyanMultilingualNeural',
  en_US_AshleyNeural = 'en_US_AshleyNeural',
  en_US_CoraNeural = 'en_US_CoraNeural',
  en_US_JaneNeural = 'en_US_JaneNeural',
  en_US_MichelleNeural = 'en_US_MichelleNeural',
  en_US_MonicaNeural = 'en_US_MonicaNeural',
  en_US_NancyNeural = 'en_US_NancyNeural',
  en_US_SaraNeural = 'en_US_SaraNeural',
  en_US_JennyNeural = 'en_US_JennyNeural',
  en_US_AmberNeural = 'en_US_AmberNeural',
  en_US_AnaNeural = 'en_US_AnaNeural',
  en_US_AriaNeural = 'en_US_AriaNeural',
  en_US_ElizabethNeural = 'en_US_ElizabethNeural',
  en_US_AIGenerate2Neural = 'en_US_AIGenerate2Neural',
  en_US_JennyMultilingualNeural = 'en_US_JennyMultilingualNeural',
  en_US_JennyMultilingualV2Neural = 'en_US_JennyMultilingualV2Neural',
}

export enum CreateShotCastDtoCharacterPlacement {
  Far_Left = 'Far_Left',
  Left = 'Left',
  Middle = 'Middle',
  Right = 'Right',
  Far_Right = 'Far_Right',
}

export enum CreateShotCastDtoRotation {
  ZERO = 0,
  NINETY = 90,
  ONE_HUNDRED_NINETY = 190,
  TWO_HUNDRED_SEVENTY = 270,
}

export enum UpdateShotCastDtoCharacterPlacement {
  Far_Left = 'Far_Left',
  Left = 'Left',
  Middle = 'Middle',
  Right = 'Right',
  Far_Right = 'Far_Right',
}

export enum UpdateShotCastDtoRotation {
  ZERO = 0,
  NINETY = 90,
  ONE_HUNDRED_NINETY = 190,
  TWO_HUNDRED_SEVENTY = 270,
}

export enum FactorAbstractionDtoRepeatForEach {
  All = 'All',
  Beat = 'Beat',
  Character = 'Character',
  Episode = 'Episode',
  TV_Series = 'TV_Series',
  Season = 'Season',
  Scene = 'Scene',
  Shot = 'Shot',
  UniversalTruth = 'UniversalTruth',
}

export enum FactorInstanceDtoType {
  All = 'All',
  Beat = 'Beat',
  Character = 'Character',
  Episode = 'Episode',
  TV_Series = 'TV_Series',
  Season = 'Season',
  Scene = 'Scene',
  Shot = 'Shot',
  UniversalTruth = 'UniversalTruth',
}

export enum FactorInstanceDtoJobStatus {
  PENDING = 'PENDING',
  INPROGRESS = 'INPROGRESS',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
}

export enum FactorInstanceDtoOutputType {
  AIGenerated = 'AIGenerated',
  Manual = 'Manual',
}

export enum FactorInstanceOutputType {
  AIGenerated = 'AIGenerated',
  Manual = 'Manual',
}

export enum CreatePlaceDtoShotType {
  Close_Up_Shot = 'Close_Up_Shot',
  Extreme_Long_Shot = 'Extreme_Long_Shot',
  Long_Shot = 'Long_Shot',
  Medium_Shot = 'Medium_Shot',
  Extreme_Close_Up_Shot = 'Extreme_Close_Up_Shot',
  Full_Shot = 'Full_Shot',
  Birds_Eye_View_Shot = 'Birds_Eye_View_Shot',
  Rule_of_Thirds_Shot = 'Rule_of_Thirds_Shot',
  Silhouette_Shot = 'Silhouette_Shot',
  Over_The_Shoulder_Shot = 'Over_The_Shoulder_Shot',
  Point_Of_View_Shot = 'Point_Of_View_Shot',
  Low_Angle_Shot = 'Low_Angle_Shot',
  High_Angle_Shot = 'High_Angle_Shot',
  Eye_Level_Shot = 'Eye_Level_Shot',
  Dutch_Angle_Shot = 'Dutch_Angle_Shot',
  Drone_Shot = 'Drone_Shot',
  Candid_Shot = 'Candid_Shot',
}

export enum UpdatePlaceDtoShotType {
  Close_Up_Shot = 'Close_Up_Shot',
  Extreme_Long_Shot = 'Extreme_Long_Shot',
  Long_Shot = 'Long_Shot',
  Medium_Shot = 'Medium_Shot',
  Extreme_Close_Up_Shot = 'Extreme_Close_Up_Shot',
  Full_Shot = 'Full_Shot',
  Birds_Eye_View_Shot = 'Birds_Eye_View_Shot',
  Rule_of_Thirds_Shot = 'Rule_of_Thirds_Shot',
  Silhouette_Shot = 'Silhouette_Shot',
  Over_The_Shoulder_Shot = 'Over_The_Shoulder_Shot',
  Point_Of_View_Shot = 'Point_Of_View_Shot',
  Low_Angle_Shot = 'Low_Angle_Shot',
  High_Angle_Shot = 'High_Angle_Shot',
  Eye_Level_Shot = 'Eye_Level_Shot',
  Dutch_Angle_Shot = 'Dutch_Angle_Shot',
  Drone_Shot = 'Drone_Shot',
  Candid_Shot = 'Candid_Shot',
}

export enum PlaceQueueDtoJobStatus {
  active = 'active',
  delayed = 'delayed',
  waiting = 'waiting',
  completed = 'completed',
  failed = 'failed',
}

export enum CreateCharacterDtoGender {
  MALE = 'MALE',
  FEMALE = 'FEMALE',
}

export enum CreateCharacterDtoVoiceType {
  en_US_DavisNeural = 'en_US_DavisNeural',
  en_US_GuyNeural = 'en_US_GuyNeural',
  en_US_BrandonNeural = 'en_US_BrandonNeural',
  en_US_ChristopherNeural = 'en_US_ChristopherNeural',
  en_US_EricNeural = 'en_US_EricNeural',
  en_US_JacobNeural = 'en_US_JacobNeural',
  en_US_JasonNeural = 'en_US_JasonNeural',
  en_US_RogerNeural = 'en_US_RogerNeural',
  en_US_SteffanNeural = 'en_US_SteffanNeural',
  en_US_TonyNeural = 'en_US_TonyNeural',
  en_US_AIGenerate1Neural = 'en_US_AIGenerate1Neural',
  en_US_RyanMultilingualNeural = 'en_US_RyanMultilingualNeural',
  en_US_AshleyNeural = 'en_US_AshleyNeural',
  en_US_CoraNeural = 'en_US_CoraNeural',
  en_US_JaneNeural = 'en_US_JaneNeural',
  en_US_MichelleNeural = 'en_US_MichelleNeural',
  en_US_MonicaNeural = 'en_US_MonicaNeural',
  en_US_NancyNeural = 'en_US_NancyNeural',
  en_US_SaraNeural = 'en_US_SaraNeural',
  en_US_JennyNeural = 'en_US_JennyNeural',
  en_US_AmberNeural = 'en_US_AmberNeural',
  en_US_AnaNeural = 'en_US_AnaNeural',
  en_US_AriaNeural = 'en_US_AriaNeural',
  en_US_ElizabethNeural = 'en_US_ElizabethNeural',
  en_US_AIGenerate2Neural = 'en_US_AIGenerate2Neural',
  en_US_JennyMultilingualNeural = 'en_US_JennyMultilingualNeural',
  en_US_JennyMultilingualV2Neural = 'en_US_JennyMultilingualV2Neural',
}

export enum UpdateCharacterDtoGender {
  MALE = 'MALE',
  FEMALE = 'FEMALE',
}

export enum UpdateCharacterDtoVoiceType {
  en_US_DavisNeural = 'en_US_DavisNeural',
  en_US_GuyNeural = 'en_US_GuyNeural',
  en_US_BrandonNeural = 'en_US_BrandonNeural',
  en_US_ChristopherNeural = 'en_US_ChristopherNeural',
  en_US_EricNeural = 'en_US_EricNeural',
  en_US_JacobNeural = 'en_US_JacobNeural',
  en_US_JasonNeural = 'en_US_JasonNeural',
  en_US_RogerNeural = 'en_US_RogerNeural',
  en_US_SteffanNeural = 'en_US_SteffanNeural',
  en_US_TonyNeural = 'en_US_TonyNeural',
  en_US_AIGenerate1Neural = 'en_US_AIGenerate1Neural',
  en_US_RyanMultilingualNeural = 'en_US_RyanMultilingualNeural',
  en_US_AshleyNeural = 'en_US_AshleyNeural',
  en_US_CoraNeural = 'en_US_CoraNeural',
  en_US_JaneNeural = 'en_US_JaneNeural',
  en_US_MichelleNeural = 'en_US_MichelleNeural',
  en_US_MonicaNeural = 'en_US_MonicaNeural',
  en_US_NancyNeural = 'en_US_NancyNeural',
  en_US_SaraNeural = 'en_US_SaraNeural',
  en_US_JennyNeural = 'en_US_JennyNeural',
  en_US_AmberNeural = 'en_US_AmberNeural',
  en_US_AnaNeural = 'en_US_AnaNeural',
  en_US_AriaNeural = 'en_US_AriaNeural',
  en_US_ElizabethNeural = 'en_US_ElizabethNeural',
  en_US_AIGenerate2Neural = 'en_US_AIGenerate2Neural',
  en_US_JennyMultilingualNeural = 'en_US_JennyMultilingualNeural',
  en_US_JennyMultilingualV2Neural = 'en_US_JennyMultilingualV2Neural',
}

export enum VariableDtoScope {
  Global = 'Global',
  AssemblyStage = 'AssemblyStage',
}

export enum VariableCreateDtoScope {
  Global = 'Global',
  AssemblyStage = 'AssemblyStage',
}

export enum VariableUpdateDtoScope {
  Global = 'Global',
  AssemblyStage = 'AssemblyStage',
}

export enum MonikerSourceType {
  GITHUB = 'GITHUB',
  DIRECT_LINK = 'DIRECT_LINK',
  GOOGLE_DRIVE = 'GOOGLE_DRIVE',
}

export enum MonikerDataType {
  FILE = 'FILE',
  DIRECTORY = 'DIRECTORY',
  TEXT = 'TEXT',
}

export enum CreateVideoClipDtoType {
  Custom = 'Custom',
  BRoll = 'BRoll',
}

export enum VideoClipDtoType {
  Custom = 'Custom',
  BRoll = 'BRoll',
}

export enum UpdateVideoClipDtoType {
  Custom = 'Custom',
  BRoll = 'BRoll',
}

export type RegisterUserDTO = {
  username: string
  firstname: string
  lastname: string
  email: string
  password: string
  token?: string
  tokenType?: TokenType
}

export type TokenDto = {
  accessToken: string
  refreshToken?: string
}

export type GenericErrorDto = {
  statusCode: number
  message: string
  error: string
}

export type LoginDTO = {
  username: string
  password: string
}

export type ChangePasswordDTO = {
  currentPassword: string
  newPassword: string
}

export type ForgotPaswordDTO = {
  identifier: string
  domain?: ForgotPaswordDTODomain
}

export type ResetPasswordDTO = {
  token: string
  newPassword: string
}

export type UserDto = {
  id: string
  username: string
  firstname: string
  lastname: string
  email: string
  roles: Role[]
}

export type Pagination = {}

export type Sorting = {
  arrange: string
  column: string
}

export type AndCondition = {
  column: string
  comparator: FilterComparators
  value: string
}

export type OrCondition = {
  andCondition: AndCondition[]
}

export type Filter = {
  orCondition: OrCondition[]
}

export type PaginationMeta = {
  itemCount: number
  totalItems: number
  itemsPerPage: number
  totalPages: number
  currentPage: number
}

export type UserListDto = {
  items: UserDto[]
  meta: PaginationMeta
}

export type UpdateUserDto = {
  firstname: string
  lastname?: string
}

export type UpdateUserProfileDto = {
  firstname: string
  lastname?: string
  roles: Role[]
}

export type Address = {
  street: string
  city: string
  state: string
  zipCode: string
  countryCode: string
}

export type TenantDto = {
  id: string
  slug: string
  name: string
  description: string
  website: string
  email: string
  status: TenantStatus
  adminUserId: string
  adminUser: UserDto
  addressId: string
  address: Address
  createdAt: string
  createdBy: UserDto
  updatedAt: string
  updatedBy: UserDto
}

export type TenantListDto = {
  items: TenantDto[]
  meta: PaginationMeta
}

export type CreateTenantDto = {
  name: string
  description?: string
  website?: string
  street: string
  city: string
  state: string
  zipCode: string
  countryCode: string
}

export type UpdateTenantDto = {
  name?: string
  description?: string
  website?: string
  street?: string
  city?: string
  state?: string
  zipCode?: string
  countryCode?: string
  status: TenantStatus
}

export type InviteUserDto = {
  email: string
  tenantId: string
}

export type AcceptInvitationDto = {
  token: string
}

export type InvitationDetailDto = {
  id: string
  status: TenantInvitationStatus
  userId: string
  tenant: TenantDto
}

export type TenantUserDto = {
  id: string
  user: UserDto
}

export type TenantUserListDto = {
  items: TenantUserDto[]
  meta: PaginationMeta
}

export type TenantUserInvitationDto = {
  id: string
  email: string
  createdAt: string
  status: TenantInvitationStatus
}

export type TenantUserInvitationListDto = {
  items: TenantUserInvitationDto[]
  meta: PaginationMeta
}

export type AssemblyGroupDto = {
  id: string
  name: string
  description?: string
  published: boolean
  publishedBy?: UserDto
  createdAt?: string
  createdBy?: UserDto
  updatedAt?: string
  updatedBy?: UserDto
}

export type AssemblyStageDto = {
  id: string
  name: string
  order?: number
  slug: string
  description?: string
  published: boolean
  prompt?: string
  createdAt?: string
  createdBy?: UserDto
  updatedAt?: string
  updatedBy?: UserDto
  assemblyGroup?: AssemblyGroupDto
}

export type AssemblyStageListDto = {
  items: AssemblyStageDto[]
  meta: PaginationMeta
}

export type AssemblyStageCreateDTO = {
  name: string
  description: string
  prompt: string
  assemblyGroupId: string
}

export type AssemblyStageUpdateDTO = {
  slug: string
  published?: boolean
}

export type AssemblyOrderDto = {
  id: string
  order: number
}

export type ReOrderAssembliesDto = {
  order: AssemblyOrderDto[]
}

export type CreateAssemblyGroupDto = {
  name: string
  description: string
}

export type UpdateAssemblyGroupDto = {
  published?: boolean
}

export type AssemblyGroupListDto = {
  items: AssemblyGroupDto[]
  meta: PaginationMeta
}

export type AssemblyMissionDto = {
  id: string
  prompt: string
  promptRaw?: string
  output?: string
  status?: AssemblyMissionDtoStatus
  identifierParams?: string
  metadata?: Record<string, any>
  assemblyStage: AssemblyStageDto
  errorMessage?: string
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
}

export type AssemblyMissionListDto = {
  items: AssemblyMissionDto[]
  meta: PaginationMeta
}

export type AssemblyMissionCreateDTO = {
  assemblyStageSlug: string
  prompt?: string
  fileId?: string
  fileUrl?: string
  identifierParams?: string
  metadata?: Record<string, any>
}

export type AssemblyMissionUpdateDTO = {
  published: boolean
  output: string
}

export type AssemblyMissionPoliticalCheckDTO = {
  identifierParams: string
  prompt: string
  metadata?: Record<string, any>
}

export type AssetDto = {
  id: string
  filename: string
  originalname: string
  mimetype: string
  location?: string
  createdAt?: string
}

export type LicenseDto = {
  id: string
  isActive?: boolean
  sourceCompanyName: string
  sourceCompanyURL?: string
  imageSourceURL?: string
  licenseDate?: string
  licensePDF?: AssetDto
}

export type PlaceDto = {
  id: string
  name: string
  description?: string
  published: boolean
  publishedBy: UserDto
  placeImage?: AssetDto
  alternativePlaceImages?: AssetDto[]
  license?: LicenseDto
  createdAt: string
  createdBy: UserDto
  updatedAt: string
  updatedBy: UserDto
  shotType?: PlaceDtoShotType
  noOfCharacters?: number
  min?: number
  max?: number
  aiText?: string
  aiDescription?: string
}

export type ProjectJobDto = {
  title?: string
  id?: string
  number?: number
}

export type EpisodeJobDto = {
  title?: string
  id?: string
  number?: number
}

export type SeasonJobDto = {
  title?: string
  id?: string
  number?: number
}

export type SceneJobDto = {
  title?: string
  id?: string
}

export type ShotJobDto = {
  title?: string
  id?: string
}

export type JobDto = {
  id: string
  identifier: string
  params: void
  type: JobDtoType
  status: JobDtoStatus
  videoDuration?: number
  errorMsg?: string
  createdAt?: string
  updatedAt?: string
  createdBy?: UserDto
  project?: ProjectJobDto
  episode?: EpisodeJobDto
  season?: SeasonJobDto
  scene?: SceneJobDto
  shot?: ShotJobDto
}

export type CharacterDto = {
  id: string
  name: string
  description?: string
  slug: string
  gender: CharacterGenderENUM
  voiceType?: AudioVoiceType
  published: boolean
  publishedBy: UserDto
  characterImage?: AssetDto
  license?: LicenseDto
  createdAt: string
  createdBy: UserDto
  updatedAt: string
  updatedBy: UserDto
}

export type CastDto = {
  id: string
  characterId: string
  character: CharacterDto
  name: string
  profession: string
  description: string
  role: CastDtoRole
  age: number
  voiceType?: AudioVoiceType
  appearance: string
  essence: string
  overview: string
  notes: string
  height: number
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
}

export type ShotCastDto = {
  id: string
  shot: ShotDto
  cast: CastDto
  isPrimary: boolean
  parenthetical?: string
  characterPlacement: ShotCastDtoCharacterPlacement
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  rotation: ShotCastDtoRotation
}

export type ShotDto = {
  id: string
  title: string
  description?: string
  script?: string
  detail?: string
  shotType: ShotDtoShotType
  transitionIn: ShotDtoTransitionIn
  transitionOut: ShotDtoTransitionOut
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
  place: PlaceDto
  audioUrl: string
  audioDuration: number
  videoUrl?: string
  videoJob?: JobDto
  finalVideoUrl?: string
  audioJob?: JobDto
  unrealVideoJob?: JobDto
  unrealVideoUrl?: string
  finalVideoJob?: JobDto
  aspectRatio: ShotDtoAspectRatio
  metadata?: Record<string, any>
  shotCast?: ShotCastDto[]
  isNarration: boolean
}

export type ShotListDto = {
  items: ShotDto[]
  meta: PaginationMeta
}

export type CreateShotDto = {
  title: string
  description?: string
  script?: string
  detail?: string
  shotType?: CreateShotDtoShotType
  transitionIn?: CreateShotDtoTransitionIn
  transitionOut?: CreateShotDtoTransitionOut
  sceneId?: string
  placeId?: string | null
  aspectRatio?: CreateShotDtoAspectRatio
  isNarration?: boolean
  published?: boolean
}

export type UpdateShotDto = {
  title?: string
  description?: string
  script?: string
  detail?: string
  shotType?: UpdateShotDtoShotType
  transitionIn?: UpdateShotDtoTransitionIn
  transitionOut?: UpdateShotDtoTransitionOut
  sceneId?: string
  placeId?: string | null
  aspectRatio?: UpdateShotDtoAspectRatio
  isNarration?: boolean
  published?: boolean
}

export type LinkShotToSceneDto = {
  sceneId: string | null
}

export type AudioDurationShotDto = {
  audioDuration: number
}

export type AudioDurationSceneShotDto = {
  shotId: string
  shot: AudioDurationShotDto
}

export type SceneDto = {
  id: string
  title: string
  description: string
  transitionIn: SceneDtoTransitionIn
  transitionOut: SceneDtoTransitionOut
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
  place: PlaceDto
  finalVideoUrl?: string
  finalVideoJob?: JobDto
  metadata?: Record<string, any>
  sceneShots?: AudioDurationSceneShotDto[]
}

export type SceneListDto = {
  items: SceneDto[]
  meta: PaginationMeta
}

export type CreateSceneDto = {
  title: string
  description?: string
  transitionIn?: CreateSceneDtoTransitionIn
  transitionOut?: CreateSceneDtoTransitionOut
  episodeId?: string | null
  projectId?: string | null
  placeId?: string | null
  published?: boolean
}

export type UpdateSceneDto = {
  title?: string
  description?: string
  transitionIn?: UpdateSceneDtoTransitionIn
  transitionOut?: UpdateSceneDtoTransitionOut
  episodeId?: string | null
  projectId?: string | null
  placeId?: string | null
  published?: boolean
}

export type SceneShotsRelationsDto = {
  shotCharacter?: boolean
}

export type SceneShotDto = {
  id: string
  shotId: string
  shot: ShotDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  order: number
}

export type SceneShotsListDto = {
  items: SceneShotDto[]
  meta: PaginationMeta
}

export type SceneShotOrderDto = {
  id: string
  order: number
}

export type ReOrderSceneShotDto = {
  order: SceneShotOrderDto[]
}

export type VideoStyleDto = {
  id: string
  title: string
  description?: string
  published: boolean
  createdAt: string
  updatedAt: string
}

export type EpisodeDto = {
  id: string
  title: string
  description?: string
  executiveProducer?: string
  director?: string
  writer?: string
  notes?: string
  scriptPdfUrl?: string
  goal?: string
  bigTwist?: string
  startingContext?: string
  endingContext?: string
  number: number
  linkedToRealMonth: boolean
  realMonth?: EpisodeDtoRealMonth
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
  jobState?: JobState
  seasonNumber?: number
  finalVideoUrl?: string
  finalVideoJob?: JobDto
  aspectRatio: EpisodeDtoAspectRatio
  cinematicInspiration: string
  videoStyleId: string
  videoStyle: VideoStyleDto
  minDuration: string
  maxDuration: string
}

export type EpisodeListDto = {
  items: EpisodeDto[]
  meta: PaginationMeta
}

export type EpisodeSuggestionDto = {
  prompt: string
  description?: string
  goal?: string
  bigTwist?: string
  startingContext?: string
  endingContext?: string
  suggestion?: string
  id: string
  /**
   * @format date-time
   */
  createdAt: string
}

export type EpisodeSuggestionListDto = {
  items: EpisodeSuggestionDto[]
  meta: PaginationMeta
}

export type EpisodeSuggestionUpdateDto = {
  suggestion?: string
}

export type CreateEpisodeDto = {
  title: string
  number: number
  description?: string
  executiveProducer?: string
  director?: string
  writer?: string
  notes?: string
  scriptPdfUrl?: string
  goal?: string
  bigTwist?: string
  startingContext?: string
  endingContext?: string
  seasonId: string
  linkedToRealMonth: boolean
  realMonth?: CreateEpisodeDtoRealMonth
  aspectRatio: CreateEpisodeDtoAspectRatio
  cinematicInspiration?: string
  videoStyleId?: string
  minDuration?: string
  maxDuration?: string
  published?: boolean
}

export type EpisodeGenScriptDto = {
  customScript?: string
}

export type UpdateEpisodeDto = {
  title?: string
  number?: number
  description?: string
  executiveProducer?: string
  director?: string
  writer?: string
  notes?: string
  scriptPdfUrl?: string
  goal?: string
  bigTwist?: string
  startingContext?: string
  endingContext?: string
  seasonId?: string
  linkedToRealMonth?: boolean
  realMonth?: UpdateEpisodeDtoRealMonth
  aspectRatio?: UpdateEpisodeDtoAspectRatio
  cinematicInspiration?: string
  videoStyleId?: string
  minDuration?: string
  maxDuration?: string
  published?: boolean
}

export type EpisodeSceneDto = {
  id: string
  sceneId: string
  scene: SceneDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  order: number
}

export type EpisodeScenesListDto = {
  items: EpisodeSceneDto[]
  meta: PaginationMeta
}

export type EpisodeSceneOrderDto = {
  id: string
  order: number
}

export type ReOrderEpisodeSceneDto = {
  order: EpisodeSceneOrderDto[]
}

export type EpisodeScriptContent = {
  text: string
  alignment?: string
  margin?: string[]
  lineHeight?: number
  style?: string[]
  pageBreak?: string
  bold?: boolean
}

export type EpisodeScript = {
  text: string
  type: string
  sceneNumber: string
  shotNumber: string
}

export type GenerateEpisodeScript = {
  contents: EpisodeScriptContent[]
  scripts: EpisodeScript[]
}

export type EpisodeSuggestionEpiStatsDto = {
  episodeNumber: number
  description: boolean
  goal: boolean
  bigTwist: boolean
  startingContext: boolean
  endingContext: boolean
}

export type EpisodeSuggestionStatsDto = {
  seasonNumber: number
  episodes: EpisodeSuggestionEpiStatsDto[]
}

export type SeasonDto = {
  id: string
  title: string
  description: string
  number: number
  linkedToRealYear: boolean
  realYear?: number
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
}

export type SeasonListDto = {
  items: SeasonDto[]
  meta: PaginationMeta
}

export type CreateSeasonDto = {
  title: string
  number: number
  description?: string
  seriesId: string
  linkedToRealYear: boolean
  realYear?: number
  published?: boolean
}

export type UpdateSeasonDto = {
  title?: string
  number?: number
  description?: string
  seriesId?: string
  linkedToRealYear?: boolean
  realYear?: number
  published?: boolean
}

export type SeasonEpisode = {
  id: string
  episodeId: string
  episode: EpisodeDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type SeasonEpisodesListDto = {
  items: SeasonEpisode[]
  meta: PaginationMeta
}

export type SeasonEpisodesCount = {
  publishedEpisodesCount: number
  unpublishedEpisodesCount: number
}

export type SeriesDto = {
  id: string
  title: string
  description?: string
  productionCompany?: string
  script: string
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
}

export type SeriesListDto = {
  items: SeriesDto[]
  meta: PaginationMeta
}

export type CreateSeriesDto = {
  title: string
  description?: string
  productionCompany?: string
  projectId?: string
  genreId: string
}

export type UpdateSeriesDto = {
  title?: string
  description?: string
  productionCompany?: string
  projectId?: string
  genreId?: string
  published?: boolean
}

export type SeriesSeasonDto = {
  id: string
  seasonId: string
  season: SeasonDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type SeriesSeasonsListDto = {
  items: SeriesSeasonDto[]
  meta: PaginationMeta
}

export type GenreDto = {
  id: string
  name: string
}

export type SeriesGenreDto = {
  id: string
  genreId: string
  genre: GenreDto
  createdAt: string
  updatedAt: string
}

export type SeriesGenresListDto = {
  items: SeriesGenreDto[]
  meta: PaginationMeta
}

export type ProjectSeriesDto = {
  id: string
  seriesId: string
  series: SeriesDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type ProjectSceneDto = {
  id: string
  sceneId: string
  scene: SceneDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type ProjectDto = {
  id: string
  title: string
  description: string
  type: ProjectDtoType
  status: ProjectDtoStatus
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
  projectSeries: ProjectSeriesDto[]
  projectScene: ProjectSceneDto[]
}

export type ProjectListDto = {
  items: ProjectDto[]
  meta: PaginationMeta
}

export type ProjectRelationsDto = {
  projectSeries?: boolean
  projectScene?: boolean
}

export type CreateProjectDto = {
  title: string
  description?: string
  createCorrespondingTypeEntity?: boolean
  genreIds: string[]
  published?: boolean
}

export type UpdateProjectDto = {
  title?: string
  description?: string
  createCorrespondingTypeEntity?: boolean
  genreIds?: string[]
  published?: boolean
  status?: UpdateProjectDtoStatus
}

export type ProjectSeriesListDto = {
  items: ProjectSeriesDto[]
  meta: PaginationMeta
}

export type ProjectSceneListDto = {
  items: ProjectSceneDto[]
  meta: PaginationMeta
}

export type BreadcrumbShotDto = {
  shotId?: string
  shotTitle?: string
}

export type BreadcrumbSceneDto = {
  sceneId?: string
  sceneTitle?: string
  shot?: BreadcrumbShotDto[]
}

export type BreadcrumbEpisodeDto = {
  episodeId?: string
  episodeTitle?: string
  episodeNumber?: number
  scene?: BreadcrumbSceneDto[]
}

export type BreadcrumbSeasonDto = {
  seasonId?: string
  seasonTitle?: string
  seasonNumber?: number
  episode?: BreadcrumbEpisodeDto[]
}

export type BreadcrumbProjectDto = {
  projectId: string
  projectTitle: string
  season?: BreadcrumbSeasonDto[]
}

export type GenreListDto = {
  items: GenreDto[]
  meta: PaginationMeta
}

export type CreateCastDto = {
  projectId?: string
  characterId?: string
  name: string
  profession?: string
  description?: string
  role: CreateCastDtoRole
  age?: number
  voiceType?: CreateCastDtoVoiceType
  appearance?: string
  essence?: string
  overview?: string
  notes?: string
  height?: number
  published?: boolean
}

export type UpdateCastDto = {
  projectId?: string
  characterId?: string
  name?: string
  profession?: string
  description?: string
  role?: UpdateCastDtoRole
  age?: number
  voiceType?: UpdateCastDtoVoiceType
  appearance?: string
  essence?: string
  overview?: string
  notes?: string
  height?: number
  published?: boolean
}

export type CastListDto = {
  items: CastDto[]
  meta: PaginationMeta
}

export type CastEpisodeDto = {
  id: string
  title: string
  number: number
}

export type CastSeasonDto = {
  id: string
  title: string
  number: number
  episodes: CastEpisodeDto[]
}

export type CastSeasonEpisodeDto = {
  items: CastSeasonDto[]
}

export type CreateShotCastDto = {
  shotId?: string
  castId?: string
  isPrimary: boolean
  parenthetical?: string
  characterPlacement?: CreateShotCastDtoCharacterPlacement
  rotation: CreateShotCastDtoRotation
}

export type UpdateShotCastDto = {
  shotId?: string
  castId?: string
  isPrimary?: boolean
  parenthetical?: string
  characterPlacement?: UpdateShotCastDtoCharacterPlacement
  rotation?: UpdateShotCastDtoRotation
}

export type ShotCastListDto = {
  items: ShotCastDto[]
  meta: PaginationMeta
}

export type TodoDto = {
  id: string
  type: string
  priority: number
  task: string
  subType: string
}

export type TodoListDto = {
  items: TodoDto[]
  meta: PaginationMeta
}

export type CreateTodoDto = {
  type: string
  priority: number
  task: string
  subType: string
}

export type UpdateTodoDto = {
  type?: string
  priority?: number
  task?: string
  subType?: string
}

export type CreateTrackDto = {
  projectId?: string
  title: string
  description?: string
}

export type TrackDto = {
  id: string
  projectId: string
  project: ProjectDto
  title: string
  description: string
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type UpdateTrackDto = {
  projectId?: string
  title?: string
  description?: string
}

export type TrackListDto = {
  items: TrackDto[]
  meta: PaginationMeta
}

export type NavigationCursorDto = {
  userId: string
  projectId: string
  metadata: Record<string, any>
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type CreateNavigationCursorDto = {
  projectId: string
  /**
   * @example {"episode":{"id":"014d3972-400f-45a0-a226-1b9033cf89c1"},"season":{"id":"26912632-d173-4a2d-bf2f-d46e96e45b34"}}
   */
  metadata: Record<string, any>
}

export type UpdateNavigationCursorDto = {}

export type VideoStyleListDto = {
  items: VideoStyleDto[]
  meta: PaginationMeta
}

export type CreateBattleDto = {
  episodeId?: string
  title: string
  description?: string
}

export type BattleDto = {
  id: string
  episodeId: string
  episode: EpisodeDto
  title: string
  description: string
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type UpdateBattleDto = {
  episodeId?: string
  title?: string
  description?: string
}

export type BattleListDto = {
  items: BattleDto[]
  meta: PaginationMeta
}

export type CreateBeatDto = {
  episodeId?: string
  title: string
  description?: string
}

export type BeatDto = {
  id: string
  episodeId: string
  episode: EpisodeDto
  title: string
  description: string
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type UpdateBeatDto = {
  episodeId?: string
  title?: string
  description?: string
}

export type BeatListDto = {
  items: BeatDto[]
  meta: PaginationMeta
}

export type UniversalTruthCategoryDto = {
  id: string
  projectId: string
  title: string
  description?: string
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type UniversalTruthCategoryListDto = {
  items: UniversalTruthCategoryDto[]
  meta: PaginationMeta
}

export type CreateUniversalTruthDto = {
  projectId?: string
  title: string
  published?: boolean
  order: number
  description?: string
  applyDate?: string
  aiText?: string
  categoryId: string
  episodeId: string
}

export type UniversalTruthDto = {
  id: string
  projectId: string
  project: ProjectDto
  title: string
  description?: string
  applyDate: string
  aiText?: string
  order: number
  category: UniversalTruthCategoryDto
  episode: EpisodeDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
}

export type UniversalTruthListDto = {
  items: UniversalTruthDto[]
  meta: PaginationMeta
}

export type UpdateUniversalTruthDto = {
  projectId?: string
  title?: string
  published?: boolean
  order?: number
  description?: string
  applyDate?: string
  aiText?: string
  categoryId?: string
  episodeId?: string
}

export type CreateUniversalTruthCategoryDto = {
  projectId?: string
  title: string
  description?: string
}

export type UpdateUniversalTruthCategoryDto = {
  projectId?: string
  title: string
  description?: string
}

export type UniversalCategoryUniversalTruthDto = {
  id: string
  universalTruthId: string
  universalTruth: UniversalTruthDto
  universalTruthCategoryId: string
  universalTruthCategory: UniversalTruthCategoryDto
  createdAt: string
  updatedAt: string
}

export type UniversalCategoryUniversalListDto = {
  items: UniversalCategoryUniversalTruthDto[]
  meta: PaginationMeta
}

export type UnviersalTruthOrderDto = {
  id: string
  order: number
}

export type ReOrderUniversalTruthDto = {
  order: UnviersalTruthOrderDto[]
}

export type JobListDto = {
  items: JobDto[]
  meta: PaginationMeta
}

export type JobCreateDto = {}

export type JobDeleteDto = {}

export type JobStatusChangeDto = {}

export type FactorAbstractionDto = {
  id: string
  name: string
  priority: number
  description: string
  repeatForEach: FactorAbstractionDtoRepeatForEach
  hardUpdate: boolean
  parentId: string
  parent: FactorAbstractionDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  assemblyStageId: string
  assemblyStage: AssemblyStageDto
}

export type FactorInstanceDto = {
  id: string
  prompt: string
  manualPrompt: string
  output: string
  originalOutput: string
  isPrimary: boolean
  isAccepted: boolean
  version: number
  type: FactorInstanceDtoType
  factorAbstractionId: string
  seriesId: string
  seasonId: string
  episodeId: string
  sceneId: string
  shotId: string
  jobStatus: FactorInstanceDtoJobStatus
  errorMessage: string
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  factorAbstraction: FactorAbstractionDto
  outputType: FactorInstanceDtoOutputType
}

export type FactorInstanceListDto = {
  items: FactorInstanceDto[]
  meta: PaginationMeta
}

export type CreateFactorInstanceDto = {
  factorAbstractionId: string
  type: string
  isPrimary?: boolean
  outputType?: FactorInstanceOutputType
  manualPrompt?: string
  seriesId?: string
  seasonId?: string
  episodeId?: string
  sceneId?: string
  shotId?: string
  castId?: string
  universalTruthId?: string
}

export type UpdateFactorInstanceDto = {
  factorAbstractionId?: string
  type?: string
  isPrimary?: boolean
  outputType?: FactorInstanceOutputType
  manualPrompt?: string
  seriesId?: string
  seasonId?: string
  episodeId?: string
  sceneId?: string
  shotId?: string
  castId?: string
  universalTruthId?: string
  isAccepted?: boolean
  output?: string
}

export type SetPrimaryFactorInstanceDto = {
  output?: string
  manualPrompt?: string
  isAccepted?: boolean
  factorAbstractionId: string
  type: string
  seriesId?: string
  seasonId?: string
  episodeId?: string
  sceneId?: string
  shotId?: string
  castId?: string
  universalTruthId?: string
}

export type AddToQueue = {}

export type CreatePlaceDto = {
  name: string
  description?: string
  placeFile?: Record<string, any>
  alternativePlaceFiles?: string[]
  licensed?: boolean
  sourceCompanyName?: string
  sourceCompanyURL?: string
  imageSourceURL?: string
  licenseDate?: string
  licenseFile?: Record<string, any>
  shotType?: CreatePlaceDtoShotType
  noOfCharacters?: number
  min?: number
  max?: number
  aiText?: string
  aiDescription?: string
  published?: boolean
}

export type UpdatePlaceDto = {
  name?: string
  description?: string
  placeFile?: Record<string, any>
  alternativePlaceFiles?: string[]
  licensed?: boolean
  sourceCompanyName?: string
  sourceCompanyURL?: string
  imageSourceURL?: string
  licenseDate?: string
  licenseFile?: Record<string, any>
  shotType?: UpdatePlaceDtoShotType
  noOfCharacters?: number
  min?: number
  max?: number
  aiText?: string
  aiDescription?: string
  published?: boolean
  placeImageId?: string
  licenseId?: string
}

export type PlaceListDto = {
  items: PlaceDto[]
  meta: PaginationMeta
}

export type PlaceQueueDto = {
  placeId: string
  name: string
  jobStatus: PlaceQueueDtoJobStatus
  /**
   * @format date-time
   */
  addedAt: string
  error?: string
}

export type PlaceListQueueDto = {
  items: PlaceQueueDto[]
  meta: PaginationMeta
}

export type CreatePlaceCategoryDto = {
  name: string
  description?: string
}

export type PlaceCategoryDto = {
  id: string
  name: string
  description?: string
}

export type UpdatePlaceCategoryDto = {
  name: string
  description?: string
}

export type PlaceCategoryListDto = {
  items: PlaceCategoryDto[]
  meta: PaginationMeta
}

export type PlaceCategoryPlaceDto = {
  id: string
  placeId: string
  place: PlaceDto
  placeCateogoryId: string
  placeCateogory: PlaceCategoryDto
  createdAt: string
  updatedAt: string
}

export type PlaceCategoryPlaceListDto = {
  items: PlaceCategoryPlaceDto[]
  meta: PaginationMeta
}

export type CreateCharacterDto = {
  name: string
  description?: string
  characterFile?: Record<string, any>
  gender: CreateCharacterDtoGender
  voiceType?: CreateCharacterDtoVoiceType
  licensed?: boolean
  sourceCompanyName?: string
  sourceCompanyURL?: string
  imageSourceURL?: string
  licenseDate?: string
  licenseFile?: Record<string, any>
  published?: boolean
}

export type UpdateCharacterDto = {
  name?: string
  description?: string
  characterFile?: Record<string, any>
  gender?: UpdateCharacterDtoGender
  voiceType?: UpdateCharacterDtoVoiceType
  licensed?: boolean
  sourceCompanyName?: string
  sourceCompanyURL?: string
  imageSourceURL?: string
  licenseDate?: string
  licenseFile?: Record<string, any>
  published?: boolean
  characterImageId?: string
  licenseId?: string
}

export type CharacterListDto = {
  items: CharacterDto[]
  meta: PaginationMeta
}

export type PaginationMetaDto = {
  totalItems: number
  itemCount: number
  itemsPerPage: number
  totalPages: number
  currentPage: number
}

export type CharacterRoleDto = {
  id: string
  characterName: string
  role: string
}

export type CharacterSeasonDto = {
  id: string
  number: string
  title: string
}

export type CustomCharacterDto = {
  id: string
  characterName: string
  jobTitle: string
  episodeNumber: number
  role: CharacterRoleDto[]
  seasons: CharacterSeasonDto[]
  published: boolean
}

export type CharacterListResponseDto = {
  meta: PaginationMetaDto
  items: CustomCharacterDto[]
}

export type CreateCharacterCategoryDto = {
  name: string
  description?: string
}

export type CharacterCategoryDto = {
  id: string
  name: string
  description?: string
}

export type UpdateCharacterCategoryDto = {
  name: string
  description?: string
}

export type CharacterCategoryListDto = {
  items: CharacterCategoryDto[]
  meta: PaginationMeta
}

export type CharacterCategoryCharacterDto = {
  id: string
  characterId: string
  character: CharacterDto
  characterCateogoryId: string
  characterCateogory: CharacterCategoryDto
  createdAt: string
  updatedAt: string
}

export type CharacterCategoryCharacterListDto = {
  items: CharacterCategoryCharacterDto[]
  meta: PaginationMeta
}

export type FactorAbstractionListDto = {
  items: FactorAbstractionDto[]
  meta: PaginationMeta
}

export type CreateFactorAbstractionDto = {
  name: string
  priority: number
  parentId?: string | null
  repeatForEach: string
  description?: string | null
  assemblyStageId?: string | null
}

export type UpdateFactorAbstractionDto = {
  name?: string
  priority?: number
  parentId?: string | null
  repeatForEach?: string
  description?: string | null
  assemblyStageId?: string | null
}

export type FactorAbstractionDependentDto = {
  id: string
  factorAbstractionId: string
  factorAbstraction: FactorAbstractionDto
  parentFactorAbstractionId: string
  parentFactorAbstraction: FactorAbstractionDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type FactorAbstractionDependentListDto = {
  items: FactorAbstractionDependentDto[]
  meta: PaginationMeta
}

export type AddFactorAbstractionDependentDto = {
  parentFactorAbstractionId?: string | null
}

export type CreatePipelineDto = {
  name: string
  priority: number
  prompt: string
  parentPipelineId?: string
}

export type CreateAssemblyDto = {
  name: string
  prompt: string
  pipelineId?: string
}

export type AssemblyDto = {
  id: string
  name: string
  prompt: string
  pipelineId?: string
}

export type PipelineDto = {
  id: string
  name: string
  priority: number
  prompt: string
  parentPipeline?: PipelineDto[]
  children?: PipelineDto[]
  assemblies?: AssemblyDto[]
}

export type PipelineListDto = {
  items: PipelineDto[]
  meta: PaginationMeta
}

export type UpdatePipelineDto = {
  name?: string
  priority?: number
  prompt?: string
  parentPipelineId?: string
}

export type UpdateAssemblyDto = {
  name?: string
  prompt?: string
}

export type ShotDTO = {}

export type SceneDTO = {
  sceneTitle?: string
  sceneId?: string
  shots?: ShotDTO[]
}

export type CharacterDTO = {
  characterId?: string
  characterName?: string
}

export type EpisodeDTO = {
  episodeId?: string
  tvSeries?: string
  season?: string
  episode?: string
  scene?: string
  shot?: string
  duration?: number
  numOfCharacter?: string
  scenes?: SceneDTO[]
  characters?: CharacterDTO[]
}

export type VisualsYamlListDto = {
  items: EpisodeDTO[]
}

export type CreateSceneTemplateDto = {
  universalTruthCategoryId?: string
  title: string
}

export type SceneTemplateDto = {
  id: string
  universalTruthCategoryId: string
  universalTruthCategory: UniversalTruthCategoryDto
  title: string
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedBy: UserDto
}

export type SceneTemplateListDto = {
  items: SceneTemplateDto[]
  meta: PaginationMeta
}

export type UpdateSceneTemplateDto = {
  universalTruthCategoryId?: string
  title?: string
}

export type VariableDto = {
  id: string
  name: string
  description?: string
  value?: string
  scope?: VariableDtoScope
  assemblyGroup: AssemblyGroupDto
  assemblyStage: AssemblyStageDto
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
  published: boolean
  publishedByUser: UserDto
}

export type VariableListDto = {
  items: VariableDto[]
  meta: PaginationMeta
}

export type VariableCreateDto = {
  name: string
  assemblyGroupId: string
  description?: string
  value?: string
  scope?: VariableCreateDtoScope
  published?: boolean
  assemblyStageId?: string
}

export type VariableUpdateDto = {
  name?: string
  assemblyGroupId?: string
  description?: string
  value?: string
  scope?: VariableUpdateDtoScope
  published?: boolean
  assemblyStageId?: string
}

export type MonikerDto = {
  id: string
  value: string
  identifier: string
  sourceType: MonikerSourceType
  dataType: MonikerDataType
  createdBy: UserDto
  createdAt: string
  updatedAt: string
  updatedBy: UserDto
}

export type MonikerListDto = {
  items: MonikerDto[]
  meta: PaginationMeta
}

export type CreateMonikerDto = {
  value: string
  identifier: string
  sourceType: MonikerSourceType
  dataType: MonikerDataType
}

export type UpdateMonikerDto = {
  value?: string
  identifier?: string
  sourceType?: MonikerSourceType
  dataType?: MonikerDataType
}

export type CreateVideoClipDto = {
  name: string
  description?: string
  type?: CreateVideoClipDtoType
  video?: Record<string, any>
  published?: boolean
}

export type VideoClipDto = {
  id: string
  name: string
  description?: string
  type?: VideoClipDtoType
  published: boolean
  publishedBy: UserDto
  video?: AssetDto
  createdAt: string
  createdBy: UserDto
  updatedAt: string
  updatedBy: UserDto
}

export type UpdateVideoClipDto = {
  name?: string
  description?: string
  type?: UpdateVideoClipDtoType
  video?: Record<string, any>
  published?: boolean
  videoId?: string
}

export type VideoClipListDto = {
  items: VideoClipDto[]
  meta: PaginationMeta
}
