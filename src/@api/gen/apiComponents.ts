/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from '@tanstack/react-query'
import { useApiContext, ApiContext } from './apiContext'
import type * as Fetcher from './apiFetcher'
import { apiFetch } from './apiFetcher'
import type * as Schemas from './apiSchemas'

export type AppControllerHealthCheckError = Fetcher.ErrorWrapper<undefined>

export type AppControllerHealthCheckVariables = ApiContext['fetcherOptions']

export const fetchAppControllerHealthCheck = (variables: AppControllerHealthCheckVariables, signal?: AbortSignal) =>
  apiFetch<undefined, AppControllerHealthCheckError, undefined, {}, {}, {}>({
    url: '/healthcheck',
    method: 'get',
    ...variables,
    signal,
  })

export const useAppControllerHealthCheck = <TData = undefined>(
  variables: AppControllerHealthCheckVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, AppControllerHealthCheckError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<undefined, AppControllerHealthCheckError, TData>({
    queryKey: queryKeyFn({
      path: '/healthcheck',
      operationId: 'appControllerHealthCheck',
      variables,
    }),
    queryFn: ({ signal }) => fetchAppControllerHealthCheck({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type AuthControllerRegisterError = Fetcher.ErrorWrapper<{
  status: 400
  payload: Schemas.GenericErrorDto
}>

export type AuthControllerRegisterVariables = {
  body: Schemas.RegisterUserDTO
} & ApiContext['fetcherOptions']

export const fetchAuthControllerRegister = (variables: AuthControllerRegisterVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TokenDto, AuthControllerRegisterError, Schemas.RegisterUserDTO, {}, {}, {}>({
    url: '/auth/register',
    method: 'post',
    ...variables,
    signal,
  })

export const useAuthControllerRegister = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TokenDto, AuthControllerRegisterError, AuthControllerRegisterVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.TokenDto, AuthControllerRegisterError, AuthControllerRegisterVariables>({
    mutationFn: (variables: AuthControllerRegisterVariables) =>
      fetchAuthControllerRegister({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type AuthControllerLoginError = Fetcher.ErrorWrapper<{
  status: 400
  payload: Schemas.GenericErrorDto
}>

export type AuthControllerLoginVariables = {
  body: Schemas.LoginDTO
} & ApiContext['fetcherOptions']

export const fetchAuthControllerLogin = (variables: AuthControllerLoginVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TokenDto, AuthControllerLoginError, Schemas.LoginDTO, {}, {}, {}>({
    url: '/auth/login',
    method: 'post',
    ...variables,
    signal,
  })

export const useAuthControllerLogin = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TokenDto, AuthControllerLoginError, AuthControllerLoginVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.TokenDto, AuthControllerLoginError, AuthControllerLoginVariables>({
    mutationFn: (variables: AuthControllerLoginVariables) =>
      fetchAuthControllerLogin({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type AuthControllerChangePasswordError = Fetcher.ErrorWrapper<undefined>

export type AuthControllerChangePasswordVariables = {
  body: Schemas.ChangePasswordDTO
} & ApiContext['fetcherOptions']

export const fetchAuthControllerChangePassword = (
  variables: AuthControllerChangePasswordVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AuthControllerChangePasswordError, Schemas.ChangePasswordDTO, {}, {}, {}>({
    url: '/auth/change-password',
    method: 'post',
    ...variables,
    signal,
  })

export const useAuthControllerChangePassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, AuthControllerChangePasswordError, AuthControllerChangePasswordVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, AuthControllerChangePasswordError, AuthControllerChangePasswordVariables>({
    mutationFn: (variables: AuthControllerChangePasswordVariables) =>
      fetchAuthControllerChangePassword({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type AuthControllerForgotPasswordError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AuthControllerForgotPasswordVariables = {
  body: Schemas.ForgotPaswordDTO
} & ApiContext['fetcherOptions']

export const fetchAuthControllerForgotPassword = (
  variables: AuthControllerForgotPasswordVariables,
  signal?: AbortSignal,
) =>
  apiFetch<string, AuthControllerForgotPasswordError, Schemas.ForgotPaswordDTO, {}, {}, {}>({
    url: '/auth/forgot-password',
    method: 'post',
    ...variables,
    signal,
  })

export const useAuthControllerForgotPassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<string, AuthControllerForgotPasswordError, AuthControllerForgotPasswordVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<string, AuthControllerForgotPasswordError, AuthControllerForgotPasswordVariables>({
    mutationFn: (variables: AuthControllerForgotPasswordVariables) =>
      fetchAuthControllerForgotPassword({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type AuthControllerResetPasswordError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AuthControllerResetPasswordVariables = {
  body: Schemas.ResetPasswordDTO
} & ApiContext['fetcherOptions']

export const fetchAuthControllerResetPassword = (
  variables: AuthControllerResetPasswordVariables,
  signal?: AbortSignal,
) =>
  apiFetch<string, AuthControllerResetPasswordError, Schemas.ResetPasswordDTO, {}, {}, {}>({
    url: '/auth/reset-password',
    method: 'post',
    ...variables,
    signal,
  })

export const useAuthControllerResetPassword = (
  options?: Omit<
    reactQuery.UseMutationOptions<string, AuthControllerResetPasswordError, AuthControllerResetPasswordVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<string, AuthControllerResetPasswordError, AuthControllerResetPasswordVariables>({
    mutationFn: (variables: AuthControllerResetPasswordVariables) =>
      fetchAuthControllerResetPassword({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserControllerMeError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UserControllerMeVariables = ApiContext['fetcherOptions']

export const fetchUserControllerMe = (variables: UserControllerMeVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserDto, UserControllerMeError, undefined, {}, {}, {}>({
    url: '/user/me',
    method: 'get',
    ...variables,
    signal,
  })

export const useUserControllerMe = <TData = Schemas.UserDto>(
  variables: UserControllerMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserDto, UserControllerMeError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.UserDto, UserControllerMeError, TData>({
    queryKey: queryKeyFn({
      path: '/user/me',
      operationId: 'userControllerMe',
      variables,
    }),
    queryFn: ({ signal }) => fetchUserControllerMe({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type UserControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type UserControllerFindAllVariables = {
  queryParams: UserControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchUserControllerFindAll = (variables: UserControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserListDto, UserControllerFindAllError, undefined, {}, UserControllerFindAllQueryParams, {}>({
    url: '/user',
    method: 'get',
    ...variables,
    signal,
  })

export const useUserControllerFindAll = <TData = Schemas.UserListDto>(
  variables: UserControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserListDto, UserControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.UserListDto, UserControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/user',
      operationId: 'userControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchUserControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserControllerFindOnePathParams = {
  id: string
}

export type UserControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UserControllerFindOneVariables = {
  pathParams: UserControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchUserControllerFindOne = (variables: UserControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserDto, UserControllerFindOneError, undefined, {}, {}, UserControllerFindOnePathParams>({
    url: '/user/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useUserControllerFindOne = <TData = Schemas.UserDto>(
  variables: UserControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UserDto, UserControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.UserDto, UserControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/user/{id}',
      operationId: 'userControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchUserControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserControllerUpdatePathParams = {
  id: string
}

export type UserControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UserControllerUpdateVariables = {
  body: Schemas.UpdateUserDto
  pathParams: UserControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchUserControllerUpdate = (variables: UserControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.UserDto, UserControllerUpdateError, Schemas.UpdateUserDto, {}, {}, UserControllerUpdatePathParams>({
    url: '/user/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useUserControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.UserDto, UserControllerUpdateError, UserControllerUpdateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.UserDto, UserControllerUpdateError, UserControllerUpdateVariables>({
    mutationFn: (variables: UserControllerUpdateVariables) =>
      fetchUserControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UserControllerUpdateUserProfilePathParams = {
  id: string
}

export type UserControllerUpdateUserProfileError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UserControllerUpdateUserProfileVariables = {
  body: Schemas.UpdateUserProfileDto
  pathParams: UserControllerUpdateUserProfilePathParams
} & ApiContext['fetcherOptions']

export const fetchUserControllerUpdateUserProfile = (
  variables: UserControllerUpdateUserProfileVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UserDto,
    UserControllerUpdateUserProfileError,
    Schemas.UpdateUserProfileDto,
    {},
    {},
    UserControllerUpdateUserProfilePathParams
  >({ url: '/user/{id}/update', method: 'patch', ...variables, signal })

export const useUserControllerUpdateUserProfile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UserDto,
      UserControllerUpdateUserProfileError,
      UserControllerUpdateUserProfileVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.UserDto,
    UserControllerUpdateUserProfileError,
    UserControllerUpdateUserProfileVariables
  >({
    mutationFn: (variables: UserControllerUpdateUserProfileVariables) =>
      fetchUserControllerUpdateUserProfile({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TenantControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type TenantControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type TenantControllerFindAllVariables = {
  queryParams: TenantControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchTenantControllerFindAll = (variables: TenantControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TenantListDto, TenantControllerFindAllError, undefined, {}, TenantControllerFindAllQueryParams, {}>({
    url: '/api/tenant',
    method: 'get',
    ...variables,
    signal,
  })

export const useTenantControllerFindAll = <TData = Schemas.TenantListDto>(
  variables: TenantControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TenantListDto, TenantControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.TenantListDto, TenantControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/api/tenant',
      operationId: 'tenantControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchTenantControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TenantControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type TenantControllerCreateVariables = {
  body: Schemas.CreateTenantDto
} & ApiContext['fetcherOptions']

export const fetchTenantControllerCreate = (variables: TenantControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TenantDto, TenantControllerCreateError, Schemas.CreateTenantDto, {}, {}, {}>({
    url: '/api/tenant',
    method: 'post',
    ...variables,
    signal,
  })

export const useTenantControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TenantDto, TenantControllerCreateError, TenantControllerCreateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.TenantDto, TenantControllerCreateError, TenantControllerCreateVariables>({
    mutationFn: (variables: TenantControllerCreateVariables) =>
      fetchTenantControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TenantControllerFindOnePathParams = {
  slug: string
}

export type TenantControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type TenantControllerFindOneVariables = {
  pathParams: TenantControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchTenantControllerFindOne = (variables: TenantControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TenantDto, TenantControllerFindOneError, undefined, {}, {}, TenantControllerFindOnePathParams>({
    url: '/api/tenant/{slug}',
    method: 'get',
    ...variables,
    signal,
  })

export const useTenantControllerFindOne = <TData = Schemas.TenantDto>(
  variables: TenantControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TenantDto, TenantControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.TenantDto, TenantControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/api/tenant/{slug}',
      operationId: 'tenantControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchTenantControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TenantControllerUpdateOnePathParams = {
  slug: string
}

export type TenantControllerUpdateOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type TenantControllerUpdateOneVariables = {
  body: Schemas.UpdateTenantDto
  pathParams: TenantControllerUpdateOnePathParams
} & ApiContext['fetcherOptions']

export const fetchTenantControllerUpdateOne = (variables: TenantControllerUpdateOneVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TenantDto,
    TenantControllerUpdateOneError,
    Schemas.UpdateTenantDto,
    {},
    {},
    TenantControllerUpdateOnePathParams
  >({ url: '/api/tenant/{slug}', method: 'patch', ...variables, signal })

export const useTenantControllerUpdateOne = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TenantDto,
      TenantControllerUpdateOneError,
      TenantControllerUpdateOneVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.TenantDto, TenantControllerUpdateOneError, TenantControllerUpdateOneVariables>({
    mutationFn: (variables: TenantControllerUpdateOneVariables) =>
      fetchTenantControllerUpdateOne({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TenantControllerDeleteOnePathParams = {
  slug: string
}

export type TenantControllerDeleteOneError = Fetcher.ErrorWrapper<undefined>

export type TenantControllerDeleteOneVariables = {
  pathParams: TenantControllerDeleteOnePathParams
} & ApiContext['fetcherOptions']

export const fetchTenantControllerDeleteOne = (variables: TenantControllerDeleteOneVariables, signal?: AbortSignal) =>
  apiFetch<undefined, TenantControllerDeleteOneError, undefined, {}, {}, TenantControllerDeleteOnePathParams>({
    url: '/api/tenant/{slug}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useTenantControllerDeleteOne = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, TenantControllerDeleteOneError, TenantControllerDeleteOneVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, TenantControllerDeleteOneError, TenantControllerDeleteOneVariables>({
    mutationFn: (variables: TenantControllerDeleteOneVariables) =>
      fetchTenantControllerDeleteOne({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TenantControllerInviteUserError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 409
      payload: Schemas.GenericErrorDto
    }
>

export type TenantControllerInviteUserVariables = {
  body: Schemas.InviteUserDto
} & ApiContext['fetcherOptions']

export const fetchTenantControllerInviteUser = (variables: TenantControllerInviteUserVariables, signal?: AbortSignal) =>
  apiFetch<undefined, TenantControllerInviteUserError, Schemas.InviteUserDto, {}, {}, {}>({
    url: '/api/tenant/invite-user',
    method: 'post',
    ...variables,
    signal,
  })

export const useTenantControllerInviteUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, TenantControllerInviteUserError, TenantControllerInviteUserVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, TenantControllerInviteUserError, TenantControllerInviteUserVariables>({
    mutationFn: (variables: TenantControllerInviteUserVariables) =>
      fetchTenantControllerInviteUser({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TenantControllerAcceptInvitationError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
>

export type TenantControllerAcceptInvitationVariables = {
  body: Schemas.AcceptInvitationDto
} & ApiContext['fetcherOptions']

export const fetchTenantControllerAcceptInvitation = (
  variables: TenantControllerAcceptInvitationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, TenantControllerAcceptInvitationError, Schemas.AcceptInvitationDto, {}, {}, {}>({
    url: '/api/tenant/accept-invitation',
    method: 'post',
    ...variables,
    signal,
  })

export const useTenantControllerAcceptInvitation = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TenantControllerAcceptInvitationError,
      TenantControllerAcceptInvitationVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    TenantControllerAcceptInvitationError,
    TenantControllerAcceptInvitationVariables
  >({
    mutationFn: (variables: TenantControllerAcceptInvitationVariables) =>
      fetchTenantControllerAcceptInvitation({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type TenantControllerGetInvitationDetailPathParams = {
  token: string
}

export type TenantControllerGetInvitationDetailError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
>

export type TenantControllerGetInvitationDetailVariables = {
  pathParams: TenantControllerGetInvitationDetailPathParams
} & ApiContext['fetcherOptions']

export const fetchTenantControllerGetInvitationDetail = (
  variables: TenantControllerGetInvitationDetailVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.InvitationDetailDto,
    TenantControllerGetInvitationDetailError,
    undefined,
    {},
    {},
    TenantControllerGetInvitationDetailPathParams
  >({
    url: '/api/tenant/invitation/{token}',
    method: 'get',
    ...variables,
    signal,
  })

export const useTenantControllerGetInvitationDetail = <TData = Schemas.InvitationDetailDto>(
  variables: TenantControllerGetInvitationDetailVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.InvitationDetailDto, TenantControllerGetInvitationDetailError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.InvitationDetailDto, TenantControllerGetInvitationDetailError, TData>({
    queryKey: queryKeyFn({
      path: '/api/tenant/invitation/{token}',
      operationId: 'tenantControllerGetInvitationDetail',
      variables,
    }),
    queryFn: ({ signal }) => fetchTenantControllerGetInvitationDetail({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TenantControllerFindAllTenantUsersPathParams = {
  idOrSlug: string
}

export type TenantControllerFindAllTenantUsersQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type TenantControllerFindAllTenantUsersError = Fetcher.ErrorWrapper<undefined>

export type TenantControllerFindAllTenantUsersVariables = {
  pathParams: TenantControllerFindAllTenantUsersPathParams
  queryParams: TenantControllerFindAllTenantUsersQueryParams
} & ApiContext['fetcherOptions']

export const fetchTenantControllerFindAllTenantUsers = (
  variables: TenantControllerFindAllTenantUsersVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.TenantUserListDto,
    TenantControllerFindAllTenantUsersError,
    undefined,
    {},
    TenantControllerFindAllTenantUsersQueryParams,
    TenantControllerFindAllTenantUsersPathParams
  >({
    url: '/api/tenant/{idOrSlug}/users',
    method: 'get',
    ...variables,
    signal,
  })

export const useTenantControllerFindAllTenantUsers = <TData = Schemas.TenantUserListDto>(
  variables: TenantControllerFindAllTenantUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TenantUserListDto, TenantControllerFindAllTenantUsersError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.TenantUserListDto, TenantControllerFindAllTenantUsersError, TData>({
    queryKey: queryKeyFn({
      path: '/api/tenant/{idOrSlug}/users',
      operationId: 'tenantControllerFindAllTenantUsers',
      variables,
    }),
    queryFn: ({ signal }) => fetchTenantControllerFindAllTenantUsers({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TenantControllerUpdateTenantError = Fetcher.ErrorWrapper<
  | {
      status: 403
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
>

export type TenantControllerUpdateTenantVariables = {
  body: Schemas.UpdateTenantDto
} & ApiContext['fetcherOptions']

export const fetchTenantControllerUpdateTenant = (
  variables: TenantControllerUpdateTenantVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.TenantDto, TenantControllerUpdateTenantError, Schemas.UpdateTenantDto, {}, {}, {}>({
    url: '/api/tenant/update-tenant',
    method: 'post',
    ...variables,
    signal,
  })

export const useTenantControllerUpdateTenant = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TenantDto,
      TenantControllerUpdateTenantError,
      TenantControllerUpdateTenantVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.TenantDto,
    TenantControllerUpdateTenantError,
    TenantControllerUpdateTenantVariables
  >({
    mutationFn: (variables: TenantControllerUpdateTenantVariables) =>
      fetchTenantControllerUpdateTenant({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TenantControllerFindAllTenantInvitedUsersPathParams = {
  idOrSlug: string
}

export type TenantControllerFindAllTenantInvitedUsersQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type TenantControllerFindAllTenantInvitedUsersError = Fetcher.ErrorWrapper<undefined>

export type TenantControllerFindAllTenantInvitedUsersVariables = {
  pathParams: TenantControllerFindAllTenantInvitedUsersPathParams
  queryParams: TenantControllerFindAllTenantInvitedUsersQueryParams
} & ApiContext['fetcherOptions']

export const fetchTenantControllerFindAllTenantInvitedUsers = (
  variables: TenantControllerFindAllTenantInvitedUsersVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.TenantUserInvitationListDto,
    TenantControllerFindAllTenantInvitedUsersError,
    undefined,
    {},
    TenantControllerFindAllTenantInvitedUsersQueryParams,
    TenantControllerFindAllTenantInvitedUsersPathParams
  >({
    url: '/api/tenant/{idOrSlug}/user-invitations',
    method: 'get',
    ...variables,
    signal,
  })

export const useTenantControllerFindAllTenantInvitedUsers = <TData = Schemas.TenantUserInvitationListDto>(
  variables: TenantControllerFindAllTenantInvitedUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TenantUserInvitationListDto,
      TenantControllerFindAllTenantInvitedUsersError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.TenantUserInvitationListDto,
    TenantControllerFindAllTenantInvitedUsersError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/tenant/{idOrSlug}/user-invitations',
      operationId: 'tenantControllerFindAllTenantInvitedUsers',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTenantControllerFindAllTenantInvitedUsers({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UserVerificationControllerVerifyPathParams = {
  id: string
}

export type UserVerificationControllerVerifyError = Fetcher.ErrorWrapper<undefined>

export type UserVerificationControllerVerifyVariables = {
  pathParams: UserVerificationControllerVerifyPathParams
} & ApiContext['fetcherOptions']

export const fetchUserVerificationControllerVerify = (
  variables: UserVerificationControllerVerifyVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    UserVerificationControllerVerifyError,
    undefined,
    {},
    {},
    UserVerificationControllerVerifyPathParams
  >({ url: '/user-verification/{id}', method: 'post', ...variables, signal })

export const useUserVerificationControllerVerify = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UserVerificationControllerVerifyError,
      UserVerificationControllerVerifyVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    UserVerificationControllerVerifyError,
    UserVerificationControllerVerifyVariables
  >({
    mutationFn: (variables: UserVerificationControllerVerifyVariables) =>
      fetchUserVerificationControllerVerify({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type AssemblyStageControllerGetAssemblyStagesQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
  assemblyGroupId?: string
}

export type AssemblyStageControllerGetAssemblyStagesError = Fetcher.ErrorWrapper<undefined>

export type AssemblyStageControllerGetAssemblyStagesVariables = {
  queryParams: AssemblyStageControllerGetAssemblyStagesQueryParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyStageControllerGetAssemblyStages = (
  variables: AssemblyStageControllerGetAssemblyStagesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyStageListDto,
    AssemblyStageControllerGetAssemblyStagesError,
    undefined,
    {},
    AssemblyStageControllerGetAssemblyStagesQueryParams,
    {}
  >({ url: '/assembly-stages', method: 'get', ...variables, signal })

export const useAssemblyStageControllerGetAssemblyStages = <TData = Schemas.AssemblyStageListDto>(
  variables: AssemblyStageControllerGetAssemblyStagesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AssemblyStageListDto, AssemblyStageControllerGetAssemblyStagesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.AssemblyStageListDto, AssemblyStageControllerGetAssemblyStagesError, TData>({
    queryKey: queryKeyFn({
      path: '/assembly-stages',
      operationId: 'assemblyStageControllerGetAssemblyStages',
      variables,
    }),
    queryFn: ({ signal }) => fetchAssemblyStageControllerGetAssemblyStages({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type AssemblyStageControllerCreateAssemblyStageError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type AssemblyStageControllerCreateAssemblyStageVariables = {
  body: Schemas.AssemblyStageCreateDTO
} & ApiContext['fetcherOptions']

export const fetchAssemblyStageControllerCreateAssemblyStage = (
  variables: AssemblyStageControllerCreateAssemblyStageVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyStageDto,
    AssemblyStageControllerCreateAssemblyStageError,
    Schemas.AssemblyStageCreateDTO,
    {},
    {},
    {}
  >({ url: '/assembly-stages', method: 'post', ...variables, signal })

export const useAssemblyStageControllerCreateAssemblyStage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyStageDto,
      AssemblyStageControllerCreateAssemblyStageError,
      AssemblyStageControllerCreateAssemblyStageVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyStageDto,
    AssemblyStageControllerCreateAssemblyStageError,
    AssemblyStageControllerCreateAssemblyStageVariables
  >({
    mutationFn: (variables: AssemblyStageControllerCreateAssemblyStageVariables) =>
      fetchAssemblyStageControllerCreateAssemblyStage({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type AssemblyStageControllerGetAssemblyStagePathParams = {
  slug: string
}

export type AssemblyStageControllerGetAssemblyStageError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyStageControllerGetAssemblyStageVariables = {
  pathParams: AssemblyStageControllerGetAssemblyStagePathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyStageControllerGetAssemblyStage = (
  variables: AssemblyStageControllerGetAssemblyStageVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyStageDto,
    AssemblyStageControllerGetAssemblyStageError,
    undefined,
    {},
    {},
    AssemblyStageControllerGetAssemblyStagePathParams
  >({ url: '/assembly-stages/{slug}', method: 'get', ...variables, signal })

export const useAssemblyStageControllerGetAssemblyStage = <TData = Schemas.AssemblyStageDto>(
  variables: AssemblyStageControllerGetAssemblyStageVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AssemblyStageDto, AssemblyStageControllerGetAssemblyStageError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.AssemblyStageDto, AssemblyStageControllerGetAssemblyStageError, TData>({
    queryKey: queryKeyFn({
      path: '/assembly-stages/{slug}',
      operationId: 'assemblyStageControllerGetAssemblyStage',
      variables,
    }),
    queryFn: ({ signal }) => fetchAssemblyStageControllerGetAssemblyStage({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type AssemblyStageControllerUpdateAssemblyStagePathParams = {
  slug: string
}

export type AssemblyStageControllerUpdateAssemblyStageError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyStageControllerUpdateAssemblyStageVariables = {
  body: Schemas.AssemblyStageUpdateDTO
  pathParams: AssemblyStageControllerUpdateAssemblyStagePathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyStageControllerUpdateAssemblyStage = (
  variables: AssemblyStageControllerUpdateAssemblyStageVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyStageDto,
    AssemblyStageControllerUpdateAssemblyStageError,
    Schemas.AssemblyStageUpdateDTO,
    {},
    {},
    AssemblyStageControllerUpdateAssemblyStagePathParams
  >({ url: '/assembly-stages/{slug}', method: 'put', ...variables, signal })

export const useAssemblyStageControllerUpdateAssemblyStage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyStageDto,
      AssemblyStageControllerUpdateAssemblyStageError,
      AssemblyStageControllerUpdateAssemblyStageVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyStageDto,
    AssemblyStageControllerUpdateAssemblyStageError,
    AssemblyStageControllerUpdateAssemblyStageVariables
  >({
    mutationFn: (variables: AssemblyStageControllerUpdateAssemblyStageVariables) =>
      fetchAssemblyStageControllerUpdateAssemblyStage({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type AssemblyStageControllerDeleteAssemblyStagePathParams = {
  slug: string
}

export type AssemblyStageControllerDeleteAssemblyStageError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyStageControllerDeleteAssemblyStageVariables = {
  pathParams: AssemblyStageControllerDeleteAssemblyStagePathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyStageControllerDeleteAssemblyStage = (
  variables: AssemblyStageControllerDeleteAssemblyStageVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyStageDto,
    AssemblyStageControllerDeleteAssemblyStageError,
    undefined,
    {},
    {},
    AssemblyStageControllerDeleteAssemblyStagePathParams
  >({ url: '/assembly-stages/{slug}', method: 'delete', ...variables, signal })

export const useAssemblyStageControllerDeleteAssemblyStage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyStageDto,
      AssemblyStageControllerDeleteAssemblyStageError,
      AssemblyStageControllerDeleteAssemblyStageVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyStageDto,
    AssemblyStageControllerDeleteAssemblyStageError,
    AssemblyStageControllerDeleteAssemblyStageVariables
  >({
    mutationFn: (variables: AssemblyStageControllerDeleteAssemblyStageVariables) =>
      fetchAssemblyStageControllerDeleteAssemblyStage({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type AssemblyStageControllerReOrderAssembliesError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyStageControllerReOrderAssembliesVariables = {
  body: Schemas.ReOrderAssembliesDto
} & ApiContext['fetcherOptions']

export const fetchAssemblyStageControllerReOrderAssemblies = (
  variables: AssemblyStageControllerReOrderAssembliesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyStageDto,
    AssemblyStageControllerReOrderAssembliesError,
    Schemas.ReOrderAssembliesDto,
    {},
    {},
    {}
  >({ url: '/assembly-stages/reorder', method: 'patch', ...variables, signal })

export const useAssemblyStageControllerReOrderAssemblies = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyStageDto,
      AssemblyStageControllerReOrderAssembliesError,
      AssemblyStageControllerReOrderAssembliesVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyStageDto,
    AssemblyStageControllerReOrderAssembliesError,
    AssemblyStageControllerReOrderAssembliesVariables
  >({
    mutationFn: (variables: AssemblyStageControllerReOrderAssembliesVariables) =>
      fetchAssemblyStageControllerReOrderAssemblies({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type AssemblyGroupControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type AssemblyGroupControllerCreateVariables = {
  body: Schemas.CreateAssemblyGroupDto
} & ApiContext['fetcherOptions']

export const fetchAssemblyGroupControllerCreate = (
  variables: AssemblyGroupControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.AssemblyGroupDto, AssemblyGroupControllerCreateError, Schemas.CreateAssemblyGroupDto, {}, {}, {}>({
    url: '/assembly-group',
    method: 'post',
    ...variables,
    signal,
  })

export const useAssemblyGroupControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyGroupDto,
      AssemblyGroupControllerCreateError,
      AssemblyGroupControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyGroupDto,
    AssemblyGroupControllerCreateError,
    AssemblyGroupControllerCreateVariables
  >({
    mutationFn: (variables: AssemblyGroupControllerCreateVariables) =>
      fetchAssemblyGroupControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type AssemblyGroupControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type AssemblyGroupControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type AssemblyGroupControllerFindAllVariables = {
  queryParams: AssemblyGroupControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyGroupControllerFindAll = (
  variables: AssemblyGroupControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyGroupListDto,
    AssemblyGroupControllerFindAllError,
    undefined,
    {},
    AssemblyGroupControllerFindAllQueryParams,
    {}
  >({ url: '/assembly-group', method: 'get', ...variables, signal })

export const useAssemblyGroupControllerFindAll = <TData = Schemas.AssemblyGroupListDto>(
  variables: AssemblyGroupControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AssemblyGroupListDto, AssemblyGroupControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.AssemblyGroupListDto, AssemblyGroupControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/assembly-group',
      operationId: 'assemblyGroupControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchAssemblyGroupControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type AssemblyGroupControllerUpdatePathParams = {
  id: string
}

export type AssemblyGroupControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyGroupControllerUpdateVariables = {
  body?: Schemas.UpdateAssemblyGroupDto
  pathParams: AssemblyGroupControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyGroupControllerUpdate = (
  variables: AssemblyGroupControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyGroupDto,
    AssemblyGroupControllerUpdateError,
    Schemas.UpdateAssemblyGroupDto,
    {},
    {},
    AssemblyGroupControllerUpdatePathParams
  >({ url: '/assembly-group/{id}', method: 'patch', ...variables, signal })

export const useAssemblyGroupControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyGroupDto,
      AssemblyGroupControllerUpdateError,
      AssemblyGroupControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyGroupDto,
    AssemblyGroupControllerUpdateError,
    AssemblyGroupControllerUpdateVariables
  >({
    mutationFn: (variables: AssemblyGroupControllerUpdateVariables) =>
      fetchAssemblyGroupControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type AssemblyGroupControllerFindOnePathParams = {
  id: string
}

export type AssemblyGroupControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyGroupControllerFindOneVariables = {
  pathParams: AssemblyGroupControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyGroupControllerFindOne = (
  variables: AssemblyGroupControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyGroupDto,
    AssemblyGroupControllerFindOneError,
    undefined,
    {},
    {},
    AssemblyGroupControllerFindOnePathParams
  >({ url: '/assembly-group/{id}', method: 'get', ...variables, signal })

export const useAssemblyGroupControllerFindOne = <TData = Schemas.AssemblyGroupDto>(
  variables: AssemblyGroupControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AssemblyGroupDto, AssemblyGroupControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.AssemblyGroupDto, AssemblyGroupControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/assembly-group/{id}',
      operationId: 'assemblyGroupControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchAssemblyGroupControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type AssemblyGroupControllerDeletePathParams = {
  id: string
}

export type AssemblyGroupControllerDeleteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyGroupControllerDeleteVariables = {
  pathParams: AssemblyGroupControllerDeletePathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyGroupControllerDelete = (
  variables: AssemblyGroupControllerDeleteVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, AssemblyGroupControllerDeleteError, undefined, {}, {}, AssemblyGroupControllerDeletePathParams>({
    url: '/assembly-group/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useAssemblyGroupControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AssemblyGroupControllerDeleteError,
      AssemblyGroupControllerDeleteVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, AssemblyGroupControllerDeleteError, AssemblyGroupControllerDeleteVariables>({
    mutationFn: (variables: AssemblyGroupControllerDeleteVariables) =>
      fetchAssemblyGroupControllerDelete({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type AssemblyMissionControllerGetAssemblyMissionsQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type AssemblyMissionControllerGetAssemblyMissionsError = Fetcher.ErrorWrapper<undefined>

export type AssemblyMissionControllerGetAssemblyMissionsVariables = {
  queryParams: AssemblyMissionControllerGetAssemblyMissionsQueryParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyMissionControllerGetAssemblyMissions = (
  variables: AssemblyMissionControllerGetAssemblyMissionsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyMissionListDto,
    AssemblyMissionControllerGetAssemblyMissionsError,
    undefined,
    {},
    AssemblyMissionControllerGetAssemblyMissionsQueryParams,
    {}
  >({ url: '/assembly-missions', method: 'get', ...variables, signal })

export const useAssemblyMissionControllerGetAssemblyMissions = <TData = Schemas.AssemblyMissionListDto>(
  variables: AssemblyMissionControllerGetAssemblyMissionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.AssemblyMissionListDto,
      AssemblyMissionControllerGetAssemblyMissionsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.AssemblyMissionListDto, AssemblyMissionControllerGetAssemblyMissionsError, TData>({
    queryKey: queryKeyFn({
      path: '/assembly-missions',
      operationId: 'assemblyMissionControllerGetAssemblyMissions',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAssemblyMissionControllerGetAssemblyMissions({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type AssemblyMissionControllerCreateAssemblyMissionError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type AssemblyMissionControllerCreateAssemblyMissionVariables = {
  body: Schemas.AssemblyMissionCreateDTO
} & ApiContext['fetcherOptions']

export const fetchAssemblyMissionControllerCreateAssemblyMission = (
  variables: AssemblyMissionControllerCreateAssemblyMissionVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyMissionDto,
    AssemblyMissionControllerCreateAssemblyMissionError,
    Schemas.AssemblyMissionCreateDTO,
    {},
    {},
    {}
  >({ url: '/assembly-missions', method: 'post', ...variables, signal })

export const useAssemblyMissionControllerCreateAssemblyMission = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyMissionDto,
      AssemblyMissionControllerCreateAssemblyMissionError,
      AssemblyMissionControllerCreateAssemblyMissionVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyMissionDto,
    AssemblyMissionControllerCreateAssemblyMissionError,
    AssemblyMissionControllerCreateAssemblyMissionVariables
  >({
    mutationFn: (variables: AssemblyMissionControllerCreateAssemblyMissionVariables) =>
      fetchAssemblyMissionControllerCreateAssemblyMission({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type AssemblyMissionControllerGetAssemblyMissionPathParams = {
  id: string
}

export type AssemblyMissionControllerGetAssemblyMissionError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyMissionControllerGetAssemblyMissionVariables = {
  pathParams: AssemblyMissionControllerGetAssemblyMissionPathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyMissionControllerGetAssemblyMission = (
  variables: AssemblyMissionControllerGetAssemblyMissionVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyMissionDto,
    AssemblyMissionControllerGetAssemblyMissionError,
    undefined,
    {},
    {},
    AssemblyMissionControllerGetAssemblyMissionPathParams
  >({ url: '/assembly-missions/{id}', method: 'get', ...variables, signal })

export const useAssemblyMissionControllerGetAssemblyMission = <TData = Schemas.AssemblyMissionDto>(
  variables: AssemblyMissionControllerGetAssemblyMissionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.AssemblyMissionDto, AssemblyMissionControllerGetAssemblyMissionError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.AssemblyMissionDto, AssemblyMissionControllerGetAssemblyMissionError, TData>({
    queryKey: queryKeyFn({
      path: '/assembly-missions/{id}',
      operationId: 'assemblyMissionControllerGetAssemblyMission',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAssemblyMissionControllerGetAssemblyMission({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type AssemblyMissionControllerUpdateAssemblyMissionPathParams = {
  id: string
}

export type AssemblyMissionControllerUpdateAssemblyMissionError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyMissionControllerUpdateAssemblyMissionVariables = {
  body: Schemas.AssemblyMissionUpdateDTO
  pathParams: AssemblyMissionControllerUpdateAssemblyMissionPathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyMissionControllerUpdateAssemblyMission = (
  variables: AssemblyMissionControllerUpdateAssemblyMissionVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyMissionDto,
    AssemblyMissionControllerUpdateAssemblyMissionError,
    Schemas.AssemblyMissionUpdateDTO,
    {},
    {},
    AssemblyMissionControllerUpdateAssemblyMissionPathParams
  >({ url: '/assembly-missions/{id}', method: 'put', ...variables, signal })

export const useAssemblyMissionControllerUpdateAssemblyMission = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyMissionDto,
      AssemblyMissionControllerUpdateAssemblyMissionError,
      AssemblyMissionControllerUpdateAssemblyMissionVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyMissionDto,
    AssemblyMissionControllerUpdateAssemblyMissionError,
    AssemblyMissionControllerUpdateAssemblyMissionVariables
  >({
    mutationFn: (variables: AssemblyMissionControllerUpdateAssemblyMissionVariables) =>
      fetchAssemblyMissionControllerUpdateAssemblyMission({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type AssemblyMissionControllerDeleteAssemblyMissionPathParams = {
  id: string
}

export type AssemblyMissionControllerDeleteAssemblyMissionError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyMissionControllerDeleteAssemblyMissionVariables = {
  pathParams: AssemblyMissionControllerDeleteAssemblyMissionPathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyMissionControllerDeleteAssemblyMission = (
  variables: AssemblyMissionControllerDeleteAssemblyMissionVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    AssemblyMissionControllerDeleteAssemblyMissionError,
    undefined,
    {},
    {},
    AssemblyMissionControllerDeleteAssemblyMissionPathParams
  >({ url: '/assembly-missions/{id}', method: 'delete', ...variables, signal })

export const useAssemblyMissionControllerDeleteAssemblyMission = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AssemblyMissionControllerDeleteAssemblyMissionError,
      AssemblyMissionControllerDeleteAssemblyMissionVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    AssemblyMissionControllerDeleteAssemblyMissionError,
    AssemblyMissionControllerDeleteAssemblyMissionVariables
  >({
    mutationFn: (variables: AssemblyMissionControllerDeleteAssemblyMissionVariables) =>
      fetchAssemblyMissionControllerDeleteAssemblyMission({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type AssemblyMissionControllerCreateAssemblyMissionStepError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type AssemblyMissionControllerCreateAssemblyMissionStepVariables = {
  body: Schemas.AssemblyMissionCreateDTO
} & ApiContext['fetcherOptions']

export const fetchAssemblyMissionControllerCreateAssemblyMissionStep = (
  variables: AssemblyMissionControllerCreateAssemblyMissionStepVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyMissionDto,
    AssemblyMissionControllerCreateAssemblyMissionStepError,
    Schemas.AssemblyMissionCreateDTO,
    {},
    {},
    {}
  >({ url: '/assembly-missions/step', method: 'post', ...variables, signal })

export const useAssemblyMissionControllerCreateAssemblyMissionStep = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyMissionDto,
      AssemblyMissionControllerCreateAssemblyMissionStepError,
      AssemblyMissionControllerCreateAssemblyMissionStepVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyMissionDto,
    AssemblyMissionControllerCreateAssemblyMissionStepError,
    AssemblyMissionControllerCreateAssemblyMissionStepVariables
  >({
    mutationFn: (variables: AssemblyMissionControllerCreateAssemblyMissionStepVariables) =>
      fetchAssemblyMissionControllerCreateAssemblyMissionStep({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type AssemblyMissionControllerExecutePathParams = {
  slug: string
}

export type AssemblyMissionControllerExecuteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type AssemblyMissionControllerExecuteVariables = {
  body: Schemas.AssemblyMissionPoliticalCheckDTO
  pathParams: AssemblyMissionControllerExecutePathParams
} & ApiContext['fetcherOptions']

export const fetchAssemblyMissionControllerExecute = (
  variables: AssemblyMissionControllerExecuteVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.AssemblyMissionDto,
    AssemblyMissionControllerExecuteError,
    Schemas.AssemblyMissionPoliticalCheckDTO,
    {},
    {},
    AssemblyMissionControllerExecutePathParams
  >({
    url: '/assembly-missions/execute/{slug}',
    method: 'post',
    ...variables,
    signal,
  })

export const useAssemblyMissionControllerExecute = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AssemblyMissionDto,
      AssemblyMissionControllerExecuteError,
      AssemblyMissionControllerExecuteVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.AssemblyMissionDto,
    AssemblyMissionControllerExecuteError,
    AssemblyMissionControllerExecuteVariables
  >({
    mutationFn: (variables: AssemblyMissionControllerExecuteVariables) =>
      fetchAssemblyMissionControllerExecute({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type ShotControllerFindAllShotsQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type ShotControllerFindAllShotsError = Fetcher.ErrorWrapper<undefined>

export type ShotControllerFindAllShotsVariables = {
  queryParams: ShotControllerFindAllShotsQueryParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerFindAllShots = (variables: ShotControllerFindAllShotsVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ShotListDto,
    ShotControllerFindAllShotsError,
    undefined,
    {},
    ShotControllerFindAllShotsQueryParams,
    {}
  >({ url: '/storyboard/shots', method: 'get', ...variables, signal })

export const useShotControllerFindAllShots = <TData = Schemas.ShotListDto>(
  variables: ShotControllerFindAllShotsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotListDto, ShotControllerFindAllShotsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotListDto, ShotControllerFindAllShotsError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/shots',
      operationId: 'shotControllerFindAllShots',
      variables,
    }),
    queryFn: ({ signal }) => fetchShotControllerFindAllShots({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ShotControllerCreateShotError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type ShotControllerCreateShotVariables = {
  body: Schemas.CreateShotDto
} & ApiContext['fetcherOptions']

export const fetchShotControllerCreateShot = (variables: ShotControllerCreateShotVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ShotDto, ShotControllerCreateShotError, Schemas.CreateShotDto, {}, {}, {}>({
    url: '/storyboard/shots',
    method: 'post',
    ...variables,
    signal,
  })

export const useShotControllerCreateShot = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ShotDto, ShotControllerCreateShotError, ShotControllerCreateShotVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.ShotDto, ShotControllerCreateShotError, ShotControllerCreateShotVariables>({
    mutationFn: (variables: ShotControllerCreateShotVariables) =>
      fetchShotControllerCreateShot({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ShotControllerGetVideoGenerationShotPathParams = {
  id: string
}

export type ShotControllerGetVideoGenerationShotError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ShotControllerGetVideoGenerationShotVariables = {
  pathParams: ShotControllerGetVideoGenerationShotPathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerGetVideoGenerationShot = (
  variables: ShotControllerGetVideoGenerationShotVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ShotDto,
    ShotControllerGetVideoGenerationShotError,
    undefined,
    {},
    {},
    ShotControllerGetVideoGenerationShotPathParams
  >({
    url: '/storyboard/shots/video-generation/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useShotControllerGetVideoGenerationShot = <TData = Schemas.ShotDto>(
  variables: ShotControllerGetVideoGenerationShotVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotDto, ShotControllerGetVideoGenerationShotError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotDto, ShotControllerGetVideoGenerationShotError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/shots/video-generation/{id}',
      operationId: 'shotControllerGetVideoGenerationShot',
      variables,
    }),
    queryFn: ({ signal }) => fetchShotControllerGetVideoGenerationShot({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ShotControllerFindOneShotPathParams = {
  id: string
}

export type ShotControllerFindOneShotError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ShotControllerFindOneShotVariables = {
  pathParams: ShotControllerFindOneShotPathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerFindOneShot = (variables: ShotControllerFindOneShotVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ShotDto, ShotControllerFindOneShotError, undefined, {}, {}, ShotControllerFindOneShotPathParams>({
    url: '/storyboard/shots/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useShotControllerFindOneShot = <TData = Schemas.ShotDto>(
  variables: ShotControllerFindOneShotVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotDto, ShotControllerFindOneShotError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotDto, ShotControllerFindOneShotError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/shots/{id}',
      operationId: 'shotControllerFindOneShot',
      variables,
    }),
    queryFn: ({ signal }) => fetchShotControllerFindOneShot({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ShotControllerUpdateShotPathParams = {
  id: string
}

export type ShotControllerUpdateShotError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ShotControllerUpdateShotVariables = {
  body?: Schemas.UpdateShotDto
  pathParams: ShotControllerUpdateShotPathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerUpdateShot = (variables: ShotControllerUpdateShotVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ShotDto,
    ShotControllerUpdateShotError,
    Schemas.UpdateShotDto,
    {},
    {},
    ShotControllerUpdateShotPathParams
  >({ url: '/storyboard/shots/{id}', method: 'patch', ...variables, signal })

export const useShotControllerUpdateShot = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.ShotDto, ShotControllerUpdateShotError, ShotControllerUpdateShotVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.ShotDto, ShotControllerUpdateShotError, ShotControllerUpdateShotVariables>({
    mutationFn: (variables: ShotControllerUpdateShotVariables) =>
      fetchShotControllerUpdateShot({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ShotControllerDeleteShotPathParams = {
  id: string
}

export type ShotControllerDeleteShotError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ShotControllerDeleteShotVariables = {
  pathParams: ShotControllerDeleteShotPathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerDeleteShot = (variables: ShotControllerDeleteShotVariables, signal?: AbortSignal) =>
  apiFetch<undefined, ShotControllerDeleteShotError, undefined, {}, {}, ShotControllerDeleteShotPathParams>({
    url: '/storyboard/shots/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useShotControllerDeleteShot = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, ShotControllerDeleteShotError, ShotControllerDeleteShotVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, ShotControllerDeleteShotError, ShotControllerDeleteShotVariables>({
    mutationFn: (variables: ShotControllerDeleteShotVariables) =>
      fetchShotControllerDeleteShot({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ShotControllerGenerateMediaFilesPathParams = {
  shotId: string
}

export type ShotControllerGenerateMediaFilesError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type ShotControllerGenerateMediaFilesVariables = {
  pathParams: ShotControllerGenerateMediaFilesPathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerGenerateMediaFiles = (
  variables: ShotControllerGenerateMediaFilesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    ShotControllerGenerateMediaFilesError,
    undefined,
    {},
    {},
    ShotControllerGenerateMediaFilesPathParams
  >({
    url: '/storyboard/shots/{shotId}/generate-media-files',
    method: 'post',
    ...variables,
    signal,
  })

export const useShotControllerGenerateMediaFiles = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ShotControllerGenerateMediaFilesError,
      ShotControllerGenerateMediaFilesVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    ShotControllerGenerateMediaFilesError,
    ShotControllerGenerateMediaFilesVariables
  >({
    mutationFn: (variables: ShotControllerGenerateMediaFilesVariables) =>
      fetchShotControllerGenerateMediaFiles({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type ShotControllerGenerateUnrealVideoPathParams = {
  shotId: string
}

export type ShotControllerGenerateUnrealVideoError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type ShotControllerGenerateUnrealVideoVariables = {
  pathParams: ShotControllerGenerateUnrealVideoPathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerGenerateUnrealVideo = (
  variables: ShotControllerGenerateUnrealVideoVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    ShotControllerGenerateUnrealVideoError,
    undefined,
    {},
    {},
    ShotControllerGenerateUnrealVideoPathParams
  >({
    url: '/storyboard/shots/{shotId}/generate-video',
    method: 'post',
    ...variables,
    signal,
  })

export const useShotControllerGenerateUnrealVideo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ShotControllerGenerateUnrealVideoError,
      ShotControllerGenerateUnrealVideoVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    ShotControllerGenerateUnrealVideoError,
    ShotControllerGenerateUnrealVideoVariables
  >({
    mutationFn: (variables: ShotControllerGenerateUnrealVideoVariables) =>
      fetchShotControllerGenerateUnrealVideo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type ShotControllerGenerateAudioFilePathParams = {
  shotId: string
}

export type ShotControllerGenerateAudioFileError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type ShotControllerGenerateAudioFileVariables = {
  pathParams: ShotControllerGenerateAudioFilePathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerGenerateAudioFile = (
  variables: ShotControllerGenerateAudioFileVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    ShotControllerGenerateAudioFileError,
    undefined,
    {},
    {},
    ShotControllerGenerateAudioFilePathParams
  >({
    url: '/storyboard/shots/{shotId}/generate-audio',
    method: 'post',
    ...variables,
    signal,
  })

export const useShotControllerGenerateAudioFile = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ShotControllerGenerateAudioFileError,
      ShotControllerGenerateAudioFileVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    ShotControllerGenerateAudioFileError,
    ShotControllerGenerateAudioFileVariables
  >({
    mutationFn: (variables: ShotControllerGenerateAudioFileVariables) =>
      fetchShotControllerGenerateAudioFile({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ShotControllerGenerate2DVideosPathParams = {
  shotId: string
}

export type ShotControllerGenerate2DVideosError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type ShotControllerGenerate2DVideosVariables = {
  pathParams: ShotControllerGenerate2DVideosPathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerGenerate2DVideos = (
  variables: ShotControllerGenerate2DVideosVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, ShotControllerGenerate2DVideosError, undefined, {}, {}, ShotControllerGenerate2DVideosPathParams>(
    {
      url: '/storyboard/shots/{shotId}/generate-2D-videos',
      method: 'post',
      ...variables,
      signal,
    },
  )

export const useShotControllerGenerate2DVideos = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ShotControllerGenerate2DVideosError,
      ShotControllerGenerate2DVideosVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    ShotControllerGenerate2DVideosError,
    ShotControllerGenerate2DVideosVariables
  >({
    mutationFn: (variables: ShotControllerGenerate2DVideosVariables) =>
      fetchShotControllerGenerate2DVideos({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ShotControllerGenerateFinalVideoPathParams = {
  shotId: string
}

export type ShotControllerGenerateFinalVideoError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type ShotControllerGenerateFinalVideoVariables = {
  pathParams: ShotControllerGenerateFinalVideoPathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerGenerateFinalVideo = (
  variables: ShotControllerGenerateFinalVideoVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.JobDto,
    ShotControllerGenerateFinalVideoError,
    undefined,
    {},
    {},
    ShotControllerGenerateFinalVideoPathParams
  >({
    url: '/storyboard/shots/{shotId}/generate-final-video',
    method: 'post',
    ...variables,
    signal,
  })

export const useShotControllerGenerateFinalVideo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.JobDto,
      ShotControllerGenerateFinalVideoError,
      ShotControllerGenerateFinalVideoVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.JobDto,
    ShotControllerGenerateFinalVideoError,
    ShotControllerGenerateFinalVideoVariables
  >({
    mutationFn: (variables: ShotControllerGenerateFinalVideoVariables) =>
      fetchShotControllerGenerateFinalVideo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type ShotControllerLinkShotToScenePathParams = {
  shotId: string
}

export type ShotControllerLinkShotToSceneError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type ShotControllerLinkShotToSceneVariables = {
  body: Schemas.LinkShotToSceneDto
  pathParams: ShotControllerLinkShotToScenePathParams
} & ApiContext['fetcherOptions']

export const fetchShotControllerLinkShotToScene = (
  variables: ShotControllerLinkShotToSceneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    ShotControllerLinkShotToSceneError,
    Schemas.LinkShotToSceneDto,
    {},
    {},
    ShotControllerLinkShotToScenePathParams
  >({
    url: '/storyboard/shots/{shotId}/link-scene',
    method: 'post',
    ...variables,
    signal,
  })

export const useShotControllerLinkShotToScene = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ShotControllerLinkShotToSceneError,
      ShotControllerLinkShotToSceneVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, ShotControllerLinkShotToSceneError, ShotControllerLinkShotToSceneVariables>({
    mutationFn: (variables: ShotControllerLinkShotToSceneVariables) =>
      fetchShotControllerLinkShotToScene({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SceneControllerFindAllScenesQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type SceneControllerFindAllScenesError = Fetcher.ErrorWrapper<undefined>

export type SceneControllerFindAllScenesVariables = {
  queryParams: SceneControllerFindAllScenesQueryParams
} & ApiContext['fetcherOptions']

export const fetchSceneControllerFindAllScenes = (
  variables: SceneControllerFindAllScenesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SceneListDto,
    SceneControllerFindAllScenesError,
    undefined,
    {},
    SceneControllerFindAllScenesQueryParams,
    {}
  >({ url: '/storyboard/scenes', method: 'get', ...variables, signal })

export const useSceneControllerFindAllScenes = <TData = Schemas.SceneListDto>(
  variables: SceneControllerFindAllScenesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SceneListDto, SceneControllerFindAllScenesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SceneListDto, SceneControllerFindAllScenesError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/scenes',
      operationId: 'sceneControllerFindAllScenes',
      variables,
    }),
    queryFn: ({ signal }) => fetchSceneControllerFindAllScenes({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SceneControllerCreateSceneError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type SceneControllerCreateSceneVariables = {
  body: Schemas.CreateSceneDto
} & ApiContext['fetcherOptions']

export const fetchSceneControllerCreateScene = (variables: SceneControllerCreateSceneVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SceneDto, SceneControllerCreateSceneError, Schemas.CreateSceneDto, {}, {}, {}>({
    url: '/storyboard/scenes',
    method: 'post',
    ...variables,
    signal,
  })

export const useSceneControllerCreateScene = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SceneDto,
      SceneControllerCreateSceneError,
      SceneControllerCreateSceneVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.SceneDto, SceneControllerCreateSceneError, SceneControllerCreateSceneVariables>(
    {
      mutationFn: (variables: SceneControllerCreateSceneVariables) =>
        fetchSceneControllerCreateScene({ ...fetcherOptions, ...variables }),
      ...options,
    },
  )
}

export type SceneControllerFindOneScenePathParams = {
  id: string
}

export type SceneControllerFindOneSceneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SceneControllerFindOneSceneVariables = {
  pathParams: SceneControllerFindOneScenePathParams
} & ApiContext['fetcherOptions']

export const fetchSceneControllerFindOneScene = (
  variables: SceneControllerFindOneSceneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SceneDto,
    SceneControllerFindOneSceneError,
    undefined,
    {},
    {},
    SceneControllerFindOneScenePathParams
  >({ url: '/storyboard/scenes/{id}', method: 'get', ...variables, signal })

export const useSceneControllerFindOneScene = <TData = Schemas.SceneDto>(
  variables: SceneControllerFindOneSceneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SceneDto, SceneControllerFindOneSceneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SceneDto, SceneControllerFindOneSceneError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/scenes/{id}',
      operationId: 'sceneControllerFindOneScene',
      variables,
    }),
    queryFn: ({ signal }) => fetchSceneControllerFindOneScene({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SceneControllerUpdateScenePathParams = {
  id: string
}

export type SceneControllerUpdateSceneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SceneControllerUpdateSceneVariables = {
  body?: Schemas.UpdateSceneDto
  pathParams: SceneControllerUpdateScenePathParams
} & ApiContext['fetcherOptions']

export const fetchSceneControllerUpdateScene = (variables: SceneControllerUpdateSceneVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.SceneDto,
    SceneControllerUpdateSceneError,
    Schemas.UpdateSceneDto,
    {},
    {},
    SceneControllerUpdateScenePathParams
  >({ url: '/storyboard/scenes/{id}', method: 'patch', ...variables, signal })

export const useSceneControllerUpdateScene = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SceneDto,
      SceneControllerUpdateSceneError,
      SceneControllerUpdateSceneVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.SceneDto, SceneControllerUpdateSceneError, SceneControllerUpdateSceneVariables>(
    {
      mutationFn: (variables: SceneControllerUpdateSceneVariables) =>
        fetchSceneControllerUpdateScene({ ...fetcherOptions, ...variables }),
      ...options,
    },
  )
}

export type SceneControllerDeleteScenePathParams = {
  id: string
}

export type SceneControllerDeleteSceneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SceneControllerDeleteSceneVariables = {
  pathParams: SceneControllerDeleteScenePathParams
} & ApiContext['fetcherOptions']

export const fetchSceneControllerDeleteScene = (variables: SceneControllerDeleteSceneVariables, signal?: AbortSignal) =>
  apiFetch<undefined, SceneControllerDeleteSceneError, undefined, {}, {}, SceneControllerDeleteScenePathParams>({
    url: '/storyboard/scenes/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useSceneControllerDeleteScene = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, SceneControllerDeleteSceneError, SceneControllerDeleteSceneVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, SceneControllerDeleteSceneError, SceneControllerDeleteSceneVariables>({
    mutationFn: (variables: SceneControllerDeleteSceneVariables) =>
      fetchSceneControllerDeleteScene({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SceneControllerFindAllSceneShotsPathParams = {
  sceneId: string
}

export type SceneControllerFindAllSceneShotsQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
  relations?: Schemas.SceneShotsRelationsDto
}

export type SceneControllerFindAllSceneShotsError = Fetcher.ErrorWrapper<undefined>

export type SceneControllerFindAllSceneShotsVariables = {
  pathParams: SceneControllerFindAllSceneShotsPathParams
  queryParams: SceneControllerFindAllSceneShotsQueryParams
} & ApiContext['fetcherOptions']

export const fetchSceneControllerFindAllSceneShots = (
  variables: SceneControllerFindAllSceneShotsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SceneShotsListDto,
    SceneControllerFindAllSceneShotsError,
    undefined,
    {},
    SceneControllerFindAllSceneShotsQueryParams,
    SceneControllerFindAllSceneShotsPathParams
  >({
    url: '/storyboard/scenes/{sceneId}/shots',
    method: 'get',
    ...variables,
    signal,
  })

export const useSceneControllerFindAllSceneShots = <TData = Schemas.SceneShotsListDto>(
  variables: SceneControllerFindAllSceneShotsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SceneShotsListDto, SceneControllerFindAllSceneShotsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SceneShotsListDto, SceneControllerFindAllSceneShotsError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/scenes/{sceneId}/shots',
      operationId: 'sceneControllerFindAllSceneShots',
      variables,
    }),
    queryFn: ({ signal }) => fetchSceneControllerFindAllSceneShots({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SceneControllerReOrderSceneShotPathParams = {
  sceneId: string
}

export type SceneControllerReOrderSceneShotError = Fetcher.ErrorWrapper<undefined>

export type SceneControllerReOrderSceneShotVariables = {
  body: Schemas.ReOrderSceneShotDto
  pathParams: SceneControllerReOrderSceneShotPathParams
} & ApiContext['fetcherOptions']

export const fetchSceneControllerReOrderSceneShot = (
  variables: SceneControllerReOrderSceneShotVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ReOrderSceneShotDto,
    SceneControllerReOrderSceneShotError,
    Schemas.ReOrderSceneShotDto,
    {},
    {},
    SceneControllerReOrderSceneShotPathParams
  >({
    url: '/storyboard/scenes/{sceneId}/shots/re-order',
    method: 'patch',
    ...variables,
    signal,
  })

export const useSceneControllerReOrderSceneShot = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReOrderSceneShotDto,
      SceneControllerReOrderSceneShotError,
      SceneControllerReOrderSceneShotVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.ReOrderSceneShotDto,
    SceneControllerReOrderSceneShotError,
    SceneControllerReOrderSceneShotVariables
  >({
    mutationFn: (variables: SceneControllerReOrderSceneShotVariables) =>
      fetchSceneControllerReOrderSceneShot({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SceneControllerGenerateFinalVideoPathParams = {
  sceneId: string
}

export type SceneControllerGenerateFinalVideoError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type SceneControllerGenerateFinalVideoVariables = {
  pathParams: SceneControllerGenerateFinalVideoPathParams
} & ApiContext['fetcherOptions']

export const fetchSceneControllerGenerateFinalVideo = (
  variables: SceneControllerGenerateFinalVideoVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    SceneControllerGenerateFinalVideoError,
    undefined,
    {},
    {},
    SceneControllerGenerateFinalVideoPathParams
  >({
    url: '/storyboard/scenes/{sceneId}/generate-final-video',
    method: 'post',
    ...variables,
    signal,
  })

export const useSceneControllerGenerateFinalVideo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SceneControllerGenerateFinalVideoError,
      SceneControllerGenerateFinalVideoVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    SceneControllerGenerateFinalVideoError,
    SceneControllerGenerateFinalVideoVariables
  >({
    mutationFn: (variables: SceneControllerGenerateFinalVideoVariables) =>
      fetchSceneControllerGenerateFinalVideo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type EpisodeControllerFindAllEpisodesQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type EpisodeControllerFindAllEpisodesError = Fetcher.ErrorWrapper<undefined>

export type EpisodeControllerFindAllEpisodesVariables = {
  queryParams: EpisodeControllerFindAllEpisodesQueryParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerFindAllEpisodes = (
  variables: EpisodeControllerFindAllEpisodesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EpisodeListDto,
    EpisodeControllerFindAllEpisodesError,
    undefined,
    {},
    EpisodeControllerFindAllEpisodesQueryParams,
    {}
  >({ url: '/storyboard/episodes', method: 'get', ...variables, signal })

export const useEpisodeControllerFindAllEpisodes = <TData = Schemas.EpisodeListDto>(
  variables: EpisodeControllerFindAllEpisodesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.EpisodeListDto, EpisodeControllerFindAllEpisodesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.EpisodeListDto, EpisodeControllerFindAllEpisodesError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/episodes',
      operationId: 'episodeControllerFindAllEpisodes',
      variables,
    }),
    queryFn: ({ signal }) => fetchEpisodeControllerFindAllEpisodes({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type EpisodeControllerCreateEpisodeError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerCreateEpisodeVariables = {
  body: Schemas.CreateEpisodeDto
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerCreateEpisode = (
  variables: EpisodeControllerCreateEpisodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.EpisodeDto, EpisodeControllerCreateEpisodeError, Schemas.CreateEpisodeDto, {}, {}, {}>({
    url: '/storyboard/episodes',
    method: 'post',
    ...variables,
    signal,
  })

export const useEpisodeControllerCreateEpisode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EpisodeDto,
      EpisodeControllerCreateEpisodeError,
      EpisodeControllerCreateEpisodeVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.EpisodeDto,
    EpisodeControllerCreateEpisodeError,
    EpisodeControllerCreateEpisodeVariables
  >({
    mutationFn: (variables: EpisodeControllerCreateEpisodeVariables) =>
      fetchEpisodeControllerCreateEpisode({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type EpisodeControllerFindAllEpisodeSuggestionsPathParams = {
  episodeId: string
}

export type EpisodeControllerFindAllEpisodeSuggestionsQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type EpisodeControllerFindAllEpisodeSuggestionsError = Fetcher.ErrorWrapper<undefined>

export type EpisodeControllerFindAllEpisodeSuggestionsVariables = {
  pathParams: EpisodeControllerFindAllEpisodeSuggestionsPathParams
  queryParams: EpisodeControllerFindAllEpisodeSuggestionsQueryParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerFindAllEpisodeSuggestions = (
  variables: EpisodeControllerFindAllEpisodeSuggestionsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EpisodeSuggestionListDto,
    EpisodeControllerFindAllEpisodeSuggestionsError,
    undefined,
    {},
    EpisodeControllerFindAllEpisodeSuggestionsQueryParams,
    EpisodeControllerFindAllEpisodeSuggestionsPathParams
  >({
    url: '/storyboard/episodes/suggestions/epi/{episodeId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useEpisodeControllerFindAllEpisodeSuggestions = <TData = Schemas.EpisodeSuggestionListDto>(
  variables: EpisodeControllerFindAllEpisodeSuggestionsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.EpisodeSuggestionListDto,
      EpisodeControllerFindAllEpisodeSuggestionsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.EpisodeSuggestionListDto, EpisodeControllerFindAllEpisodeSuggestionsError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/episodes/suggestions/epi/{episodeId}',
      operationId: 'episodeControllerFindAllEpisodeSuggestions',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchEpisodeControllerFindAllEpisodeSuggestions({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type EpisodeControllerFindOneEpisodePathParams = {
  id: string
}

export type EpisodeControllerFindOneEpisodeError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerFindOneEpisodeVariables = {
  pathParams: EpisodeControllerFindOneEpisodePathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerFindOneEpisode = (
  variables: EpisodeControllerFindOneEpisodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EpisodeDto,
    EpisodeControllerFindOneEpisodeError,
    undefined,
    {},
    {},
    EpisodeControllerFindOneEpisodePathParams
  >({ url: '/storyboard/episodes/{id}', method: 'get', ...variables, signal })

export const useEpisodeControllerFindOneEpisode = <TData = Schemas.EpisodeDto>(
  variables: EpisodeControllerFindOneEpisodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.EpisodeDto, EpisodeControllerFindOneEpisodeError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.EpisodeDto, EpisodeControllerFindOneEpisodeError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/episodes/{id}',
      operationId: 'episodeControllerFindOneEpisode',
      variables,
    }),
    queryFn: ({ signal }) => fetchEpisodeControllerFindOneEpisode({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type EpisodeControllerUpdateEpisodePathParams = {
  id: string
}

export type EpisodeControllerUpdateEpisodeError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerUpdateEpisodeVariables = {
  body?: Schemas.UpdateEpisodeDto
  pathParams: EpisodeControllerUpdateEpisodePathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerUpdateEpisode = (
  variables: EpisodeControllerUpdateEpisodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EpisodeDto,
    EpisodeControllerUpdateEpisodeError,
    Schemas.UpdateEpisodeDto,
    {},
    {},
    EpisodeControllerUpdateEpisodePathParams
  >({
    url: '/storyboard/episodes/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useEpisodeControllerUpdateEpisode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EpisodeDto,
      EpisodeControllerUpdateEpisodeError,
      EpisodeControllerUpdateEpisodeVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.EpisodeDto,
    EpisodeControllerUpdateEpisodeError,
    EpisodeControllerUpdateEpisodeVariables
  >({
    mutationFn: (variables: EpisodeControllerUpdateEpisodeVariables) =>
      fetchEpisodeControllerUpdateEpisode({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type EpisodeControllerDeleteEpisodePathParams = {
  id: string
}

export type EpisodeControllerDeleteEpisodeError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerDeleteEpisodeVariables = {
  pathParams: EpisodeControllerDeleteEpisodePathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerDeleteEpisode = (
  variables: EpisodeControllerDeleteEpisodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, EpisodeControllerDeleteEpisodeError, undefined, {}, {}, EpisodeControllerDeleteEpisodePathParams>(
    {
      url: '/storyboard/episodes/{id}',
      method: 'delete',
      ...variables,
      signal,
    },
  )

export const useEpisodeControllerDeleteEpisode = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EpisodeControllerDeleteEpisodeError,
      EpisodeControllerDeleteEpisodeVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    EpisodeControllerDeleteEpisodeError,
    EpisodeControllerDeleteEpisodeVariables
  >({
    mutationFn: (variables: EpisodeControllerDeleteEpisodeVariables) =>
      fetchEpisodeControllerDeleteEpisode({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type EpisodeControllerFindOneEpisodeSuggestionPathParams = {
  id: string
}

export type EpisodeControllerFindOneEpisodeSuggestionError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerFindOneEpisodeSuggestionVariables = {
  pathParams: EpisodeControllerFindOneEpisodeSuggestionPathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerFindOneEpisodeSuggestion = (
  variables: EpisodeControllerFindOneEpisodeSuggestionVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EpisodeSuggestionDto,
    EpisodeControllerFindOneEpisodeSuggestionError,
    undefined,
    {},
    {},
    EpisodeControllerFindOneEpisodeSuggestionPathParams
  >({
    url: '/storyboard/episodes/suggestions/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useEpisodeControllerFindOneEpisodeSuggestion = <TData = Schemas.EpisodeSuggestionDto>(
  variables: EpisodeControllerFindOneEpisodeSuggestionVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.EpisodeSuggestionDto, EpisodeControllerFindOneEpisodeSuggestionError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.EpisodeSuggestionDto, EpisodeControllerFindOneEpisodeSuggestionError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/episodes/suggestions/{id}',
      operationId: 'episodeControllerFindOneEpisodeSuggestion',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchEpisodeControllerFindOneEpisodeSuggestion({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type EpisodeControllerUpdateEpisodeSuggestionPathParams = {
  id: string
}

export type EpisodeControllerUpdateEpisodeSuggestionError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerUpdateEpisodeSuggestionVariables = {
  body?: Schemas.EpisodeSuggestionUpdateDto
  pathParams: EpisodeControllerUpdateEpisodeSuggestionPathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerUpdateEpisodeSuggestion = (
  variables: EpisodeControllerUpdateEpisodeSuggestionVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EpisodeSuggestionDto,
    EpisodeControllerUpdateEpisodeSuggestionError,
    Schemas.EpisodeSuggestionUpdateDto,
    {},
    {},
    EpisodeControllerUpdateEpisodeSuggestionPathParams
  >({
    url: '/storyboard/episodes/suggestions/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useEpisodeControllerUpdateEpisodeSuggestion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EpisodeSuggestionDto,
      EpisodeControllerUpdateEpisodeSuggestionError,
      EpisodeControllerUpdateEpisodeSuggestionVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.EpisodeSuggestionDto,
    EpisodeControllerUpdateEpisodeSuggestionError,
    EpisodeControllerUpdateEpisodeSuggestionVariables
  >({
    mutationFn: (variables: EpisodeControllerUpdateEpisodeSuggestionVariables) =>
      fetchEpisodeControllerUpdateEpisodeSuggestion({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type EpisodeControllerAcceptEpisodeSuggestionPathParams = {
  id: string
}

export type EpisodeControllerAcceptEpisodeSuggestionError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerAcceptEpisodeSuggestionVariables = {
  pathParams: EpisodeControllerAcceptEpisodeSuggestionPathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerAcceptEpisodeSuggestion = (
  variables: EpisodeControllerAcceptEpisodeSuggestionVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EpisodeDto,
    EpisodeControllerAcceptEpisodeSuggestionError,
    undefined,
    {},
    {},
    EpisodeControllerAcceptEpisodeSuggestionPathParams
  >({
    url: '/storyboard/episodes/suggestions/accept/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useEpisodeControllerAcceptEpisodeSuggestion = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.EpisodeDto,
      EpisodeControllerAcceptEpisodeSuggestionError,
      EpisodeControllerAcceptEpisodeSuggestionVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.EpisodeDto,
    EpisodeControllerAcceptEpisodeSuggestionError,
    EpisodeControllerAcceptEpisodeSuggestionVariables
  >({
    mutationFn: (variables: EpisodeControllerAcceptEpisodeSuggestionVariables) =>
      fetchEpisodeControllerAcceptEpisodeSuggestion({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type EpisodeControllerGenScriptsPathParams = {
  id: string
}

export type EpisodeControllerGenScriptsError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type EpisodeControllerGenScriptsVariables = {
  body?: Schemas.EpisodeGenScriptDto
  pathParams: EpisodeControllerGenScriptsPathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerGenScripts = (
  variables: EpisodeControllerGenScriptsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    string,
    EpisodeControllerGenScriptsError,
    Schemas.EpisodeGenScriptDto,
    {},
    {},
    EpisodeControllerGenScriptsPathParams
  >({
    url: '/storyboard/episodes/gen-script/{id}',
    method: 'post',
    ...variables,
    signal,
  })

export const useEpisodeControllerGenScripts = (
  options?: Omit<
    reactQuery.UseMutationOptions<string, EpisodeControllerGenScriptsError, EpisodeControllerGenScriptsVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<string, EpisodeControllerGenScriptsError, EpisodeControllerGenScriptsVariables>({
    mutationFn: (variables: EpisodeControllerGenScriptsVariables) =>
      fetchEpisodeControllerGenScripts({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type EpisodeControllerGetScriptTemplatePathParams = {
  id: string
}

export type EpisodeControllerGetScriptTemplateError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type EpisodeControllerGetScriptTemplateVariables = {
  pathParams: EpisodeControllerGetScriptTemplatePathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerGetScriptTemplate = (
  variables: EpisodeControllerGetScriptTemplateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    string,
    EpisodeControllerGetScriptTemplateError,
    undefined,
    {},
    {},
    EpisodeControllerGetScriptTemplatePathParams
  >({
    url: '/storyboard/episodes/gen-script-template/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useEpisodeControllerGetScriptTemplate = <TData = string>(
  variables: EpisodeControllerGetScriptTemplateVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<string, EpisodeControllerGetScriptTemplateError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<string, EpisodeControllerGetScriptTemplateError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/episodes/gen-script-template/{id}',
      operationId: 'episodeControllerGetScriptTemplate',
      variables,
    }),
    queryFn: ({ signal }) => fetchEpisodeControllerGetScriptTemplate({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type EpisodeControllerFindAllEpisodeScenesPathParams = {
  episodeId: string
}

export type EpisodeControllerFindAllEpisodeScenesQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type EpisodeControllerFindAllEpisodeScenesError = Fetcher.ErrorWrapper<undefined>

export type EpisodeControllerFindAllEpisodeScenesVariables = {
  pathParams: EpisodeControllerFindAllEpisodeScenesPathParams
  queryParams: EpisodeControllerFindAllEpisodeScenesQueryParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerFindAllEpisodeScenes = (
  variables: EpisodeControllerFindAllEpisodeScenesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.EpisodeScenesListDto,
    EpisodeControllerFindAllEpisodeScenesError,
    undefined,
    {},
    EpisodeControllerFindAllEpisodeScenesQueryParams,
    EpisodeControllerFindAllEpisodeScenesPathParams
  >({
    url: '/storyboard/episodes/{episodeId}/scenes',
    method: 'get',
    ...variables,
    signal,
  })

export const useEpisodeControllerFindAllEpisodeScenes = <TData = Schemas.EpisodeScenesListDto>(
  variables: EpisodeControllerFindAllEpisodeScenesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.EpisodeScenesListDto, EpisodeControllerFindAllEpisodeScenesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.EpisodeScenesListDto, EpisodeControllerFindAllEpisodeScenesError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/episodes/{episodeId}/scenes',
      operationId: 'episodeControllerFindAllEpisodeScenes',
      variables,
    }),
    queryFn: ({ signal }) => fetchEpisodeControllerFindAllEpisodeScenes({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type EpisodeControllerReOrderEpisodeScenesPathParams = {
  episodeId: string
}

export type EpisodeControllerReOrderEpisodeScenesError = Fetcher.ErrorWrapper<undefined>

export type EpisodeControllerReOrderEpisodeScenesVariables = {
  body: Schemas.ReOrderEpisodeSceneDto
  pathParams: EpisodeControllerReOrderEpisodeScenesPathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerReOrderEpisodeScenes = (
  variables: EpisodeControllerReOrderEpisodeScenesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ReOrderEpisodeSceneDto,
    EpisodeControllerReOrderEpisodeScenesError,
    Schemas.ReOrderEpisodeSceneDto,
    {},
    {},
    EpisodeControllerReOrderEpisodeScenesPathParams
  >({
    url: '/storyboard/episodes/{episodeId}/scenes/re-order',
    method: 'patch',
    ...variables,
    signal,
  })

export const useEpisodeControllerReOrderEpisodeScenes = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReOrderEpisodeSceneDto,
      EpisodeControllerReOrderEpisodeScenesError,
      EpisodeControllerReOrderEpisodeScenesVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.ReOrderEpisodeSceneDto,
    EpisodeControllerReOrderEpisodeScenesError,
    EpisodeControllerReOrderEpisodeScenesVariables
  >({
    mutationFn: (variables: EpisodeControllerReOrderEpisodeScenesVariables) =>
      fetchEpisodeControllerReOrderEpisodeScenes({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type EpisodeControllerGenerateScriptPDFPathParams = {
  episodeId: string
}

export type EpisodeControllerGenerateScriptPDFError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerGenerateScriptPDFVariables = {
  pathParams: EpisodeControllerGenerateScriptPDFPathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerGenerateScriptPDF = (
  variables: EpisodeControllerGenerateScriptPDFVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    EpisodeControllerGenerateScriptPDFError,
    undefined,
    {},
    {},
    EpisodeControllerGenerateScriptPDFPathParams
  >({
    url: '/storyboard/episodes/{episodeId}/generate-script-pdf',
    method: 'post',
    ...variables,
    signal,
  })

export const useEpisodeControllerGenerateScriptPDF = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EpisodeControllerGenerateScriptPDFError,
      EpisodeControllerGenerateScriptPDFVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    EpisodeControllerGenerateScriptPDFError,
    EpisodeControllerGenerateScriptPDFVariables
  >({
    mutationFn: (variables: EpisodeControllerGenerateScriptPDFVariables) =>
      fetchEpisodeControllerGenerateScriptPDF({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type EpisodeControllerGenerateScriptPathParams = {
  episodeId: string
}

export type EpisodeControllerGenerateScriptError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerGenerateScriptVariables = {
  pathParams: EpisodeControllerGenerateScriptPathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerGenerateScript = (
  variables: EpisodeControllerGenerateScriptVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GenerateEpisodeScript,
    EpisodeControllerGenerateScriptError,
    undefined,
    {},
    {},
    EpisodeControllerGenerateScriptPathParams
  >({
    url: '/storyboard/episodes/{episodeId}/generate-script',
    method: 'get',
    ...variables,
    signal,
  })

export const useEpisodeControllerGenerateScript = <TData = Schemas.GenerateEpisodeScript>(
  variables: EpisodeControllerGenerateScriptVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GenerateEpisodeScript, EpisodeControllerGenerateScriptError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.GenerateEpisodeScript, EpisodeControllerGenerateScriptError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/episodes/{episodeId}/generate-script',
      operationId: 'episodeControllerGenerateScript',
      variables,
    }),
    queryFn: ({ signal }) => fetchEpisodeControllerGenerateScript({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type EpisodeControllerGetSuggestionStatsPathParams = {
  episodeId: string
}

export type EpisodeControllerGetSuggestionStatsError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type EpisodeControllerGetSuggestionStatsResponse = Schemas.EpisodeSuggestionStatsDto[]

export type EpisodeControllerGetSuggestionStatsVariables = {
  pathParams: EpisodeControllerGetSuggestionStatsPathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerGetSuggestionStats = (
  variables: EpisodeControllerGetSuggestionStatsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    EpisodeControllerGetSuggestionStatsResponse,
    EpisodeControllerGetSuggestionStatsError,
    undefined,
    {},
    {},
    EpisodeControllerGetSuggestionStatsPathParams
  >({
    url: '/storyboard/episodes/{episodeId}/suggestion-stats',
    method: 'get',
    ...variables,
    signal,
  })

export const useEpisodeControllerGetSuggestionStats = <TData = EpisodeControllerGetSuggestionStatsResponse>(
  variables: EpisodeControllerGetSuggestionStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      EpisodeControllerGetSuggestionStatsResponse,
      EpisodeControllerGetSuggestionStatsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    EpisodeControllerGetSuggestionStatsResponse,
    EpisodeControllerGetSuggestionStatsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/storyboard/episodes/{episodeId}/suggestion-stats',
      operationId: 'episodeControllerGetSuggestionStats',
      variables,
    }),
    queryFn: ({ signal }) => fetchEpisodeControllerGetSuggestionStats({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type EpisodeControllerGenerateFinalVideoPathParams = {
  episodeId: string
}

export type EpisodeControllerGenerateFinalVideoError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type EpisodeControllerGenerateFinalVideoVariables = {
  pathParams: EpisodeControllerGenerateFinalVideoPathParams
} & ApiContext['fetcherOptions']

export const fetchEpisodeControllerGenerateFinalVideo = (
  variables: EpisodeControllerGenerateFinalVideoVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    EpisodeControllerGenerateFinalVideoError,
    undefined,
    {},
    {},
    EpisodeControllerGenerateFinalVideoPathParams
  >({
    url: '/storyboard/episodes/{episodeId}/generate-final-video',
    method: 'post',
    ...variables,
    signal,
  })

export const useEpisodeControllerGenerateFinalVideo = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      EpisodeControllerGenerateFinalVideoError,
      EpisodeControllerGenerateFinalVideoVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    EpisodeControllerGenerateFinalVideoError,
    EpisodeControllerGenerateFinalVideoVariables
  >({
    mutationFn: (variables: EpisodeControllerGenerateFinalVideoVariables) =>
      fetchEpisodeControllerGenerateFinalVideo({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type SeasonControllerFindAllSeasonsQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type SeasonControllerFindAllSeasonsError = Fetcher.ErrorWrapper<undefined>

export type SeasonControllerFindAllSeasonsVariables = {
  queryParams: SeasonControllerFindAllSeasonsQueryParams
} & ApiContext['fetcherOptions']

export const fetchSeasonControllerFindAllSeasons = (
  variables: SeasonControllerFindAllSeasonsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeasonListDto,
    SeasonControllerFindAllSeasonsError,
    undefined,
    {},
    SeasonControllerFindAllSeasonsQueryParams,
    {}
  >({ url: '/storyboard/seasons', method: 'get', ...variables, signal })

export const useSeasonControllerFindAllSeasons = <TData = Schemas.SeasonListDto>(
  variables: SeasonControllerFindAllSeasonsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SeasonListDto, SeasonControllerFindAllSeasonsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SeasonListDto, SeasonControllerFindAllSeasonsError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/seasons',
      operationId: 'seasonControllerFindAllSeasons',
      variables,
    }),
    queryFn: ({ signal }) => fetchSeasonControllerFindAllSeasons({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SeasonControllerCreateSeasonError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type SeasonControllerCreateSeasonVariables = {
  body: Schemas.CreateSeasonDto
} & ApiContext['fetcherOptions']

export const fetchSeasonControllerCreateSeason = (
  variables: SeasonControllerCreateSeasonVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.SeasonDto, SeasonControllerCreateSeasonError, Schemas.CreateSeasonDto, {}, {}, {}>({
    url: '/storyboard/seasons',
    method: 'post',
    ...variables,
    signal,
  })

export const useSeasonControllerCreateSeason = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SeasonDto,
      SeasonControllerCreateSeasonError,
      SeasonControllerCreateSeasonVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.SeasonDto,
    SeasonControllerCreateSeasonError,
    SeasonControllerCreateSeasonVariables
  >({
    mutationFn: (variables: SeasonControllerCreateSeasonVariables) =>
      fetchSeasonControllerCreateSeason({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SeasonControllerFindOneSeasonPathParams = {
  id: string
}

export type SeasonControllerFindOneSeasonError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SeasonControllerFindOneSeasonVariables = {
  pathParams: SeasonControllerFindOneSeasonPathParams
} & ApiContext['fetcherOptions']

export const fetchSeasonControllerFindOneSeason = (
  variables: SeasonControllerFindOneSeasonVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeasonDto,
    SeasonControllerFindOneSeasonError,
    undefined,
    {},
    {},
    SeasonControllerFindOneSeasonPathParams
  >({ url: '/storyboard/seasons/{id}', method: 'get', ...variables, signal })

export const useSeasonControllerFindOneSeason = <TData = Schemas.SeasonDto>(
  variables: SeasonControllerFindOneSeasonVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SeasonDto, SeasonControllerFindOneSeasonError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SeasonDto, SeasonControllerFindOneSeasonError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/seasons/{id}',
      operationId: 'seasonControllerFindOneSeason',
      variables,
    }),
    queryFn: ({ signal }) => fetchSeasonControllerFindOneSeason({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SeasonControllerUpdateSeasonPathParams = {
  id: string
}

export type SeasonControllerUpdateSeasonError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SeasonControllerUpdateSeasonVariables = {
  body?: Schemas.UpdateSeasonDto
  pathParams: SeasonControllerUpdateSeasonPathParams
} & ApiContext['fetcherOptions']

export const fetchSeasonControllerUpdateSeason = (
  variables: SeasonControllerUpdateSeasonVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeasonDto,
    SeasonControllerUpdateSeasonError,
    Schemas.UpdateSeasonDto,
    {},
    {},
    SeasonControllerUpdateSeasonPathParams
  >({ url: '/storyboard/seasons/{id}', method: 'patch', ...variables, signal })

export const useSeasonControllerUpdateSeason = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SeasonDto,
      SeasonControllerUpdateSeasonError,
      SeasonControllerUpdateSeasonVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.SeasonDto,
    SeasonControllerUpdateSeasonError,
    SeasonControllerUpdateSeasonVariables
  >({
    mutationFn: (variables: SeasonControllerUpdateSeasonVariables) =>
      fetchSeasonControllerUpdateSeason({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SeasonControllerDeleteSeasonPathParams = {
  id: string
}

export type SeasonControllerDeleteSeasonError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SeasonControllerDeleteSeasonVariables = {
  pathParams: SeasonControllerDeleteSeasonPathParams
} & ApiContext['fetcherOptions']

export const fetchSeasonControllerDeleteSeason = (
  variables: SeasonControllerDeleteSeasonVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, SeasonControllerDeleteSeasonError, undefined, {}, {}, SeasonControllerDeleteSeasonPathParams>({
    url: '/storyboard/seasons/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useSeasonControllerDeleteSeason = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, SeasonControllerDeleteSeasonError, SeasonControllerDeleteSeasonVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, SeasonControllerDeleteSeasonError, SeasonControllerDeleteSeasonVariables>({
    mutationFn: (variables: SeasonControllerDeleteSeasonVariables) =>
      fetchSeasonControllerDeleteSeason({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SeasonControllerFindAllSeasonEpisodesPathParams = {
  seasonId: string
}

export type SeasonControllerFindAllSeasonEpisodesQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type SeasonControllerFindAllSeasonEpisodesError = Fetcher.ErrorWrapper<undefined>

export type SeasonControllerFindAllSeasonEpisodesVariables = {
  pathParams: SeasonControllerFindAllSeasonEpisodesPathParams
  queryParams: SeasonControllerFindAllSeasonEpisodesQueryParams
} & ApiContext['fetcherOptions']

export const fetchSeasonControllerFindAllSeasonEpisodes = (
  variables: SeasonControllerFindAllSeasonEpisodesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeasonEpisodesListDto,
    SeasonControllerFindAllSeasonEpisodesError,
    undefined,
    {},
    SeasonControllerFindAllSeasonEpisodesQueryParams,
    SeasonControllerFindAllSeasonEpisodesPathParams
  >({
    url: '/storyboard/seasons/{seasonId}/series',
    method: 'get',
    ...variables,
    signal,
  })

export const useSeasonControllerFindAllSeasonEpisodes = <TData = Schemas.SeasonEpisodesListDto>(
  variables: SeasonControllerFindAllSeasonEpisodesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SeasonEpisodesListDto, SeasonControllerFindAllSeasonEpisodesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SeasonEpisodesListDto, SeasonControllerFindAllSeasonEpisodesError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/seasons/{seasonId}/series',
      operationId: 'seasonControllerFindAllSeasonEpisodes',
      variables,
    }),
    queryFn: ({ signal }) => fetchSeasonControllerFindAllSeasonEpisodes({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SeasonControllerFindSeasonEpisodesCountPathParams = {
  seasonId: string
}

export type SeasonControllerFindSeasonEpisodesCountError = Fetcher.ErrorWrapper<undefined>

export type SeasonControllerFindSeasonEpisodesCountVariables = {
  pathParams: SeasonControllerFindSeasonEpisodesCountPathParams
} & ApiContext['fetcherOptions']

export const fetchSeasonControllerFindSeasonEpisodesCount = (
  variables: SeasonControllerFindSeasonEpisodesCountVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeasonEpisodesCount,
    SeasonControllerFindSeasonEpisodesCountError,
    undefined,
    {},
    {},
    SeasonControllerFindSeasonEpisodesCountPathParams
  >({
    url: '/storyboard/seasons/{seasonId}/series/count',
    method: 'get',
    ...variables,
    signal,
  })

export const useSeasonControllerFindSeasonEpisodesCount = <TData = Schemas.SeasonEpisodesCount>(
  variables: SeasonControllerFindSeasonEpisodesCountVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SeasonEpisodesCount, SeasonControllerFindSeasonEpisodesCountError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SeasonEpisodesCount, SeasonControllerFindSeasonEpisodesCountError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/seasons/{seasonId}/series/count',
      operationId: 'seasonControllerFindSeasonEpisodesCount',
      variables,
    }),
    queryFn: ({ signal }) => fetchSeasonControllerFindSeasonEpisodesCount({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SeriesControllerFindAllSeriesQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type SeriesControllerFindAllSeriesError = Fetcher.ErrorWrapper<undefined>

export type SeriesControllerFindAllSeriesVariables = {
  queryParams: SeriesControllerFindAllSeriesQueryParams
} & ApiContext['fetcherOptions']

export const fetchSeriesControllerFindAllSeries = (
  variables: SeriesControllerFindAllSeriesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeriesListDto,
    SeriesControllerFindAllSeriesError,
    undefined,
    {},
    SeriesControllerFindAllSeriesQueryParams,
    {}
  >({ url: '/storyboard/series', method: 'get', ...variables, signal })

export const useSeriesControllerFindAllSeries = <TData = Schemas.SeriesListDto>(
  variables: SeriesControllerFindAllSeriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SeriesListDto, SeriesControllerFindAllSeriesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SeriesListDto, SeriesControllerFindAllSeriesError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/series',
      operationId: 'seriesControllerFindAllSeries',
      variables,
    }),
    queryFn: ({ signal }) => fetchSeriesControllerFindAllSeries({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SeriesControllerCreateSeriesError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type SeriesControllerCreateSeriesVariables = {
  body: Schemas.CreateSeriesDto
} & ApiContext['fetcherOptions']

export const fetchSeriesControllerCreateSeries = (
  variables: SeriesControllerCreateSeriesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.SeriesDto, SeriesControllerCreateSeriesError, Schemas.CreateSeriesDto, {}, {}, {}>({
    url: '/storyboard/series',
    method: 'post',
    ...variables,
    signal,
  })

export const useSeriesControllerCreateSeries = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SeriesDto,
      SeriesControllerCreateSeriesError,
      SeriesControllerCreateSeriesVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.SeriesDto,
    SeriesControllerCreateSeriesError,
    SeriesControllerCreateSeriesVariables
  >({
    mutationFn: (variables: SeriesControllerCreateSeriesVariables) =>
      fetchSeriesControllerCreateSeries({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SeriesControllerFindOneSeriesPathParams = {
  id: string
}

export type SeriesControllerFindOneSeriesError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SeriesControllerFindOneSeriesVariables = {
  pathParams: SeriesControllerFindOneSeriesPathParams
} & ApiContext['fetcherOptions']

export const fetchSeriesControllerFindOneSeries = (
  variables: SeriesControllerFindOneSeriesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeriesDto,
    SeriesControllerFindOneSeriesError,
    undefined,
    {},
    {},
    SeriesControllerFindOneSeriesPathParams
  >({ url: '/storyboard/series/{id}', method: 'get', ...variables, signal })

export const useSeriesControllerFindOneSeries = <TData = Schemas.SeriesDto>(
  variables: SeriesControllerFindOneSeriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SeriesDto, SeriesControllerFindOneSeriesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SeriesDto, SeriesControllerFindOneSeriesError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/series/{id}',
      operationId: 'seriesControllerFindOneSeries',
      variables,
    }),
    queryFn: ({ signal }) => fetchSeriesControllerFindOneSeries({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SeriesControllerUpdateSeriesPathParams = {
  id: string
}

export type SeriesControllerUpdateSeriesError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SeriesControllerUpdateSeriesVariables = {
  body?: Schemas.UpdateSeriesDto
  pathParams: SeriesControllerUpdateSeriesPathParams
} & ApiContext['fetcherOptions']

export const fetchSeriesControllerUpdateSeries = (
  variables: SeriesControllerUpdateSeriesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeriesDto,
    SeriesControllerUpdateSeriesError,
    Schemas.UpdateSeriesDto,
    {},
    {},
    SeriesControllerUpdateSeriesPathParams
  >({ url: '/storyboard/series/{id}', method: 'patch', ...variables, signal })

export const useSeriesControllerUpdateSeries = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SeriesDto,
      SeriesControllerUpdateSeriesError,
      SeriesControllerUpdateSeriesVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.SeriesDto,
    SeriesControllerUpdateSeriesError,
    SeriesControllerUpdateSeriesVariables
  >({
    mutationFn: (variables: SeriesControllerUpdateSeriesVariables) =>
      fetchSeriesControllerUpdateSeries({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SeriesControllerDeleteSeriesPathParams = {
  id: string
}

export type SeriesControllerDeleteSeriesError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SeriesControllerDeleteSeriesVariables = {
  pathParams: SeriesControllerDeleteSeriesPathParams
} & ApiContext['fetcherOptions']

export const fetchSeriesControllerDeleteSeries = (
  variables: SeriesControllerDeleteSeriesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, SeriesControllerDeleteSeriesError, undefined, {}, {}, SeriesControllerDeleteSeriesPathParams>({
    url: '/storyboard/series/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useSeriesControllerDeleteSeries = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, SeriesControllerDeleteSeriesError, SeriesControllerDeleteSeriesVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, SeriesControllerDeleteSeriesError, SeriesControllerDeleteSeriesVariables>({
    mutationFn: (variables: SeriesControllerDeleteSeriesVariables) =>
      fetchSeriesControllerDeleteSeries({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SeriesControllerFindAllSeriesSeasonsPathParams = {
  seriesId: string
}

export type SeriesControllerFindAllSeriesSeasonsQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type SeriesControllerFindAllSeriesSeasonsError = Fetcher.ErrorWrapper<undefined>

export type SeriesControllerFindAllSeriesSeasonsVariables = {
  pathParams: SeriesControllerFindAllSeriesSeasonsPathParams
  queryParams: SeriesControllerFindAllSeriesSeasonsQueryParams
} & ApiContext['fetcherOptions']

export const fetchSeriesControllerFindAllSeriesSeasons = (
  variables: SeriesControllerFindAllSeriesSeasonsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeriesSeasonsListDto,
    SeriesControllerFindAllSeriesSeasonsError,
    undefined,
    {},
    SeriesControllerFindAllSeriesSeasonsQueryParams,
    SeriesControllerFindAllSeriesSeasonsPathParams
  >({
    url: '/storyboard/series/{seriesId}/seasons',
    method: 'get',
    ...variables,
    signal,
  })

export const useSeriesControllerFindAllSeriesSeasons = <TData = Schemas.SeriesSeasonsListDto>(
  variables: SeriesControllerFindAllSeriesSeasonsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SeriesSeasonsListDto, SeriesControllerFindAllSeriesSeasonsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SeriesSeasonsListDto, SeriesControllerFindAllSeriesSeasonsError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/series/{seriesId}/seasons',
      operationId: 'seriesControllerFindAllSeriesSeasons',
      variables,
    }),
    queryFn: ({ signal }) => fetchSeriesControllerFindAllSeriesSeasons({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SeriesControllerFindAllSeriesGenresPathParams = {
  seriesId: string
}

export type SeriesControllerFindAllSeriesGenresQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type SeriesControllerFindAllSeriesGenresError = Fetcher.ErrorWrapper<undefined>

export type SeriesControllerFindAllSeriesGenresVariables = {
  pathParams: SeriesControllerFindAllSeriesGenresPathParams
  queryParams: SeriesControllerFindAllSeriesGenresQueryParams
} & ApiContext['fetcherOptions']

export const fetchSeriesControllerFindAllSeriesGenres = (
  variables: SeriesControllerFindAllSeriesGenresVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SeriesGenresListDto,
    SeriesControllerFindAllSeriesGenresError,
    undefined,
    {},
    SeriesControllerFindAllSeriesGenresQueryParams,
    SeriesControllerFindAllSeriesGenresPathParams
  >({
    url: '/storyboard/series/{seriesId}/genres',
    method: 'get',
    ...variables,
    signal,
  })

export const useSeriesControllerFindAllSeriesGenres = <TData = Schemas.SeriesGenresListDto>(
  variables: SeriesControllerFindAllSeriesGenresVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SeriesGenresListDto, SeriesControllerFindAllSeriesGenresError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SeriesGenresListDto, SeriesControllerFindAllSeriesGenresError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/series/{seriesId}/genres',
      operationId: 'seriesControllerFindAllSeriesGenres',
      variables,
    }),
    queryFn: ({ signal }) => fetchSeriesControllerFindAllSeriesGenres({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ProjectControllerFindAllProjectsQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type ProjectControllerFindAllProjectsError = Fetcher.ErrorWrapper<undefined>

export type ProjectControllerFindAllProjectsVariables = {
  queryParams: ProjectControllerFindAllProjectsQueryParams
} & ApiContext['fetcherOptions']

export const fetchProjectControllerFindAllProjects = (
  variables: ProjectControllerFindAllProjectsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ProjectListDto,
    ProjectControllerFindAllProjectsError,
    undefined,
    {},
    ProjectControllerFindAllProjectsQueryParams,
    {}
  >({ url: '/storyboard/projects', method: 'get', ...variables, signal })

export const useProjectControllerFindAllProjects = <TData = Schemas.ProjectListDto>(
  variables: ProjectControllerFindAllProjectsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProjectListDto, ProjectControllerFindAllProjectsError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ProjectListDto, ProjectControllerFindAllProjectsError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/projects',
      operationId: 'projectControllerFindAllProjects',
      variables,
    }),
    queryFn: ({ signal }) => fetchProjectControllerFindAllProjects({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ProjectControllerCreateProjectError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type ProjectControllerCreateProjectVariables = {
  body: Schemas.CreateProjectDto
} & ApiContext['fetcherOptions']

export const fetchProjectControllerCreateProject = (
  variables: ProjectControllerCreateProjectVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.ProjectDto, ProjectControllerCreateProjectError, Schemas.CreateProjectDto, {}, {}, {}>({
    url: '/storyboard/projects',
    method: 'post',
    ...variables,
    signal,
  })

export const useProjectControllerCreateProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectDto,
      ProjectControllerCreateProjectError,
      ProjectControllerCreateProjectVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.ProjectDto,
    ProjectControllerCreateProjectError,
    ProjectControllerCreateProjectVariables
  >({
    mutationFn: (variables: ProjectControllerCreateProjectVariables) =>
      fetchProjectControllerCreateProject({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ProjectControllerFindOneProjectPathParams = {
  id: string
}

export type ProjectControllerFindOneProjectQueryParams = {
  relations?: Schemas.ProjectRelationsDto
}

export type ProjectControllerFindOneProjectError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ProjectControllerFindOneProjectVariables = {
  pathParams: ProjectControllerFindOneProjectPathParams
  queryParams?: ProjectControllerFindOneProjectQueryParams
} & ApiContext['fetcherOptions']

export const fetchProjectControllerFindOneProject = (
  variables: ProjectControllerFindOneProjectVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ProjectDto,
    ProjectControllerFindOneProjectError,
    undefined,
    {},
    ProjectControllerFindOneProjectQueryParams,
    ProjectControllerFindOneProjectPathParams
  >({ url: '/storyboard/projects/{id}', method: 'get', ...variables, signal })

export const useProjectControllerFindOneProject = <TData = Schemas.ProjectDto>(
  variables: ProjectControllerFindOneProjectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProjectDto, ProjectControllerFindOneProjectError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ProjectDto, ProjectControllerFindOneProjectError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/projects/{id}',
      operationId: 'projectControllerFindOneProject',
      variables,
    }),
    queryFn: ({ signal }) => fetchProjectControllerFindOneProject({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ProjectControllerUpdateProjectPathParams = {
  id: string
}

export type ProjectControllerUpdateProjectError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ProjectControllerUpdateProjectVariables = {
  body?: Schemas.UpdateProjectDto
  pathParams: ProjectControllerUpdateProjectPathParams
} & ApiContext['fetcherOptions']

export const fetchProjectControllerUpdateProject = (
  variables: ProjectControllerUpdateProjectVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ProjectDto,
    ProjectControllerUpdateProjectError,
    Schemas.UpdateProjectDto,
    {},
    {},
    ProjectControllerUpdateProjectPathParams
  >({
    url: '/storyboard/projects/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useProjectControllerUpdateProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ProjectDto,
      ProjectControllerUpdateProjectError,
      ProjectControllerUpdateProjectVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.ProjectDto,
    ProjectControllerUpdateProjectError,
    ProjectControllerUpdateProjectVariables
  >({
    mutationFn: (variables: ProjectControllerUpdateProjectVariables) =>
      fetchProjectControllerUpdateProject({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ProjectControllerDeleteProjectPathParams = {
  id: string
}

export type ProjectControllerDeleteProjectError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ProjectControllerDeleteProjectVariables = {
  pathParams: ProjectControllerDeleteProjectPathParams
} & ApiContext['fetcherOptions']

export const fetchProjectControllerDeleteProject = (
  variables: ProjectControllerDeleteProjectVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, ProjectControllerDeleteProjectError, undefined, {}, {}, ProjectControllerDeleteProjectPathParams>(
    {
      url: '/storyboard/projects/{id}',
      method: 'delete',
      ...variables,
      signal,
    },
  )

export const useProjectControllerDeleteProject = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ProjectControllerDeleteProjectError,
      ProjectControllerDeleteProjectVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    ProjectControllerDeleteProjectError,
    ProjectControllerDeleteProjectVariables
  >({
    mutationFn: (variables: ProjectControllerDeleteProjectVariables) =>
      fetchProjectControllerDeleteProject({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ProjectControllerFindAllProjectSeriesPathParams = {
  projectId: string
}

export type ProjectControllerFindAllProjectSeriesQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type ProjectControllerFindAllProjectSeriesError = Fetcher.ErrorWrapper<undefined>

export type ProjectControllerFindAllProjectSeriesVariables = {
  pathParams: ProjectControllerFindAllProjectSeriesPathParams
  queryParams: ProjectControllerFindAllProjectSeriesQueryParams
} & ApiContext['fetcherOptions']

export const fetchProjectControllerFindAllProjectSeries = (
  variables: ProjectControllerFindAllProjectSeriesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ProjectSeriesListDto,
    ProjectControllerFindAllProjectSeriesError,
    undefined,
    {},
    ProjectControllerFindAllProjectSeriesQueryParams,
    ProjectControllerFindAllProjectSeriesPathParams
  >({
    url: '/storyboard/projects/{projectId}/series',
    method: 'get',
    ...variables,
    signal,
  })

export const useProjectControllerFindAllProjectSeries = <TData = Schemas.ProjectSeriesListDto>(
  variables: ProjectControllerFindAllProjectSeriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProjectSeriesListDto, ProjectControllerFindAllProjectSeriesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ProjectSeriesListDto, ProjectControllerFindAllProjectSeriesError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/projects/{projectId}/series',
      operationId: 'projectControllerFindAllProjectSeries',
      variables,
    }),
    queryFn: ({ signal }) => fetchProjectControllerFindAllProjectSeries({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ProjectControllerFindAllProjectScenePathParams = {
  projectId: string
}

export type ProjectControllerFindAllProjectSceneQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type ProjectControllerFindAllProjectSceneError = Fetcher.ErrorWrapper<undefined>

export type ProjectControllerFindAllProjectSceneVariables = {
  pathParams: ProjectControllerFindAllProjectScenePathParams
  queryParams: ProjectControllerFindAllProjectSceneQueryParams
} & ApiContext['fetcherOptions']

export const fetchProjectControllerFindAllProjectScene = (
  variables: ProjectControllerFindAllProjectSceneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ProjectSceneListDto,
    ProjectControllerFindAllProjectSceneError,
    undefined,
    {},
    ProjectControllerFindAllProjectSceneQueryParams,
    ProjectControllerFindAllProjectScenePathParams
  >({
    url: '/storyboard/projects/{projectId}/scene',
    method: 'get',
    ...variables,
    signal,
  })

export const useProjectControllerFindAllProjectScene = <TData = Schemas.ProjectSceneListDto>(
  variables: ProjectControllerFindAllProjectSceneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ProjectSceneListDto, ProjectControllerFindAllProjectSceneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ProjectSceneListDto, ProjectControllerFindAllProjectSceneError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/projects/{projectId}/scene',
      operationId: 'projectControllerFindAllProjectScene',
      variables,
    }),
    queryFn: ({ signal }) => fetchProjectControllerFindAllProjectScene({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ProjectControllerFindProjectBreadcrumbPathParams = {
  id: string
}

export type ProjectControllerFindProjectBreadcrumbError = Fetcher.ErrorWrapper<undefined>

export type ProjectControllerFindProjectBreadcrumbVariables = {
  pathParams: ProjectControllerFindProjectBreadcrumbPathParams
} & ApiContext['fetcherOptions']

export const fetchProjectControllerFindProjectBreadcrumb = (
  variables: ProjectControllerFindProjectBreadcrumbVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.BreadcrumbProjectDto,
    ProjectControllerFindProjectBreadcrumbError,
    undefined,
    {},
    {},
    ProjectControllerFindProjectBreadcrumbPathParams
  >({
    url: '/storyboard/projects/{id}/breadcrumb',
    method: 'get',
    ...variables,
    signal,
  })

export const useProjectControllerFindProjectBreadcrumb = <TData = Schemas.BreadcrumbProjectDto>(
  variables: ProjectControllerFindProjectBreadcrumbVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.BreadcrumbProjectDto, ProjectControllerFindProjectBreadcrumbError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.BreadcrumbProjectDto, ProjectControllerFindProjectBreadcrumbError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/projects/{id}/breadcrumb',
      operationId: 'projectControllerFindProjectBreadcrumb',
      variables,
    }),
    queryFn: ({ signal }) => fetchProjectControllerFindProjectBreadcrumb({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GenreControllerFindAllGenreQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type GenreControllerFindAllGenreError = Fetcher.ErrorWrapper<undefined>

export type GenreControllerFindAllGenreVariables = {
  queryParams: GenreControllerFindAllGenreQueryParams
} & ApiContext['fetcherOptions']

export const fetchGenreControllerFindAllGenre = (
  variables: GenreControllerFindAllGenreVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GenreListDto,
    GenreControllerFindAllGenreError,
    undefined,
    {},
    GenreControllerFindAllGenreQueryParams,
    {}
  >({ url: '/storyboard/genre', method: 'get', ...variables, signal })

export const useGenreControllerFindAllGenre = <TData = Schemas.GenreListDto>(
  variables: GenreControllerFindAllGenreVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GenreListDto, GenreControllerFindAllGenreError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.GenreListDto, GenreControllerFindAllGenreError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/genre',
      operationId: 'genreControllerFindAllGenre',
      variables,
    }),
    queryFn: ({ signal }) => fetchGenreControllerFindAllGenre({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type GenreControllerFindOneGenrePathParams = {
  id: string
}

export type GenreControllerFindOneGenreError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type GenreControllerFindOneGenreVariables = {
  pathParams: GenreControllerFindOneGenrePathParams
} & ApiContext['fetcherOptions']

export const fetchGenreControllerFindOneGenre = (
  variables: GenreControllerFindOneGenreVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.GenreDto,
    GenreControllerFindOneGenreError,
    undefined,
    {},
    {},
    GenreControllerFindOneGenrePathParams
  >({ url: '/storyboard/genre/{id}', method: 'get', ...variables, signal })

export const useGenreControllerFindOneGenre = <TData = Schemas.GenreDto>(
  variables: GenreControllerFindOneGenreVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.GenreDto, GenreControllerFindOneGenreError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.GenreDto, GenreControllerFindOneGenreError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/genre/{id}',
      operationId: 'genreControllerFindOneGenre',
      variables,
    }),
    queryFn: ({ signal }) => fetchGenreControllerFindOneGenre({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CastControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type CastControllerCreateVariables = {
  body: Schemas.CreateCastDto
} & ApiContext['fetcherOptions']

export const fetchCastControllerCreate = (variables: CastControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.CastDto, CastControllerCreateError, Schemas.CreateCastDto, {}, {}, {}>({
    url: '/storyboard/cast',
    method: 'post',
    ...variables,
    signal,
  })

export const useCastControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.CastDto, CastControllerCreateError, CastControllerCreateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.CastDto, CastControllerCreateError, CastControllerCreateVariables>({
    mutationFn: (variables: CastControllerCreateVariables) =>
      fetchCastControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CastControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type CastControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type CastControllerFindAllVariables = {
  queryParams: CastControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchCastControllerFindAll = (variables: CastControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.CastListDto, CastControllerFindAllError, undefined, {}, CastControllerFindAllQueryParams, {}>({
    url: '/storyboard/cast',
    method: 'get',
    ...variables,
    signal,
  })

export const useCastControllerFindAll = <TData = Schemas.CastListDto>(
  variables: CastControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CastListDto, CastControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CastListDto, CastControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/cast',
      operationId: 'castControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchCastControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CastControllerUpdatePathParams = {
  id: string
}

export type CastControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CastControllerUpdateVariables = {
  body?: Schemas.UpdateCastDto
  pathParams: CastControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchCastControllerUpdate = (variables: CastControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.CastDto, CastControllerUpdateError, Schemas.UpdateCastDto, {}, {}, CastControllerUpdatePathParams>({
    url: '/storyboard/cast/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useCastControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.CastDto, CastControllerUpdateError, CastControllerUpdateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.CastDto, CastControllerUpdateError, CastControllerUpdateVariables>({
    mutationFn: (variables: CastControllerUpdateVariables) =>
      fetchCastControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CastControllerFindOnePathParams = {
  id: string
}

export type CastControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CastControllerFindOneVariables = {
  pathParams: CastControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchCastControllerFindOne = (variables: CastControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.CastDto, CastControllerFindOneError, undefined, {}, {}, CastControllerFindOnePathParams>({
    url: '/storyboard/cast/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useCastControllerFindOne = <TData = Schemas.CastDto>(
  variables: CastControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CastDto, CastControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CastDto, CastControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/cast/{id}',
      operationId: 'castControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchCastControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CastControllerDeletePathParams = {
  id: string
}

export type CastControllerDeleteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CastControllerDeleteVariables = {
  pathParams: CastControllerDeletePathParams
} & ApiContext['fetcherOptions']

export const fetchCastControllerDelete = (variables: CastControllerDeleteVariables, signal?: AbortSignal) =>
  apiFetch<undefined, CastControllerDeleteError, undefined, {}, {}, CastControllerDeletePathParams>({
    url: '/storyboard/cast/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useCastControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, CastControllerDeleteError, CastControllerDeleteVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, CastControllerDeleteError, CastControllerDeleteVariables>({
    mutationFn: (variables: CastControllerDeleteVariables) =>
      fetchCastControllerDelete({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CastControllerFindAllByProjectPathParams = {
  projectId: string
}

export type CastControllerFindAllByProjectQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type CastControllerFindAllByProjectError = Fetcher.ErrorWrapper<undefined>

export type CastControllerFindAllByProjectVariables = {
  pathParams: CastControllerFindAllByProjectPathParams
  queryParams: CastControllerFindAllByProjectQueryParams
} & ApiContext['fetcherOptions']

export const fetchCastControllerFindAllByProject = (
  variables: CastControllerFindAllByProjectVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CastListDto,
    CastControllerFindAllByProjectError,
    undefined,
    {},
    CastControllerFindAllByProjectQueryParams,
    CastControllerFindAllByProjectPathParams
  >({
    url: '/storyboard/cast/project/{projectId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useCastControllerFindAllByProject = <TData = Schemas.CastListDto>(
  variables: CastControllerFindAllByProjectVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CastListDto, CastControllerFindAllByProjectError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CastListDto, CastControllerFindAllByProjectError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/cast/project/{projectId}',
      operationId: 'castControllerFindAllByProject',
      variables,
    }),
    queryFn: ({ signal }) => fetchCastControllerFindAllByProject({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CastControllerFindCastSeasonAndEpisodePathParams = {
  castId: string
}

export type CastControllerFindCastSeasonAndEpisodeError = Fetcher.ErrorWrapper<undefined>

export type CastControllerFindCastSeasonAndEpisodeVariables = {
  pathParams: CastControllerFindCastSeasonAndEpisodePathParams
} & ApiContext['fetcherOptions']

export const fetchCastControllerFindCastSeasonAndEpisode = (
  variables: CastControllerFindCastSeasonAndEpisodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CastSeasonEpisodeDto,
    CastControllerFindCastSeasonAndEpisodeError,
    undefined,
    {},
    {},
    CastControllerFindCastSeasonAndEpisodePathParams
  >({
    url: '/storyboard/cast/{castId}/season-episode',
    method: 'get',
    ...variables,
    signal,
  })

export const useCastControllerFindCastSeasonAndEpisode = <TData = Schemas.CastSeasonEpisodeDto>(
  variables: CastControllerFindCastSeasonAndEpisodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CastSeasonEpisodeDto, CastControllerFindCastSeasonAndEpisodeError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CastSeasonEpisodeDto, CastControllerFindCastSeasonAndEpisodeError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/cast/{castId}/season-episode',
      operationId: 'castControllerFindCastSeasonAndEpisode',
      variables,
    }),
    queryFn: ({ signal }) => fetchCastControllerFindCastSeasonAndEpisode({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ShotCastControllerCreateError = Fetcher.ErrorWrapper<undefined>

export type ShotCastControllerCreateVariables = {
  body: Schemas.CreateShotCastDto
} & ApiContext['fetcherOptions']

export const fetchShotCastControllerCreate = (variables: ShotCastControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ShotCastDto, ShotCastControllerCreateError, Schemas.CreateShotCastDto, {}, {}, {}>({
    url: '/storyboard/shot-cast',
    method: 'post',
    ...variables,
    signal,
  })

export const useShotCastControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ShotCastDto,
      ShotCastControllerCreateError,
      ShotCastControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.ShotCastDto, ShotCastControllerCreateError, ShotCastControllerCreateVariables>({
    mutationFn: (variables: ShotCastControllerCreateVariables) =>
      fetchShotCastControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ShotCastControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type ShotCastControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type ShotCastControllerFindAllVariables = {
  queryParams: ShotCastControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchShotCastControllerFindAll = (variables: ShotCastControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ShotCastListDto,
    ShotCastControllerFindAllError,
    undefined,
    {},
    ShotCastControllerFindAllQueryParams,
    {}
  >({ url: '/storyboard/shot-cast', method: 'get', ...variables, signal })

export const useShotCastControllerFindAll = <TData = Schemas.ShotCastListDto>(
  variables: ShotCastControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotCastListDto, ShotCastControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotCastListDto, ShotCastControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/shot-cast',
      operationId: 'shotCastControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchShotCastControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ShotCastControllerUpdatePathParams = {
  id: string
}

export type ShotCastControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ShotCastControllerUpdateVariables = {
  body?: Schemas.UpdateShotCastDto
  pathParams: ShotCastControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchShotCastControllerUpdate = (variables: ShotCastControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.ShotCastDto,
    ShotCastControllerUpdateError,
    Schemas.UpdateShotCastDto,
    {},
    {},
    ShotCastControllerUpdatePathParams
  >({
    url: '/storyboard/shot-cast/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useShotCastControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ShotCastDto,
      ShotCastControllerUpdateError,
      ShotCastControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.ShotCastDto, ShotCastControllerUpdateError, ShotCastControllerUpdateVariables>({
    mutationFn: (variables: ShotCastControllerUpdateVariables) =>
      fetchShotCastControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ShotCastControllerFindOnePathParams = {
  id: string
}

export type ShotCastControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ShotCastControllerFindOneVariables = {
  pathParams: ShotCastControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchShotCastControllerFindOne = (variables: ShotCastControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.ShotCastDto, ShotCastControllerFindOneError, undefined, {}, {}, ShotCastControllerFindOnePathParams>(
    { url: '/storyboard/shot-cast/{id}', method: 'get', ...variables, signal },
  )

export const useShotCastControllerFindOne = <TData = Schemas.ShotCastDto>(
  variables: ShotCastControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotCastDto, ShotCastControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotCastDto, ShotCastControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/shot-cast/{id}',
      operationId: 'shotCastControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchShotCastControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ShotCastControllerDeletePathParams = {
  id: string
}

export type ShotCastControllerDeleteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type ShotCastControllerDeleteVariables = {
  pathParams: ShotCastControllerDeletePathParams
} & ApiContext['fetcherOptions']

export const fetchShotCastControllerDelete = (variables: ShotCastControllerDeleteVariables, signal?: AbortSignal) =>
  apiFetch<undefined, ShotCastControllerDeleteError, undefined, {}, {}, ShotCastControllerDeletePathParams>({
    url: '/storyboard/shot-cast/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useShotCastControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, ShotCastControllerDeleteError, ShotCastControllerDeleteVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, ShotCastControllerDeleteError, ShotCastControllerDeleteVariables>({
    mutationFn: (variables: ShotCastControllerDeleteVariables) =>
      fetchShotCastControllerDelete({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type ShotCastControllerFindAllByShotPathParams = {
  id: string
}

export type ShotCastControllerFindAllByShotQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type ShotCastControllerFindAllByShotError = Fetcher.ErrorWrapper<undefined>

export type ShotCastControllerFindAllByShotVariables = {
  pathParams: ShotCastControllerFindAllByShotPathParams
  queryParams: ShotCastControllerFindAllByShotQueryParams
} & ApiContext['fetcherOptions']

export const fetchShotCastControllerFindAllByShot = (
  variables: ShotCastControllerFindAllByShotVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ShotCastListDto,
    ShotCastControllerFindAllByShotError,
    undefined,
    {},
    ShotCastControllerFindAllByShotQueryParams,
    ShotCastControllerFindAllByShotPathParams
  >({
    url: '/storyboard/shot-cast/shot/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useShotCastControllerFindAllByShot = <TData = Schemas.ShotCastListDto>(
  variables: ShotCastControllerFindAllByShotVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotCastListDto, ShotCastControllerFindAllByShotError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotCastListDto, ShotCastControllerFindAllByShotError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/shot-cast/shot/{id}',
      operationId: 'shotCastControllerFindAllByShot',
      variables,
    }),
    queryFn: ({ signal }) => fetchShotCastControllerFindAllByShot({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ShotCastControllerFindAllBySeasonPathParams = {
  id: string
}

export type ShotCastControllerFindAllBySeasonQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type ShotCastControllerFindAllBySeasonError = Fetcher.ErrorWrapper<undefined>

export type ShotCastControllerFindAllBySeasonVariables = {
  pathParams: ShotCastControllerFindAllBySeasonPathParams
  queryParams: ShotCastControllerFindAllBySeasonQueryParams
} & ApiContext['fetcherOptions']

export const fetchShotCastControllerFindAllBySeason = (
  variables: ShotCastControllerFindAllBySeasonVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ShotCastListDto,
    ShotCastControllerFindAllBySeasonError,
    undefined,
    {},
    ShotCastControllerFindAllBySeasonQueryParams,
    ShotCastControllerFindAllBySeasonPathParams
  >({
    url: '/storyboard/shot-cast/season/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useShotCastControllerFindAllBySeason = <TData = Schemas.ShotCastListDto>(
  variables: ShotCastControllerFindAllBySeasonVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotCastListDto, ShotCastControllerFindAllBySeasonError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotCastListDto, ShotCastControllerFindAllBySeasonError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/shot-cast/season/{id}',
      operationId: 'shotCastControllerFindAllBySeason',
      variables,
    }),
    queryFn: ({ signal }) => fetchShotCastControllerFindAllBySeason({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ShotCastControllerFindAllByEpisodePathParams = {
  id: string
}

export type ShotCastControllerFindAllByEpisodeQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type ShotCastControllerFindAllByEpisodeError = Fetcher.ErrorWrapper<undefined>

export type ShotCastControllerFindAllByEpisodeVariables = {
  pathParams: ShotCastControllerFindAllByEpisodePathParams
  queryParams: ShotCastControllerFindAllByEpisodeQueryParams
} & ApiContext['fetcherOptions']

export const fetchShotCastControllerFindAllByEpisode = (
  variables: ShotCastControllerFindAllByEpisodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ShotCastListDto,
    ShotCastControllerFindAllByEpisodeError,
    undefined,
    {},
    ShotCastControllerFindAllByEpisodeQueryParams,
    ShotCastControllerFindAllByEpisodePathParams
  >({
    url: '/storyboard/shot-cast/episode/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useShotCastControllerFindAllByEpisode = <TData = Schemas.ShotCastListDto>(
  variables: ShotCastControllerFindAllByEpisodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotCastListDto, ShotCastControllerFindAllByEpisodeError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotCastListDto, ShotCastControllerFindAllByEpisodeError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/shot-cast/episode/{id}',
      operationId: 'shotCastControllerFindAllByEpisode',
      variables,
    }),
    queryFn: ({ signal }) => fetchShotCastControllerFindAllByEpisode({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ShotCastControllerFindAllByScenePathParams = {
  id: string
}

export type ShotCastControllerFindAllBySceneQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type ShotCastControllerFindAllBySceneError = Fetcher.ErrorWrapper<undefined>

export type ShotCastControllerFindAllBySceneVariables = {
  pathParams: ShotCastControllerFindAllByScenePathParams
  queryParams: ShotCastControllerFindAllBySceneQueryParams
} & ApiContext['fetcherOptions']

export const fetchShotCastControllerFindAllByScene = (
  variables: ShotCastControllerFindAllBySceneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ShotCastListDto,
    ShotCastControllerFindAllBySceneError,
    undefined,
    {},
    ShotCastControllerFindAllBySceneQueryParams,
    ShotCastControllerFindAllByScenePathParams
  >({
    url: '/storyboard/shot-cast/scene/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useShotCastControllerFindAllByScene = <TData = Schemas.ShotCastListDto>(
  variables: ShotCastControllerFindAllBySceneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotCastListDto, ShotCastControllerFindAllBySceneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotCastListDto, ShotCastControllerFindAllBySceneError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/shot-cast/scene/{id}',
      operationId: 'shotCastControllerFindAllByScene',
      variables,
    }),
    queryFn: ({ signal }) => fetchShotCastControllerFindAllByScene({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TodoControllerFindAllTodosQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type TodoControllerFindAllTodosError = Fetcher.ErrorWrapper<undefined>

export type TodoControllerFindAllTodosVariables = {
  queryParams: TodoControllerFindAllTodosQueryParams
} & ApiContext['fetcherOptions']

export const fetchTodoControllerFindAllTodos = (variables: TodoControllerFindAllTodosVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TodoListDto,
    TodoControllerFindAllTodosError,
    undefined,
    {},
    TodoControllerFindAllTodosQueryParams,
    {}
  >({ url: '/storyboard/Todo', method: 'get', ...variables, signal })

export const useTodoControllerFindAllTodos = <TData = Schemas.TodoListDto>(
  variables: TodoControllerFindAllTodosVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TodoListDto, TodoControllerFindAllTodosError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.TodoListDto, TodoControllerFindAllTodosError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/Todo',
      operationId: 'todoControllerFindAllTodos',
      variables,
    }),
    queryFn: ({ signal }) => fetchTodoControllerFindAllTodos({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TodoControllerCreateTodoError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type TodoControllerCreateTodoVariables = {
  body: Schemas.CreateTodoDto
} & ApiContext['fetcherOptions']

export const fetchTodoControllerCreateTodo = (variables: TodoControllerCreateTodoVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TodoDto, TodoControllerCreateTodoError, Schemas.CreateTodoDto, {}, {}, {}>({
    url: '/storyboard/Todo',
    method: 'post',
    ...variables,
    signal,
  })

export const useTodoControllerCreateTodo = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TodoDto, TodoControllerCreateTodoError, TodoControllerCreateTodoVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.TodoDto, TodoControllerCreateTodoError, TodoControllerCreateTodoVariables>({
    mutationFn: (variables: TodoControllerCreateTodoVariables) =>
      fetchTodoControllerCreateTodo({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TodoControllerFindOneTodoPathParams = {
  id: string
}

export type TodoControllerFindOneTodoError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type TodoControllerFindOneTodoVariables = {
  pathParams: TodoControllerFindOneTodoPathParams
} & ApiContext['fetcherOptions']

export const fetchTodoControllerFindOneTodo = (variables: TodoControllerFindOneTodoVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TodoDto, TodoControllerFindOneTodoError, undefined, {}, {}, TodoControllerFindOneTodoPathParams>({
    url: '/storyboard/Todo/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useTodoControllerFindOneTodo = <TData = Schemas.TodoDto>(
  variables: TodoControllerFindOneTodoVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TodoDto, TodoControllerFindOneTodoError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.TodoDto, TodoControllerFindOneTodoError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/Todo/{id}',
      operationId: 'todoControllerFindOneTodo',
      variables,
    }),
    queryFn: ({ signal }) => fetchTodoControllerFindOneTodo({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TodoControllerUpdateTodoPathParams = {
  id: string
}

export type TodoControllerUpdateTodoError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type TodoControllerUpdateTodoVariables = {
  body?: Schemas.UpdateTodoDto
  pathParams: TodoControllerUpdateTodoPathParams
} & ApiContext['fetcherOptions']

export const fetchTodoControllerUpdateTodo = (variables: TodoControllerUpdateTodoVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TodoDto,
    TodoControllerUpdateTodoError,
    Schemas.UpdateTodoDto,
    {},
    {},
    TodoControllerUpdateTodoPathParams
  >({ url: '/storyboard/Todo/{id}', method: 'patch', ...variables, signal })

export const useTodoControllerUpdateTodo = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TodoDto, TodoControllerUpdateTodoError, TodoControllerUpdateTodoVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.TodoDto, TodoControllerUpdateTodoError, TodoControllerUpdateTodoVariables>({
    mutationFn: (variables: TodoControllerUpdateTodoVariables) =>
      fetchTodoControllerUpdateTodo({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TodoControllerDeleteTodoPathParams = {
  id: string
}

export type TodoControllerDeleteTodoError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type TodoControllerDeleteTodoVariables = {
  pathParams: TodoControllerDeleteTodoPathParams
} & ApiContext['fetcherOptions']

export const fetchTodoControllerDeleteTodo = (variables: TodoControllerDeleteTodoVariables, signal?: AbortSignal) =>
  apiFetch<undefined, TodoControllerDeleteTodoError, undefined, {}, {}, TodoControllerDeleteTodoPathParams>({
    url: '/storyboard/Todo/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useTodoControllerDeleteTodo = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, TodoControllerDeleteTodoError, TodoControllerDeleteTodoVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, TodoControllerDeleteTodoError, TodoControllerDeleteTodoVariables>({
    mutationFn: (variables: TodoControllerDeleteTodoVariables) =>
      fetchTodoControllerDeleteTodo({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TrackControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type TrackControllerCreateVariables = {
  body: Schemas.CreateTrackDto
} & ApiContext['fetcherOptions']

export const fetchTrackControllerCreate = (variables: TrackControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TrackDto, TrackControllerCreateError, Schemas.CreateTrackDto, {}, {}, {}>({
    url: '/storyboard/track',
    method: 'post',
    ...variables,
    signal,
  })

export const useTrackControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TrackDto, TrackControllerCreateError, TrackControllerCreateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.TrackDto, TrackControllerCreateError, TrackControllerCreateVariables>({
    mutationFn: (variables: TrackControllerCreateVariables) =>
      fetchTrackControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TrackControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type TrackControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type TrackControllerFindAllVariables = {
  queryParams: TrackControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchTrackControllerFindAll = (variables: TrackControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TrackListDto, TrackControllerFindAllError, undefined, {}, TrackControllerFindAllQueryParams, {}>({
    url: '/storyboard/track',
    method: 'get',
    ...variables,
    signal,
  })

export const useTrackControllerFindAll = <TData = Schemas.TrackListDto>(
  variables: TrackControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TrackListDto, TrackControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.TrackListDto, TrackControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/track',
      operationId: 'trackControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchTrackControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TrackControllerUpdatePathParams = {
  id: string
}

export type TrackControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type TrackControllerUpdateVariables = {
  body?: Schemas.UpdateTrackDto
  pathParams: TrackControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchTrackControllerUpdate = (variables: TrackControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.TrackDto,
    TrackControllerUpdateError,
    Schemas.UpdateTrackDto,
    {},
    {},
    TrackControllerUpdatePathParams
  >({ url: '/storyboard/track/{id}', method: 'patch', ...variables, signal })

export const useTrackControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.TrackDto, TrackControllerUpdateError, TrackControllerUpdateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.TrackDto, TrackControllerUpdateError, TrackControllerUpdateVariables>({
    mutationFn: (variables: TrackControllerUpdateVariables) =>
      fetchTrackControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TrackControllerFindOnePathParams = {
  id: string
}

export type TrackControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type TrackControllerFindOneVariables = {
  pathParams: TrackControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchTrackControllerFindOne = (variables: TrackControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.TrackDto, TrackControllerFindOneError, undefined, {}, {}, TrackControllerFindOnePathParams>({
    url: '/storyboard/track/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useTrackControllerFindOne = <TData = Schemas.TrackDto>(
  variables: TrackControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TrackDto, TrackControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.TrackDto, TrackControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/track/{id}',
      operationId: 'trackControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchTrackControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type TrackControllerDeletePathParams = {
  id: string
}

export type TrackControllerDeleteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type TrackControllerDeleteVariables = {
  pathParams: TrackControllerDeletePathParams
} & ApiContext['fetcherOptions']

export const fetchTrackControllerDelete = (variables: TrackControllerDeleteVariables, signal?: AbortSignal) =>
  apiFetch<undefined, TrackControllerDeleteError, undefined, {}, {}, TrackControllerDeletePathParams>({
    url: '/storyboard/track/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useTrackControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, TrackControllerDeleteError, TrackControllerDeleteVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, TrackControllerDeleteError, TrackControllerDeleteVariables>({
    mutationFn: (variables: TrackControllerDeleteVariables) =>
      fetchTrackControllerDelete({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type TrackControllerFindAllByProjectIdPathParams = {
  projectId: string
}

export type TrackControllerFindAllByProjectIdQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type TrackControllerFindAllByProjectIdError = Fetcher.ErrorWrapper<undefined>

export type TrackControllerFindAllByProjectIdVariables = {
  pathParams: TrackControllerFindAllByProjectIdPathParams
  queryParams: TrackControllerFindAllByProjectIdQueryParams
} & ApiContext['fetcherOptions']

export const fetchTrackControllerFindAllByProjectId = (
  variables: TrackControllerFindAllByProjectIdVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.TrackListDto,
    TrackControllerFindAllByProjectIdError,
    undefined,
    {},
    TrackControllerFindAllByProjectIdQueryParams,
    TrackControllerFindAllByProjectIdPathParams
  >({
    url: '/storyboard/track/project/{projectId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useTrackControllerFindAllByProjectId = <TData = Schemas.TrackListDto>(
  variables: TrackControllerFindAllByProjectIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.TrackListDto, TrackControllerFindAllByProjectIdError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.TrackListDto, TrackControllerFindAllByProjectIdError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/track/project/{projectId}',
      operationId: 'trackControllerFindAllByProjectId',
      variables,
    }),
    queryFn: ({ signal }) => fetchTrackControllerFindAllByProjectId({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type NavigationCursorControllerFindOneNavCursorQueryParams = {
  projectId: string
}

export type NavigationCursorControllerFindOneNavCursorError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type NavigationCursorControllerFindOneNavCursorVariables = {
  queryParams: NavigationCursorControllerFindOneNavCursorQueryParams
} & ApiContext['fetcherOptions']

export const fetchNavigationCursorControllerFindOneNavCursor = (
  variables: NavigationCursorControllerFindOneNavCursorVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.NavigationCursorDto,
    NavigationCursorControllerFindOneNavCursorError,
    undefined,
    {},
    NavigationCursorControllerFindOneNavCursorQueryParams,
    {}
  >({
    url: '/storyboard/navigation-cursor/user',
    method: 'get',
    ...variables,
    signal,
  })

export const useNavigationCursorControllerFindOneNavCursor = <TData = Schemas.NavigationCursorDto>(
  variables: NavigationCursorControllerFindOneNavCursorVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.NavigationCursorDto, NavigationCursorControllerFindOneNavCursorError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.NavigationCursorDto, NavigationCursorControllerFindOneNavCursorError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/navigation-cursor/user',
      operationId: 'navigationCursorControllerFindOneNavCursor',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchNavigationCursorControllerFindOneNavCursor({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type NavigationCursorControllerUpdateNavCursorError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type NavigationCursorControllerUpdateNavCursorVariables = {
  body?: Schemas.UpdateNavigationCursorDto
} & ApiContext['fetcherOptions']

export const fetchNavigationCursorControllerUpdateNavCursor = (
  variables: NavigationCursorControllerUpdateNavCursorVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.NavigationCursorDto,
    NavigationCursorControllerUpdateNavCursorError,
    Schemas.UpdateNavigationCursorDto,
    {},
    {},
    {}
  >({
    url: '/storyboard/navigation-cursor/user',
    method: 'patch',
    ...variables,
    signal,
  })

export const useNavigationCursorControllerUpdateNavCursor = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NavigationCursorDto,
      NavigationCursorControllerUpdateNavCursorError,
      NavigationCursorControllerUpdateNavCursorVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.NavigationCursorDto,
    NavigationCursorControllerUpdateNavCursorError,
    NavigationCursorControllerUpdateNavCursorVariables
  >({
    mutationFn: (variables: NavigationCursorControllerUpdateNavCursorVariables) =>
      fetchNavigationCursorControllerUpdateNavCursor({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type NavigationCursorControllerCreateNavCursorError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type NavigationCursorControllerCreateNavCursorVariables = {
  body: Schemas.CreateNavigationCursorDto
} & ApiContext['fetcherOptions']

export const fetchNavigationCursorControllerCreateNavCursor = (
  variables: NavigationCursorControllerCreateNavCursorVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.NavigationCursorDto,
    NavigationCursorControllerCreateNavCursorError,
    Schemas.CreateNavigationCursorDto,
    {},
    {},
    {}
  >({
    url: '/storyboard/navigation-cursor',
    method: 'post',
    ...variables,
    signal,
  })

export const useNavigationCursorControllerCreateNavCursor = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NavigationCursorDto,
      NavigationCursorControllerCreateNavCursorError,
      NavigationCursorControllerCreateNavCursorVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.NavigationCursorDto,
    NavigationCursorControllerCreateNavCursorError,
    NavigationCursorControllerCreateNavCursorVariables
  >({
    mutationFn: (variables: NavigationCursorControllerCreateNavCursorVariables) =>
      fetchNavigationCursorControllerCreateNavCursor({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type NavigationCursorControllerAddOrUpdateNavCursorError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type NavigationCursorControllerAddOrUpdateNavCursorVariables = {
  body: Schemas.CreateNavigationCursorDto
} & ApiContext['fetcherOptions']

export const fetchNavigationCursorControllerAddOrUpdateNavCursor = (
  variables: NavigationCursorControllerAddOrUpdateNavCursorVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.NavigationCursorDto,
    NavigationCursorControllerAddOrUpdateNavCursorError,
    Schemas.CreateNavigationCursorDto,
    {},
    {},
    {}
  >({
    url: '/storyboard/navigation-cursor/add-or-update',
    method: 'post',
    ...variables,
    signal,
  })

export const useNavigationCursorControllerAddOrUpdateNavCursor = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NavigationCursorDto,
      NavigationCursorControllerAddOrUpdateNavCursorError,
      NavigationCursorControllerAddOrUpdateNavCursorVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.NavigationCursorDto,
    NavigationCursorControllerAddOrUpdateNavCursorError,
    NavigationCursorControllerAddOrUpdateNavCursorVariables
  >({
    mutationFn: (variables: NavigationCursorControllerAddOrUpdateNavCursorVariables) =>
      fetchNavigationCursorControllerAddOrUpdateNavCursor({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type VideoStyleControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type VideoStyleControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type VideoStyleControllerFindAllVariables = {
  queryParams: VideoStyleControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchVideoStyleControllerFindAll = (
  variables: VideoStyleControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.VideoStyleListDto,
    VideoStyleControllerFindAllError,
    undefined,
    {},
    VideoStyleControllerFindAllQueryParams,
    {}
  >({ url: '/storyboard/video-styles', method: 'get', ...variables, signal })

export const useVideoStyleControllerFindAll = <TData = Schemas.VideoStyleListDto>(
  variables: VideoStyleControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.VideoStyleListDto, VideoStyleControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.VideoStyleListDto, VideoStyleControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/video-styles',
      operationId: 'videoStyleControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchVideoStyleControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VideoStyleControllerFindOneEpisodePathParams = {
  id: string
}

export type VideoStyleControllerFindOneEpisodeError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type VideoStyleControllerFindOneEpisodeVariables = {
  pathParams: VideoStyleControllerFindOneEpisodePathParams
} & ApiContext['fetcherOptions']

export const fetchVideoStyleControllerFindOneEpisode = (
  variables: VideoStyleControllerFindOneEpisodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.VideoStyleDto,
    VideoStyleControllerFindOneEpisodeError,
    undefined,
    {},
    {},
    VideoStyleControllerFindOneEpisodePathParams
  >({
    url: '/storyboard/video-styles/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useVideoStyleControllerFindOneEpisode = <TData = Schemas.VideoStyleDto>(
  variables: VideoStyleControllerFindOneEpisodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.VideoStyleDto, VideoStyleControllerFindOneEpisodeError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.VideoStyleDto, VideoStyleControllerFindOneEpisodeError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/video-styles/{id}',
      operationId: 'videoStyleControllerFindOneEpisode',
      variables,
    }),
    queryFn: ({ signal }) => fetchVideoStyleControllerFindOneEpisode({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type BattleControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type BattleControllerCreateVariables = {
  body: Schemas.CreateBattleDto
} & ApiContext['fetcherOptions']

export const fetchBattleControllerCreate = (variables: BattleControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.BattleDto, BattleControllerCreateError, Schemas.CreateBattleDto, {}, {}, {}>({
    url: '/storyboard/battle',
    method: 'post',
    ...variables,
    signal,
  })

export const useBattleControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.BattleDto, BattleControllerCreateError, BattleControllerCreateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.BattleDto, BattleControllerCreateError, BattleControllerCreateVariables>({
    mutationFn: (variables: BattleControllerCreateVariables) =>
      fetchBattleControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type BattleControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type BattleControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type BattleControllerFindAllVariables = {
  queryParams: BattleControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchBattleControllerFindAll = (variables: BattleControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.BattleListDto, BattleControllerFindAllError, undefined, {}, BattleControllerFindAllQueryParams, {}>({
    url: '/storyboard/battle',
    method: 'get',
    ...variables,
    signal,
  })

export const useBattleControllerFindAll = <TData = Schemas.BattleListDto>(
  variables: BattleControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.BattleListDto, BattleControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.BattleListDto, BattleControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/battle',
      operationId: 'battleControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchBattleControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type BattleControllerUpdatePathParams = {
  id: string
}

export type BattleControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type BattleControllerUpdateVariables = {
  body?: Schemas.UpdateBattleDto
  pathParams: BattleControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchBattleControllerUpdate = (variables: BattleControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.BattleDto,
    BattleControllerUpdateError,
    Schemas.UpdateBattleDto,
    {},
    {},
    BattleControllerUpdatePathParams
  >({ url: '/storyboard/battle/{id}', method: 'patch', ...variables, signal })

export const useBattleControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.BattleDto, BattleControllerUpdateError, BattleControllerUpdateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.BattleDto, BattleControllerUpdateError, BattleControllerUpdateVariables>({
    mutationFn: (variables: BattleControllerUpdateVariables) =>
      fetchBattleControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type BattleControllerFindOnePathParams = {
  id: string
}

export type BattleControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type BattleControllerFindOneVariables = {
  pathParams: BattleControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchBattleControllerFindOne = (variables: BattleControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.BattleDto, BattleControllerFindOneError, undefined, {}, {}, BattleControllerFindOnePathParams>({
    url: '/storyboard/battle/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useBattleControllerFindOne = <TData = Schemas.BattleDto>(
  variables: BattleControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.BattleDto, BattleControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.BattleDto, BattleControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/battle/{id}',
      operationId: 'battleControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchBattleControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type BattleControllerDeletePathParams = {
  id: string
}

export type BattleControllerDeleteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type BattleControllerDeleteVariables = {
  pathParams: BattleControllerDeletePathParams
} & ApiContext['fetcherOptions']

export const fetchBattleControllerDelete = (variables: BattleControllerDeleteVariables, signal?: AbortSignal) =>
  apiFetch<undefined, BattleControllerDeleteError, undefined, {}, {}, BattleControllerDeletePathParams>({
    url: '/storyboard/battle/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useBattleControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, BattleControllerDeleteError, BattleControllerDeleteVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, BattleControllerDeleteError, BattleControllerDeleteVariables>({
    mutationFn: (variables: BattleControllerDeleteVariables) =>
      fetchBattleControllerDelete({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type BattleControllerFindAllByEpisodeIdPathParams = {
  episodeId: string
}

export type BattleControllerFindAllByEpisodeIdQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type BattleControllerFindAllByEpisodeIdError = Fetcher.ErrorWrapper<undefined>

export type BattleControllerFindAllByEpisodeIdVariables = {
  pathParams: BattleControllerFindAllByEpisodeIdPathParams
  queryParams: BattleControllerFindAllByEpisodeIdQueryParams
} & ApiContext['fetcherOptions']

export const fetchBattleControllerFindAllByEpisodeId = (
  variables: BattleControllerFindAllByEpisodeIdVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.BattleListDto,
    BattleControllerFindAllByEpisodeIdError,
    undefined,
    {},
    BattleControllerFindAllByEpisodeIdQueryParams,
    BattleControllerFindAllByEpisodeIdPathParams
  >({
    url: '/storyboard/battle/episode/{episodeId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useBattleControllerFindAllByEpisodeId = <TData = Schemas.BattleListDto>(
  variables: BattleControllerFindAllByEpisodeIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.BattleListDto, BattleControllerFindAllByEpisodeIdError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.BattleListDto, BattleControllerFindAllByEpisodeIdError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/battle/episode/{episodeId}',
      operationId: 'battleControllerFindAllByEpisodeId',
      variables,
    }),
    queryFn: ({ signal }) => fetchBattleControllerFindAllByEpisodeId({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type BeatControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type BeatControllerCreateVariables = {
  body: Schemas.CreateBeatDto
} & ApiContext['fetcherOptions']

export const fetchBeatControllerCreate = (variables: BeatControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.BeatDto, BeatControllerCreateError, Schemas.CreateBeatDto, {}, {}, {}>({
    url: '/storyboard/beat',
    method: 'post',
    ...variables,
    signal,
  })

export const useBeatControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.BeatDto, BeatControllerCreateError, BeatControllerCreateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.BeatDto, BeatControllerCreateError, BeatControllerCreateVariables>({
    mutationFn: (variables: BeatControllerCreateVariables) =>
      fetchBeatControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type BeatControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type BeatControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type BeatControllerFindAllVariables = {
  queryParams: BeatControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchBeatControllerFindAll = (variables: BeatControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.BeatListDto, BeatControllerFindAllError, undefined, {}, BeatControllerFindAllQueryParams, {}>({
    url: '/storyboard/beat',
    method: 'get',
    ...variables,
    signal,
  })

export const useBeatControllerFindAll = <TData = Schemas.BeatListDto>(
  variables: BeatControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.BeatListDto, BeatControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.BeatListDto, BeatControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/beat',
      operationId: 'beatControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchBeatControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type BeatControllerUpdatePathParams = {
  id: string
}

export type BeatControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type BeatControllerUpdateVariables = {
  body?: Schemas.UpdateBeatDto
  pathParams: BeatControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchBeatControllerUpdate = (variables: BeatControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.BeatDto, BeatControllerUpdateError, Schemas.UpdateBeatDto, {}, {}, BeatControllerUpdatePathParams>({
    url: '/storyboard/beat/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useBeatControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.BeatDto, BeatControllerUpdateError, BeatControllerUpdateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.BeatDto, BeatControllerUpdateError, BeatControllerUpdateVariables>({
    mutationFn: (variables: BeatControllerUpdateVariables) =>
      fetchBeatControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type BeatControllerFindOnePathParams = {
  id: string
}

export type BeatControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type BeatControllerFindOneVariables = {
  pathParams: BeatControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchBeatControllerFindOne = (variables: BeatControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.BeatDto, BeatControllerFindOneError, undefined, {}, {}, BeatControllerFindOnePathParams>({
    url: '/storyboard/beat/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useBeatControllerFindOne = <TData = Schemas.BeatDto>(
  variables: BeatControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.BeatDto, BeatControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.BeatDto, BeatControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/beat/{id}',
      operationId: 'beatControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchBeatControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type BeatControllerDeletePathParams = {
  id: string
}

export type BeatControllerDeleteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type BeatControllerDeleteVariables = {
  pathParams: BeatControllerDeletePathParams
} & ApiContext['fetcherOptions']

export const fetchBeatControllerDelete = (variables: BeatControllerDeleteVariables, signal?: AbortSignal) =>
  apiFetch<undefined, BeatControllerDeleteError, undefined, {}, {}, BeatControllerDeletePathParams>({
    url: '/storyboard/beat/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useBeatControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, BeatControllerDeleteError, BeatControllerDeleteVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, BeatControllerDeleteError, BeatControllerDeleteVariables>({
    mutationFn: (variables: BeatControllerDeleteVariables) =>
      fetchBeatControllerDelete({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type BeatControllerFindAllByEpisodeIdPathParams = {
  episodeId: string
}

export type BeatControllerFindAllByEpisodeIdQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type BeatControllerFindAllByEpisodeIdError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type BeatControllerFindAllByEpisodeIdVariables = {
  pathParams: BeatControllerFindAllByEpisodeIdPathParams
  queryParams: BeatControllerFindAllByEpisodeIdQueryParams
} & ApiContext['fetcherOptions']

export const fetchBeatControllerFindAllByEpisodeId = (
  variables: BeatControllerFindAllByEpisodeIdVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.BeatListDto,
    BeatControllerFindAllByEpisodeIdError,
    undefined,
    {},
    BeatControllerFindAllByEpisodeIdQueryParams,
    BeatControllerFindAllByEpisodeIdPathParams
  >({
    url: '/storyboard/beat/episode/{episodeId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useBeatControllerFindAllByEpisodeId = <TData = Schemas.BeatListDto>(
  variables: BeatControllerFindAllByEpisodeIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.BeatListDto, BeatControllerFindAllByEpisodeIdError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.BeatListDto, BeatControllerFindAllByEpisodeIdError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/beat/episode/{episodeId}',
      operationId: 'beatControllerFindAllByEpisodeId',
      variables,
    }),
    queryFn: ({ signal }) => fetchBeatControllerFindAllByEpisodeId({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type BeatControllerFindAllByUniversalTruthIdPathParams = {
  universalTruthId: string
}

export type BeatControllerFindAllByUniversalTruthIdQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type BeatControllerFindAllByUniversalTruthIdError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type BeatControllerFindAllByUniversalTruthIdVariables = {
  pathParams: BeatControllerFindAllByUniversalTruthIdPathParams
  queryParams: BeatControllerFindAllByUniversalTruthIdQueryParams
} & ApiContext['fetcherOptions']

export const fetchBeatControllerFindAllByUniversalTruthId = (
  variables: BeatControllerFindAllByUniversalTruthIdVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.BeatListDto,
    BeatControllerFindAllByUniversalTruthIdError,
    undefined,
    {},
    BeatControllerFindAllByUniversalTruthIdQueryParams,
    BeatControllerFindAllByUniversalTruthIdPathParams
  >({
    url: '/storyboard/beat/universal-truth/{universalTruthId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useBeatControllerFindAllByUniversalTruthId = <TData = Schemas.BeatListDto>(
  variables: BeatControllerFindAllByUniversalTruthIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.BeatListDto, BeatControllerFindAllByUniversalTruthIdError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.BeatListDto, BeatControllerFindAllByUniversalTruthIdError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/beat/universal-truth/{universalTruthId}',
      operationId: 'beatControllerFindAllByUniversalTruthId',
      variables,
    }),
    queryFn: ({ signal }) => fetchBeatControllerFindAllByUniversalTruthId({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerFindAllUniversalTruthCategoriesQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type UniversalTruthControllerFindAllUniversalTruthCategoriesError = Fetcher.ErrorWrapper<undefined>

export type UniversalTruthControllerFindAllUniversalTruthCategoriesVariables = {
  queryParams: UniversalTruthControllerFindAllUniversalTruthCategoriesQueryParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerFindAllUniversalTruthCategories = (
  variables: UniversalTruthControllerFindAllUniversalTruthCategoriesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthCategoryListDto,
    UniversalTruthControllerFindAllUniversalTruthCategoriesError,
    undefined,
    {},
    UniversalTruthControllerFindAllUniversalTruthCategoriesQueryParams,
    {}
  >({
    url: '/storyboard/universal-truth/universal-truth-category',
    method: 'get',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerFindAllUniversalTruthCategories = <
  TData = Schemas.UniversalTruthCategoryListDto,
>(
  variables: UniversalTruthControllerFindAllUniversalTruthCategoriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UniversalTruthCategoryListDto,
      UniversalTruthControllerFindAllUniversalTruthCategoriesError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.UniversalTruthCategoryListDto,
    UniversalTruthControllerFindAllUniversalTruthCategoriesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/storyboard/universal-truth/universal-truth-category',
      operationId: 'universalTruthControllerFindAllUniversalTruthCategories',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUniversalTruthControllerFindAllUniversalTruthCategories({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerCreateUniversalTruthCategoryError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type UniversalTruthControllerCreateUniversalTruthCategoryVariables = {
  body: Schemas.CreateUniversalTruthCategoryDto
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerCreateUniversalTruthCategory = (
  variables: UniversalTruthControllerCreateUniversalTruthCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthCategoryDto,
    UniversalTruthControllerCreateUniversalTruthCategoryError,
    Schemas.CreateUniversalTruthCategoryDto,
    {},
    {},
    {}
  >({
    url: '/storyboard/universal-truth/universal-truth-category',
    method: 'post',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerCreateUniversalTruthCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UniversalTruthCategoryDto,
      UniversalTruthControllerCreateUniversalTruthCategoryError,
      UniversalTruthControllerCreateUniversalTruthCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.UniversalTruthCategoryDto,
    UniversalTruthControllerCreateUniversalTruthCategoryError,
    UniversalTruthControllerCreateUniversalTruthCategoryVariables
  >({
    mutationFn: (variables: UniversalTruthControllerCreateUniversalTruthCategoryVariables) =>
      fetchUniversalTruthControllerCreateUniversalTruthCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type UniversalTruthControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type UniversalTruthControllerCreateVariables = {
  body: Schemas.CreateUniversalTruthDto
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerCreate = (
  variables: UniversalTruthControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.UniversalTruthDto, UniversalTruthControllerCreateError, Schemas.CreateUniversalTruthDto, {}, {}, {}>(
    {
      url: '/storyboard/universal-truth',
      method: 'post',
      ...variables,
      signal,
    },
  )

export const useUniversalTruthControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UniversalTruthDto,
      UniversalTruthControllerCreateError,
      UniversalTruthControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.UniversalTruthDto,
    UniversalTruthControllerCreateError,
    UniversalTruthControllerCreateVariables
  >({
    mutationFn: (variables: UniversalTruthControllerCreateVariables) =>
      fetchUniversalTruthControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UniversalTruthControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type UniversalTruthControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type UniversalTruthControllerFindAllVariables = {
  queryParams: UniversalTruthControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerFindAll = (
  variables: UniversalTruthControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthListDto,
    UniversalTruthControllerFindAllError,
    undefined,
    {},
    UniversalTruthControllerFindAllQueryParams,
    {}
  >({
    url: '/storyboard/universal-truth',
    method: 'get',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerFindAll = <TData = Schemas.UniversalTruthListDto>(
  variables: UniversalTruthControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UniversalTruthListDto, UniversalTruthControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.UniversalTruthListDto, UniversalTruthControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/universal-truth',
      operationId: 'universalTruthControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchUniversalTruthControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerFindOnePathParams = {
  id: string
}

export type UniversalTruthControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UniversalTruthControllerFindOneVariables = {
  pathParams: UniversalTruthControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerFindOne = (
  variables: UniversalTruthControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthDto,
    UniversalTruthControllerFindOneError,
    undefined,
    {},
    {},
    UniversalTruthControllerFindOnePathParams
  >({
    url: '/storyboard/universal-truth/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerFindOne = <TData = Schemas.UniversalTruthDto>(
  variables: UniversalTruthControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UniversalTruthDto, UniversalTruthControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.UniversalTruthDto, UniversalTruthControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/universal-truth/{id}',
      operationId: 'universalTruthControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchUniversalTruthControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerUpdatePathParams = {
  id: string
}

export type UniversalTruthControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UniversalTruthControllerUpdateVariables = {
  body?: Schemas.UpdateUniversalTruthDto
  pathParams: UniversalTruthControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerUpdate = (
  variables: UniversalTruthControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthDto,
    UniversalTruthControllerUpdateError,
    Schemas.UpdateUniversalTruthDto,
    {},
    {},
    UniversalTruthControllerUpdatePathParams
  >({
    url: '/storyboard/universal-truth/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UniversalTruthDto,
      UniversalTruthControllerUpdateError,
      UniversalTruthControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.UniversalTruthDto,
    UniversalTruthControllerUpdateError,
    UniversalTruthControllerUpdateVariables
  >({
    mutationFn: (variables: UniversalTruthControllerUpdateVariables) =>
      fetchUniversalTruthControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UniversalTruthControllerRemovePathParams = {
  id: string
}

export type UniversalTruthControllerRemoveError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UniversalTruthControllerRemoveVariables = {
  pathParams: UniversalTruthControllerRemovePathParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerRemove = (
  variables: UniversalTruthControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, UniversalTruthControllerRemoveError, undefined, {}, {}, UniversalTruthControllerRemovePathParams>(
    {
      url: '/storyboard/universal-truth/{id}',
      method: 'delete',
      ...variables,
      signal,
    },
  )

export const useUniversalTruthControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UniversalTruthControllerRemoveError,
      UniversalTruthControllerRemoveVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    UniversalTruthControllerRemoveError,
    UniversalTruthControllerRemoveVariables
  >({
    mutationFn: (variables: UniversalTruthControllerRemoveVariables) =>
      fetchUniversalTruthControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type UniversalTruthControllerFindAllByProjectIdPathParams = {
  projectId: string
}

export type UniversalTruthControllerFindAllByProjectIdQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type UniversalTruthControllerFindAllByProjectIdError = Fetcher.ErrorWrapper<undefined>

export type UniversalTruthControllerFindAllByProjectIdVariables = {
  pathParams: UniversalTruthControllerFindAllByProjectIdPathParams
  queryParams: UniversalTruthControllerFindAllByProjectIdQueryParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerFindAllByProjectId = (
  variables: UniversalTruthControllerFindAllByProjectIdVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthListDto,
    UniversalTruthControllerFindAllByProjectIdError,
    undefined,
    {},
    UniversalTruthControllerFindAllByProjectIdQueryParams,
    UniversalTruthControllerFindAllByProjectIdPathParams
  >({
    url: '/storyboard/universal-truth/project/{projectId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerFindAllByProjectId = <TData = Schemas.UniversalTruthListDto>(
  variables: UniversalTruthControllerFindAllByProjectIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.UniversalTruthListDto, UniversalTruthControllerFindAllByProjectIdError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.UniversalTruthListDto, UniversalTruthControllerFindAllByProjectIdError, TData>({
    queryKey: queryKeyFn({
      path: '/storyboard/universal-truth/project/{projectId}',
      operationId: 'universalTruthControllerFindAllByProjectId',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUniversalTruthControllerFindAllByProjectId({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerFindAllCategoriesByProjectIdPathParams = {
  projectId: string
}

export type UniversalTruthControllerFindAllCategoriesByProjectIdQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type UniversalTruthControllerFindAllCategoriesByProjectIdError = Fetcher.ErrorWrapper<undefined>

export type UniversalTruthControllerFindAllCategoriesByProjectIdVariables = {
  pathParams: UniversalTruthControllerFindAllCategoriesByProjectIdPathParams
  queryParams: UniversalTruthControllerFindAllCategoriesByProjectIdQueryParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerFindAllCategoriesByProjectId = (
  variables: UniversalTruthControllerFindAllCategoriesByProjectIdVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthCategoryListDto,
    UniversalTruthControllerFindAllCategoriesByProjectIdError,
    undefined,
    {},
    UniversalTruthControllerFindAllCategoriesByProjectIdQueryParams,
    UniversalTruthControllerFindAllCategoriesByProjectIdPathParams
  >({
    url: '/storyboard/universal-truth/project/{projectId}/universal-truth-categories',
    method: 'get',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerFindAllCategoriesByProjectId = <TData = Schemas.UniversalTruthCategoryListDto>(
  variables: UniversalTruthControllerFindAllCategoriesByProjectIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UniversalTruthCategoryListDto,
      UniversalTruthControllerFindAllCategoriesByProjectIdError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.UniversalTruthCategoryListDto,
    UniversalTruthControllerFindAllCategoriesByProjectIdError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/storyboard/universal-truth/project/{projectId}/universal-truth-categories',
      operationId: 'universalTruthControllerFindAllCategoriesByProjectId',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUniversalTruthControllerFindAllCategoriesByProjectId({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerUpdateUniversalTruthCategoryPathParams = {
  id: string
}

export type UniversalTruthControllerUpdateUniversalTruthCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UniversalTruthControllerUpdateUniversalTruthCategoryVariables = {
  body: Schemas.UpdateUniversalTruthCategoryDto
  pathParams: UniversalTruthControllerUpdateUniversalTruthCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerUpdateUniversalTruthCategory = (
  variables: UniversalTruthControllerUpdateUniversalTruthCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthCategoryDto,
    UniversalTruthControllerUpdateUniversalTruthCategoryError,
    Schemas.UpdateUniversalTruthCategoryDto,
    {},
    {},
    UniversalTruthControllerUpdateUniversalTruthCategoryPathParams
  >({
    url: '/storyboard/universal-truth/universal-truth-category/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerUpdateUniversalTruthCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UniversalTruthCategoryDto,
      UniversalTruthControllerUpdateUniversalTruthCategoryError,
      UniversalTruthControllerUpdateUniversalTruthCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.UniversalTruthCategoryDto,
    UniversalTruthControllerUpdateUniversalTruthCategoryError,
    UniversalTruthControllerUpdateUniversalTruthCategoryVariables
  >({
    mutationFn: (variables: UniversalTruthControllerUpdateUniversalTruthCategoryVariables) =>
      fetchUniversalTruthControllerUpdateUniversalTruthCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type UniversalTruthControllerFindOneUniversalTruthCategoryPathParams = {
  id: string
}

export type UniversalTruthControllerFindOneUniversalTruthCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UniversalTruthControllerFindOneUniversalTruthCategoryVariables = {
  pathParams: UniversalTruthControllerFindOneUniversalTruthCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerFindOneUniversalTruthCategory = (
  variables: UniversalTruthControllerFindOneUniversalTruthCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthCategoryDto,
    UniversalTruthControllerFindOneUniversalTruthCategoryError,
    undefined,
    {},
    {},
    UniversalTruthControllerFindOneUniversalTruthCategoryPathParams
  >({
    url: '/storyboard/universal-truth/universal-truth-category/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerFindOneUniversalTruthCategory = <TData = Schemas.UniversalTruthCategoryDto>(
  variables: UniversalTruthControllerFindOneUniversalTruthCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UniversalTruthCategoryDto,
      UniversalTruthControllerFindOneUniversalTruthCategoryError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.UniversalTruthCategoryDto,
    UniversalTruthControllerFindOneUniversalTruthCategoryError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/storyboard/universal-truth/universal-truth-category/{id}',
      operationId: 'universalTruthControllerFindOneUniversalTruthCategory',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUniversalTruthControllerFindOneUniversalTruthCategory({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerRemoveUnviersalTruthCategoryPathParams = {
  id: string
}

export type UniversalTruthControllerRemoveUnviersalTruthCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UniversalTruthControllerRemoveUnviersalTruthCategoryVariables = {
  pathParams: UniversalTruthControllerRemoveUnviersalTruthCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerRemoveUnviersalTruthCategory = (
  variables: UniversalTruthControllerRemoveUnviersalTruthCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthDto,
    UniversalTruthControllerRemoveUnviersalTruthCategoryError,
    undefined,
    {},
    {},
    UniversalTruthControllerRemoveUnviersalTruthCategoryPathParams
  >({
    url: '/storyboard/universal-truth/universal-truth-category/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerRemoveUnviersalTruthCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UniversalTruthDto,
      UniversalTruthControllerRemoveUnviersalTruthCategoryError,
      UniversalTruthControllerRemoveUnviersalTruthCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.UniversalTruthDto,
    UniversalTruthControllerRemoveUnviersalTruthCategoryError,
    UniversalTruthControllerRemoveUnviersalTruthCategoryVariables
  >({
    mutationFn: (variables: UniversalTruthControllerRemoveUnviersalTruthCategoryVariables) =>
      fetchUniversalTruthControllerRemoveUnviersalTruthCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type UniversalTruthControllerFindAllUniversalTruthsByCategoryPathParams = {
  id: string
}

export type UniversalTruthControllerFindAllUniversalTruthsByCategoryQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type UniversalTruthControllerFindAllUniversalTruthsByCategoryError = Fetcher.ErrorWrapper<undefined>

export type UniversalTruthControllerFindAllUniversalTruthsByCategoryVariables = {
  pathParams: UniversalTruthControllerFindAllUniversalTruthsByCategoryPathParams
  queryParams: UniversalTruthControllerFindAllUniversalTruthsByCategoryQueryParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerFindAllUniversalTruthsByCategory = (
  variables: UniversalTruthControllerFindAllUniversalTruthsByCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalCategoryUniversalListDto,
    UniversalTruthControllerFindAllUniversalTruthsByCategoryError,
    undefined,
    {},
    UniversalTruthControllerFindAllUniversalTruthsByCategoryQueryParams,
    UniversalTruthControllerFindAllUniversalTruthsByCategoryPathParams
  >({
    url: '/storyboard/universal-truth/universal-truth-category/{id}/universal-truths',
    method: 'get',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerFindAllUniversalTruthsByCategory = <
  TData = Schemas.UniversalCategoryUniversalListDto,
>(
  variables: UniversalTruthControllerFindAllUniversalTruthsByCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UniversalCategoryUniversalListDto,
      UniversalTruthControllerFindAllUniversalTruthsByCategoryError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.UniversalCategoryUniversalListDto,
    UniversalTruthControllerFindAllUniversalTruthsByCategoryError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/storyboard/universal-truth/universal-truth-category/{id}/universal-truths',
      operationId: 'universalTruthControllerFindAllUniversalTruthsByCategory',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUniversalTruthControllerFindAllUniversalTruthsByCategory({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerFindAllUniversalTruthsByEpisodePathParams = {
  episodeId: string
}

export type UniversalTruthControllerFindAllUniversalTruthsByEpisodeQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type UniversalTruthControllerFindAllUniversalTruthsByEpisodeError = Fetcher.ErrorWrapper<undefined>

export type UniversalTruthControllerFindAllUniversalTruthsByEpisodeVariables = {
  pathParams: UniversalTruthControllerFindAllUniversalTruthsByEpisodePathParams
  queryParams: UniversalTruthControllerFindAllUniversalTruthsByEpisodeQueryParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerFindAllUniversalTruthsByEpisode = (
  variables: UniversalTruthControllerFindAllUniversalTruthsByEpisodeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthListDto,
    UniversalTruthControllerFindAllUniversalTruthsByEpisodeError,
    undefined,
    {},
    UniversalTruthControllerFindAllUniversalTruthsByEpisodeQueryParams,
    UniversalTruthControllerFindAllUniversalTruthsByEpisodePathParams
  >({
    url: '/storyboard/universal-truth/episode/{episodeId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerFindAllUniversalTruthsByEpisode = <TData = Schemas.UniversalTruthListDto>(
  variables: UniversalTruthControllerFindAllUniversalTruthsByEpisodeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UniversalTruthListDto,
      UniversalTruthControllerFindAllUniversalTruthsByEpisodeError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.UniversalTruthListDto,
    UniversalTruthControllerFindAllUniversalTruthsByEpisodeError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/storyboard/universal-truth/episode/{episodeId}',
      operationId: 'universalTruthControllerFindAllUniversalTruthsByEpisode',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUniversalTruthControllerFindAllUniversalTruthsByEpisode({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerFindAllUniversalTruthsBySeasonPathParams = {
  seasonId: string
}

export type UniversalTruthControllerFindAllUniversalTruthsBySeasonQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type UniversalTruthControllerFindAllUniversalTruthsBySeasonError = Fetcher.ErrorWrapper<undefined>

export type UniversalTruthControllerFindAllUniversalTruthsBySeasonVariables = {
  pathParams: UniversalTruthControllerFindAllUniversalTruthsBySeasonPathParams
  queryParams: UniversalTruthControllerFindAllUniversalTruthsBySeasonQueryParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerFindAllUniversalTruthsBySeason = (
  variables: UniversalTruthControllerFindAllUniversalTruthsBySeasonVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UniversalTruthListDto,
    UniversalTruthControllerFindAllUniversalTruthsBySeasonError,
    undefined,
    {},
    UniversalTruthControllerFindAllUniversalTruthsBySeasonQueryParams,
    UniversalTruthControllerFindAllUniversalTruthsBySeasonPathParams
  >({
    url: '/storyboard/universal-truth/season/{seasonId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerFindAllUniversalTruthsBySeason = <TData = Schemas.UniversalTruthListDto>(
  variables: UniversalTruthControllerFindAllUniversalTruthsBySeasonVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UniversalTruthListDto,
      UniversalTruthControllerFindAllUniversalTruthsBySeasonError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.UniversalTruthListDto,
    UniversalTruthControllerFindAllUniversalTruthsBySeasonError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/storyboard/universal-truth/season/{seasonId}',
      operationId: 'universalTruthControllerFindAllUniversalTruthsBySeason',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUniversalTruthControllerFindAllUniversalTruthsBySeason({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type UniversalTruthControllerAddUnviersalTruthToCategoryPathParams = {
  id: string
  universalTruthId: string
}

export type UniversalTruthControllerAddUnviersalTruthToCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type UniversalTruthControllerAddUnviersalTruthToCategoryVariables = {
  pathParams: UniversalTruthControllerAddUnviersalTruthToCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerAddUnviersalTruthToCategory = (
  variables: UniversalTruthControllerAddUnviersalTruthToCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    UniversalTruthControllerAddUnviersalTruthToCategoryError,
    undefined,
    {},
    {},
    UniversalTruthControllerAddUnviersalTruthToCategoryPathParams
  >({
    url: '/storyboard/universal-truth/universal-truth-category/{id}/add-universal-truth/{universalTruthId}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerAddUnviersalTruthToCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      UniversalTruthControllerAddUnviersalTruthToCategoryError,
      UniversalTruthControllerAddUnviersalTruthToCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    UniversalTruthControllerAddUnviersalTruthToCategoryError,
    UniversalTruthControllerAddUnviersalTruthToCategoryVariables
  >({
    mutationFn: (variables: UniversalTruthControllerAddUnviersalTruthToCategoryVariables) =>
      fetchUniversalTruthControllerAddUnviersalTruthToCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type UniversalTruthControllerReOrderUniversalTruthPathParams = {
  projectId: string
}

export type UniversalTruthControllerReOrderUniversalTruthError = Fetcher.ErrorWrapper<undefined>

export type UniversalTruthControllerReOrderUniversalTruthVariables = {
  body: Schemas.ReOrderUniversalTruthDto
  pathParams: UniversalTruthControllerReOrderUniversalTruthPathParams
} & ApiContext['fetcherOptions']

export const fetchUniversalTruthControllerReOrderUniversalTruth = (
  variables: UniversalTruthControllerReOrderUniversalTruthVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ReOrderUniversalTruthDto,
    UniversalTruthControllerReOrderUniversalTruthError,
    Schemas.ReOrderUniversalTruthDto,
    {},
    {},
    UniversalTruthControllerReOrderUniversalTruthPathParams
  >({
    url: '/storyboard/universal-truth/project/{projectId}/re-order',
    method: 'patch',
    ...variables,
    signal,
  })

export const useUniversalTruthControllerReOrderUniversalTruth = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.ReOrderUniversalTruthDto,
      UniversalTruthControllerReOrderUniversalTruthError,
      UniversalTruthControllerReOrderUniversalTruthVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.ReOrderUniversalTruthDto,
    UniversalTruthControllerReOrderUniversalTruthError,
    UniversalTruthControllerReOrderUniversalTruthVariables
  >({
    mutationFn: (variables: UniversalTruthControllerReOrderUniversalTruthVariables) =>
      fetchUniversalTruthControllerReOrderUniversalTruth({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type JobsControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type JobsControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type JobsControllerFindAllVariables = {
  queryParams: JobsControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchJobsControllerFindAll = (variables: JobsControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.JobListDto, JobsControllerFindAllError, undefined, {}, JobsControllerFindAllQueryParams, {}>({
    url: '/jobs',
    method: 'get',
    ...variables,
    signal,
  })

export const useJobsControllerFindAll = <TData = Schemas.JobListDto>(
  variables: JobsControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.JobListDto, JobsControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.JobListDto, JobsControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/jobs',
      operationId: 'jobsControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchJobsControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type JobsControllerCreateError = Fetcher.ErrorWrapper<undefined>

export type JobsControllerCreateVariables = {
  body?: Schemas.JobCreateDto
} & ApiContext['fetcherOptions']

export const fetchJobsControllerCreate = (variables: JobsControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<undefined, JobsControllerCreateError, Schemas.JobCreateDto, {}, {}, {}>({
    url: '/jobs',
    method: 'post',
    ...variables,
    signal,
  })

export const useJobsControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, JobsControllerCreateError, JobsControllerCreateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, JobsControllerCreateError, JobsControllerCreateVariables>({
    mutationFn: (variables: JobsControllerCreateVariables) =>
      fetchJobsControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type JobsControllerFindOnePathParams = {
  id: string
}

export type JobsControllerFindOneError = Fetcher.ErrorWrapper<undefined>

export type JobsControllerFindOneVariables = {
  pathParams: JobsControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchJobsControllerFindOne = (variables: JobsControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<undefined, JobsControllerFindOneError, undefined, {}, {}, JobsControllerFindOnePathParams>({
    url: '/jobs/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useJobsControllerFindOne = <TData = undefined>(
  variables: JobsControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, JobsControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<undefined, JobsControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/jobs/{id}',
      operationId: 'jobsControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchJobsControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type JobsControllerRemovePathParams = {
  id: string
}

export type JobsControllerRemoveError = Fetcher.ErrorWrapper<undefined>

export type JobsControllerRemoveVariables = {
  pathParams: JobsControllerRemovePathParams
} & ApiContext['fetcherOptions']

export const fetchJobsControllerRemove = (variables: JobsControllerRemoveVariables, signal?: AbortSignal) =>
  apiFetch<undefined, JobsControllerRemoveError, undefined, {}, {}, JobsControllerRemovePathParams>({
    url: '/jobs/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useJobsControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, JobsControllerRemoveError, JobsControllerRemoveVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, JobsControllerRemoveError, JobsControllerRemoveVariables>({
    mutationFn: (variables: JobsControllerRemoveVariables) =>
      fetchJobsControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type JobsControllerRemoveManyError = Fetcher.ErrorWrapper<undefined>

export type JobsControllerRemoveManyVariables = {
  body?: Schemas.JobDeleteDto
} & ApiContext['fetcherOptions']

export const fetchJobsControllerRemoveMany = (variables: JobsControllerRemoveManyVariables, signal?: AbortSignal) =>
  apiFetch<undefined, JobsControllerRemoveManyError, Schemas.JobDeleteDto, {}, {}, {}>({
    url: '/jobs/delete',
    method: 'post',
    ...variables,
    signal,
  })

export const useJobsControllerRemoveMany = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, JobsControllerRemoveManyError, JobsControllerRemoveManyVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, JobsControllerRemoveManyError, JobsControllerRemoveManyVariables>({
    mutationFn: (variables: JobsControllerRemoveManyVariables) =>
      fetchJobsControllerRemoveMany({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type JobsControllerUpdateStatusesError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type JobsControllerUpdateStatusesVariables = {
  body?: Schemas.JobStatusChangeDto
} & ApiContext['fetcherOptions']

/**
 * Updates the status for a list of jobs using their job IDs.
 */
export const fetchJobsControllerUpdateStatuses = (
  variables: JobsControllerUpdateStatusesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, JobsControllerUpdateStatusesError, Schemas.JobStatusChangeDto, {}, {}, {}>({
    url: '/jobs/change-status',
    method: 'put',
    ...variables,
    signal,
  })

/**
 * Updates the status for a list of jobs using their job IDs.
 */
export const useJobsControllerUpdateStatuses = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, JobsControllerUpdateStatusesError, JobsControllerUpdateStatusesVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, JobsControllerUpdateStatusesError, JobsControllerUpdateStatusesVariables>({
    mutationFn: (variables: JobsControllerUpdateStatusesVariables) =>
      fetchJobsControllerUpdateStatuses({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type FactorInstanceControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type FactorInstanceControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type FactorInstanceControllerFindAllVariables = {
  queryParams: FactorInstanceControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchFactorInstanceControllerFindAll = (
  variables: FactorInstanceControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorInstanceListDto,
    FactorInstanceControllerFindAllError,
    undefined,
    {},
    FactorInstanceControllerFindAllQueryParams,
    {}
  >({ url: '/factor-instance', method: 'get', ...variables, signal })

export const useFactorInstanceControllerFindAll = <TData = Schemas.FactorInstanceListDto>(
  variables: FactorInstanceControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FactorInstanceListDto, FactorInstanceControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.FactorInstanceListDto, FactorInstanceControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/factor-instance',
      operationId: 'factorInstanceControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchFactorInstanceControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type FactorInstanceControllerCreateError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type FactorInstanceControllerCreateVariables = {
  body: Schemas.CreateFactorInstanceDto
} & ApiContext['fetcherOptions']

export const fetchFactorInstanceControllerCreate = (
  variables: FactorInstanceControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.FactorInstanceDto, FactorInstanceControllerCreateError, Schemas.CreateFactorInstanceDto, {}, {}, {}>(
    { url: '/factor-instance', method: 'post', ...variables, signal },
  )

export const useFactorInstanceControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FactorInstanceDto,
      FactorInstanceControllerCreateError,
      FactorInstanceControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.FactorInstanceDto,
    FactorInstanceControllerCreateError,
    FactorInstanceControllerCreateVariables
  >({
    mutationFn: (variables: FactorInstanceControllerCreateVariables) =>
      fetchFactorInstanceControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type FactorInstanceControllerFindPrimaryInstanceQueryParams = {
  factorAbstractionId: string
  type: string
  seriesId?: string
  seasonId?: string
  episodeId?: string
  sceneId?: string
  shotId?: string
  castId?: string
  universalTruthId?: string
}

export type FactorInstanceControllerFindPrimaryInstanceError = Fetcher.ErrorWrapper<undefined>

export type FactorInstanceControllerFindPrimaryInstanceVariables = {
  queryParams: FactorInstanceControllerFindPrimaryInstanceQueryParams
} & ApiContext['fetcherOptions']

export const fetchFactorInstanceControllerFindPrimaryInstance = (
  variables: FactorInstanceControllerFindPrimaryInstanceVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorInstanceDto,
    FactorInstanceControllerFindPrimaryInstanceError,
    undefined,
    {},
    FactorInstanceControllerFindPrimaryInstanceQueryParams,
    {}
  >({ url: '/factor-instance/primary', method: 'get', ...variables, signal })

export const useFactorInstanceControllerFindPrimaryInstance = <TData = Schemas.FactorInstanceDto>(
  variables: FactorInstanceControllerFindPrimaryInstanceVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FactorInstanceDto, FactorInstanceControllerFindPrimaryInstanceError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.FactorInstanceDto, FactorInstanceControllerFindPrimaryInstanceError, TData>({
    queryKey: queryKeyFn({
      path: '/factor-instance/primary',
      operationId: 'factorInstanceControllerFindPrimaryInstance',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchFactorInstanceControllerFindPrimaryInstance({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type FactorInstanceControllerFindOnePathParams = {
  id: string
}

export type FactorInstanceControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type FactorInstanceControllerFindOneVariables = {
  pathParams: FactorInstanceControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchFactorInstanceControllerFindOne = (
  variables: FactorInstanceControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorInstanceDto,
    FactorInstanceControllerFindOneError,
    undefined,
    {},
    {},
    FactorInstanceControllerFindOnePathParams
  >({ url: '/factor-instance/{id}', method: 'get', ...variables, signal })

export const useFactorInstanceControllerFindOne = <TData = Schemas.FactorInstanceDto>(
  variables: FactorInstanceControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FactorInstanceDto, FactorInstanceControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.FactorInstanceDto, FactorInstanceControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/factor-instance/{id}',
      operationId: 'factorInstanceControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchFactorInstanceControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type FactorInstanceControllerUpdatePathParams = {
  id: string
}

export type FactorInstanceControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type FactorInstanceControllerUpdateVariables = {
  body?: Schemas.UpdateFactorInstanceDto
  pathParams: FactorInstanceControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchFactorInstanceControllerUpdate = (
  variables: FactorInstanceControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorInstanceDto,
    FactorInstanceControllerUpdateError,
    Schemas.UpdateFactorInstanceDto,
    {},
    {},
    FactorInstanceControllerUpdatePathParams
  >({ url: '/factor-instance/{id}', method: 'patch', ...variables, signal })

export const useFactorInstanceControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FactorInstanceDto,
      FactorInstanceControllerUpdateError,
      FactorInstanceControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.FactorInstanceDto,
    FactorInstanceControllerUpdateError,
    FactorInstanceControllerUpdateVariables
  >({
    mutationFn: (variables: FactorInstanceControllerUpdateVariables) =>
      fetchFactorInstanceControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type FactorInstanceControllerDeletePathParams = {
  id: string
}

export type FactorInstanceControllerDeleteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type FactorInstanceControllerDeleteVariables = {
  pathParams: FactorInstanceControllerDeletePathParams
} & ApiContext['fetcherOptions']

export const fetchFactorInstanceControllerDelete = (
  variables: FactorInstanceControllerDeleteVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, FactorInstanceControllerDeleteError, undefined, {}, {}, FactorInstanceControllerDeletePathParams>(
    { url: '/factor-instance/{id}', method: 'delete', ...variables, signal },
  )

export const useFactorInstanceControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      FactorInstanceControllerDeleteError,
      FactorInstanceControllerDeleteVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    FactorInstanceControllerDeleteError,
    FactorInstanceControllerDeleteVariables
  >({
    mutationFn: (variables: FactorInstanceControllerDeleteVariables) =>
      fetchFactorInstanceControllerDelete({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type FactorInstanceControllerSetPrimaryInstancePathParams = {
  id: string
}

export type FactorInstanceControllerSetPrimaryInstanceError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type FactorInstanceControllerSetPrimaryInstanceVariables = {
  body: Schemas.SetPrimaryFactorInstanceDto
  pathParams: FactorInstanceControllerSetPrimaryInstancePathParams
} & ApiContext['fetcherOptions']

export const fetchFactorInstanceControllerSetPrimaryInstance = (
  variables: FactorInstanceControllerSetPrimaryInstanceVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorInstanceDto,
    FactorInstanceControllerSetPrimaryInstanceError,
    Schemas.SetPrimaryFactorInstanceDto,
    {},
    {},
    FactorInstanceControllerSetPrimaryInstancePathParams
  >({
    url: '/factor-instance/{id}/set-primary',
    method: 'post',
    ...variables,
    signal,
  })

export const useFactorInstanceControllerSetPrimaryInstance = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FactorInstanceDto,
      FactorInstanceControllerSetPrimaryInstanceError,
      FactorInstanceControllerSetPrimaryInstanceVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.FactorInstanceDto,
    FactorInstanceControllerSetPrimaryInstanceError,
    FactorInstanceControllerSetPrimaryInstanceVariables
  >({
    mutationFn: (variables: FactorInstanceControllerSetPrimaryInstanceVariables) =>
      fetchFactorInstanceControllerSetPrimaryInstance({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type ScriptControllerGetPromptResponseError = Fetcher.ErrorWrapper<undefined>

export type ScriptControllerGetPromptResponseVariables = ApiContext['fetcherOptions']

export const fetchScriptControllerGetPromptResponse = (
  variables: ScriptControllerGetPromptResponseVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, ScriptControllerGetPromptResponseError, undefined, {}, {}, {}>({
    url: '/script',
    method: 'post',
    ...variables,
    signal,
  })

export const useScriptControllerGetPromptResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ScriptControllerGetPromptResponseError,
      ScriptControllerGetPromptResponseVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    ScriptControllerGetPromptResponseError,
    ScriptControllerGetPromptResponseVariables
  >({
    mutationFn: (variables: ScriptControllerGetPromptResponseVariables) =>
      fetchScriptControllerGetPromptResponse({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type ScriptControllerGetJobStatusError = Fetcher.ErrorWrapper<undefined>

export type ScriptControllerGetJobStatusVariables = ApiContext['fetcherOptions']

export const fetchScriptControllerGetJobStatus = (
  variables: ScriptControllerGetJobStatusVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, ScriptControllerGetJobStatusError, undefined, {}, {}, {}>({
    url: '/script',
    method: 'get',
    ...variables,
    signal,
  })

export const useScriptControllerGetJobStatus = <TData = undefined>(
  variables: ScriptControllerGetJobStatusVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, ScriptControllerGetJobStatusError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<undefined, ScriptControllerGetJobStatusError, TData>({
    queryKey: queryKeyFn({
      path: '/script',
      operationId: 'scriptControllerGetJobStatus',
      variables,
    }),
    queryFn: ({ signal }) => fetchScriptControllerGetJobStatus({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type ScriptControllerSetPromptToQueueError = Fetcher.ErrorWrapper<undefined>

export type ScriptControllerSetPromptToQueueVariables = {
  body?: Schemas.AddToQueue
} & ApiContext['fetcherOptions']

export const fetchScriptControllerSetPromptToQueue = (
  variables: ScriptControllerSetPromptToQueueVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, ScriptControllerSetPromptToQueueError, Schemas.AddToQueue, {}, {}, {}>({
    url: '/script/queue',
    method: 'post',
    ...variables,
    signal,
  })

export const useScriptControllerSetPromptToQueue = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ScriptControllerSetPromptToQueueError,
      ScriptControllerSetPromptToQueueVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    ScriptControllerSetPromptToQueueError,
    ScriptControllerSetPromptToQueueVariables
  >({
    mutationFn: (variables: ScriptControllerSetPromptToQueueVariables) =>
      fetchScriptControllerSetPromptToQueue({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PlaceControllerCreateError = Fetcher.ErrorWrapper<undefined>

export type PlaceControllerCreateVariables = {
  body: Schemas.CreatePlaceDto
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerCreate = (variables: PlaceControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PlaceDto, PlaceControllerCreateError, Schemas.CreatePlaceDto, {}, {}, {}>({
    url: '/api/place',
    method: 'post',
    ...variables,
    signal,
  })

export const usePlaceControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.PlaceDto, PlaceControllerCreateError, PlaceControllerCreateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.PlaceDto, PlaceControllerCreateError, PlaceControllerCreateVariables>({
    mutationFn: (variables: PlaceControllerCreateVariables) =>
      fetchPlaceControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type PlaceControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type PlaceControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type PlaceControllerFindAllVariables = {
  queryParams: PlaceControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerFindAll = (variables: PlaceControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PlaceListDto, PlaceControllerFindAllError, undefined, {}, PlaceControllerFindAllQueryParams, {}>({
    url: '/api/place',
    method: 'get',
    ...variables,
    signal,
  })

export const usePlaceControllerFindAll = <TData = Schemas.PlaceListDto>(
  variables: PlaceControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PlaceListDto, PlaceControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.PlaceListDto, PlaceControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/api/place',
      operationId: 'placeControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchPlaceControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PlaceControllerUpdatePathParams = {
  id: string
}

export type PlaceControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type PlaceControllerUpdateVariables = {
  body?: Schemas.UpdatePlaceDto
  pathParams: PlaceControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerUpdate = (variables: PlaceControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PlaceDto,
    PlaceControllerUpdateError,
    Schemas.UpdatePlaceDto,
    {},
    {},
    PlaceControllerUpdatePathParams
  >({ url: '/api/place/{id}', method: 'patch', ...variables, signal })

export const usePlaceControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.PlaceDto, PlaceControllerUpdateError, PlaceControllerUpdateVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.PlaceDto, PlaceControllerUpdateError, PlaceControllerUpdateVariables>({
    mutationFn: (variables: PlaceControllerUpdateVariables) =>
      fetchPlaceControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type PlaceControllerFindOnePathParams = {
  id: string
}

export type PlaceControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type PlaceControllerFindOneVariables = {
  pathParams: PlaceControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerFindOne = (variables: PlaceControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PlaceDto, PlaceControllerFindOneError, undefined, {}, {}, PlaceControllerFindOnePathParams>({
    url: '/api/place/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const usePlaceControllerFindOne = <TData = Schemas.PlaceDto>(
  variables: PlaceControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PlaceDto, PlaceControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.PlaceDto, PlaceControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/api/place/{id}',
      operationId: 'placeControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchPlaceControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PlaceControllerRemovePathParams = {
  id: string
}

export type PlaceControllerRemoveError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type PlaceControllerRemoveVariables = {
  pathParams: PlaceControllerRemovePathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerRemove = (variables: PlaceControllerRemoveVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PlaceDto, PlaceControllerRemoveError, undefined, {}, {}, PlaceControllerRemovePathParams>({
    url: '/api/place/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const usePlaceControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.PlaceDto, PlaceControllerRemoveError, PlaceControllerRemoveVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.PlaceDto, PlaceControllerRemoveError, PlaceControllerRemoveVariables>({
    mutationFn: (variables: PlaceControllerRemoveVariables) =>
      fetchPlaceControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type PlaceControllerGetAllQueueQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type PlaceControllerGetAllQueueError = Fetcher.ErrorWrapper<undefined>

export type PlaceControllerGetAllQueueVariables = {
  queryParams: PlaceControllerGetAllQueueQueryParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerGetAllQueue = (variables: PlaceControllerGetAllQueueVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.PlaceListQueueDto,
    PlaceControllerGetAllQueueError,
    undefined,
    {},
    PlaceControllerGetAllQueueQueryParams,
    {}
  >({ url: '/api/place/queue', method: 'get', ...variables, signal })

export const usePlaceControllerGetAllQueue = <TData = Schemas.PlaceListQueueDto>(
  variables: PlaceControllerGetAllQueueVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PlaceListQueueDto, PlaceControllerGetAllQueueError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.PlaceListQueueDto, PlaceControllerGetAllQueueError, TData>({
    queryKey: queryKeyFn({
      path: '/api/place/queue',
      operationId: 'placeControllerGetAllQueue',
      variables,
    }),
    queryFn: ({ signal }) => fetchPlaceControllerGetAllQueue({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PlaceControllerPublishPathParams = {
  id: string
}

export type PlaceControllerPublishError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type PlaceControllerPublishVariables = {
  pathParams: PlaceControllerPublishPathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerPublish = (variables: PlaceControllerPublishVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.PlaceDto, PlaceControllerPublishError, undefined, {}, {}, PlaceControllerPublishPathParams>({
    url: '/api/place/{id}/publish',
    method: 'patch',
    ...variables,
    signal,
  })

export const usePlaceControllerPublish = (
  options?: Omit<
    reactQuery.UseMutationOptions<Schemas.PlaceDto, PlaceControllerPublishError, PlaceControllerPublishVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<Schemas.PlaceDto, PlaceControllerPublishError, PlaceControllerPublishVariables>({
    mutationFn: (variables: PlaceControllerPublishVariables) =>
      fetchPlaceControllerPublish({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type PlaceControllerCreatePlaceCategoryError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type PlaceControllerCreatePlaceCategoryVariables = {
  body: Schemas.CreatePlaceCategoryDto
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerCreatePlaceCategory = (
  variables: PlaceControllerCreatePlaceCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PlaceCategoryDto,
    PlaceControllerCreatePlaceCategoryError,
    Schemas.CreatePlaceCategoryDto,
    {},
    {},
    {}
  >({ url: '/api/place-category', method: 'post', ...variables, signal })

export const usePlaceControllerCreatePlaceCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PlaceCategoryDto,
      PlaceControllerCreatePlaceCategoryError,
      PlaceControllerCreatePlaceCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.PlaceCategoryDto,
    PlaceControllerCreatePlaceCategoryError,
    PlaceControllerCreatePlaceCategoryVariables
  >({
    mutationFn: (variables: PlaceControllerCreatePlaceCategoryVariables) =>
      fetchPlaceControllerCreatePlaceCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PlaceControllerFindAllPlaceCategoryQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type PlaceControllerFindAllPlaceCategoryError = Fetcher.ErrorWrapper<undefined>

export type PlaceControllerFindAllPlaceCategoryVariables = {
  queryParams: PlaceControllerFindAllPlaceCategoryQueryParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerFindAllPlaceCategory = (
  variables: PlaceControllerFindAllPlaceCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PlaceCategoryListDto,
    PlaceControllerFindAllPlaceCategoryError,
    undefined,
    {},
    PlaceControllerFindAllPlaceCategoryQueryParams,
    {}
  >({ url: '/api/place-category', method: 'get', ...variables, signal })

export const usePlaceControllerFindAllPlaceCategory = <TData = Schemas.PlaceCategoryListDto>(
  variables: PlaceControllerFindAllPlaceCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PlaceCategoryListDto, PlaceControllerFindAllPlaceCategoryError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.PlaceCategoryListDto, PlaceControllerFindAllPlaceCategoryError, TData>({
    queryKey: queryKeyFn({
      path: '/api/place-category',
      operationId: 'placeControllerFindAllPlaceCategory',
      variables,
    }),
    queryFn: ({ signal }) => fetchPlaceControllerFindAllPlaceCategory({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PlaceControllerUpdatePlaceCategoryPathParams = {
  id: string
}

export type PlaceControllerUpdatePlaceCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type PlaceControllerUpdatePlaceCategoryVariables = {
  body: Schemas.UpdatePlaceCategoryDto
  pathParams: PlaceControllerUpdatePlaceCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerUpdatePlaceCategory = (
  variables: PlaceControllerUpdatePlaceCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PlaceCategoryDto,
    PlaceControllerUpdatePlaceCategoryError,
    Schemas.UpdatePlaceCategoryDto,
    {},
    {},
    PlaceControllerUpdatePlaceCategoryPathParams
  >({ url: '/api/place-category/{id}', method: 'patch', ...variables, signal })

export const usePlaceControllerUpdatePlaceCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PlaceCategoryDto,
      PlaceControllerUpdatePlaceCategoryError,
      PlaceControllerUpdatePlaceCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.PlaceCategoryDto,
    PlaceControllerUpdatePlaceCategoryError,
    PlaceControllerUpdatePlaceCategoryVariables
  >({
    mutationFn: (variables: PlaceControllerUpdatePlaceCategoryVariables) =>
      fetchPlaceControllerUpdatePlaceCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PlaceControllerFindOnePlaceCategoryPathParams = {
  id: string
}

export type PlaceControllerFindOnePlaceCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type PlaceControllerFindOnePlaceCategoryVariables = {
  pathParams: PlaceControllerFindOnePlaceCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerFindOnePlaceCategory = (
  variables: PlaceControllerFindOnePlaceCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PlaceCategoryDto,
    PlaceControllerFindOnePlaceCategoryError,
    undefined,
    {},
    {},
    PlaceControllerFindOnePlaceCategoryPathParams
  >({ url: '/api/place-category/{id}', method: 'get', ...variables, signal })

export const usePlaceControllerFindOnePlaceCategory = <TData = Schemas.PlaceCategoryDto>(
  variables: PlaceControllerFindOnePlaceCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PlaceCategoryDto, PlaceControllerFindOnePlaceCategoryError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.PlaceCategoryDto, PlaceControllerFindOnePlaceCategoryError, TData>({
    queryKey: queryKeyFn({
      path: '/api/place-category/{id}',
      operationId: 'placeControllerFindOnePlaceCategory',
      variables,
    }),
    queryFn: ({ signal }) => fetchPlaceControllerFindOnePlaceCategory({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PlaceControllerRemovePlaceCategoryPathParams = {
  id: string
}

export type PlaceControllerRemovePlaceCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type PlaceControllerRemovePlaceCategoryVariables = {
  pathParams: PlaceControllerRemovePlaceCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerRemovePlaceCategory = (
  variables: PlaceControllerRemovePlaceCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PlaceDto,
    PlaceControllerRemovePlaceCategoryError,
    undefined,
    {},
    {},
    PlaceControllerRemovePlaceCategoryPathParams
  >({
    url: '/api/place-category/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const usePlaceControllerRemovePlaceCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.PlaceDto,
      PlaceControllerRemovePlaceCategoryError,
      PlaceControllerRemovePlaceCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.PlaceDto,
    PlaceControllerRemovePlaceCategoryError,
    PlaceControllerRemovePlaceCategoryVariables
  >({
    mutationFn: (variables: PlaceControllerRemovePlaceCategoryVariables) =>
      fetchPlaceControllerRemovePlaceCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PlaceControllerFindAllPlacesByCategoryPathParams = {
  id: string
}

export type PlaceControllerFindAllPlacesByCategoryQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type PlaceControllerFindAllPlacesByCategoryError = Fetcher.ErrorWrapper<undefined>

export type PlaceControllerFindAllPlacesByCategoryVariables = {
  pathParams: PlaceControllerFindAllPlacesByCategoryPathParams
  queryParams: PlaceControllerFindAllPlacesByCategoryQueryParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerFindAllPlacesByCategory = (
  variables: PlaceControllerFindAllPlacesByCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PlaceCategoryPlaceListDto,
    PlaceControllerFindAllPlacesByCategoryError,
    undefined,
    {},
    PlaceControllerFindAllPlacesByCategoryQueryParams,
    PlaceControllerFindAllPlacesByCategoryPathParams
  >({
    url: '/api/place-category/{id}/places',
    method: 'get',
    ...variables,
    signal,
  })

export const usePlaceControllerFindAllPlacesByCategory = <TData = Schemas.PlaceCategoryPlaceListDto>(
  variables: PlaceControllerFindAllPlacesByCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PlaceCategoryPlaceListDto, PlaceControllerFindAllPlacesByCategoryError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.PlaceCategoryPlaceListDto, PlaceControllerFindAllPlacesByCategoryError, TData>({
    queryKey: queryKeyFn({
      path: '/api/place-category/{id}/places',
      operationId: 'placeControllerFindAllPlacesByCategory',
      variables,
    }),
    queryFn: ({ signal }) => fetchPlaceControllerFindAllPlacesByCategory({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PlaceControllerAddPlaceToCategoryPathParams = {
  id: string
  placeId: string
}

export type PlaceControllerAddPlaceToCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type PlaceControllerAddPlaceToCategoryVariables = {
  pathParams: PlaceControllerAddPlaceToCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerAddPlaceToCategory = (
  variables: PlaceControllerAddPlaceToCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    PlaceControllerAddPlaceToCategoryError,
    undefined,
    {},
    {},
    PlaceControllerAddPlaceToCategoryPathParams
  >({
    url: '/api/place-category/{id}/add-place/{placeId}',
    method: 'patch',
    ...variables,
    signal,
  })

export const usePlaceControllerAddPlaceToCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PlaceControllerAddPlaceToCategoryError,
      PlaceControllerAddPlaceToCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    PlaceControllerAddPlaceToCategoryError,
    PlaceControllerAddPlaceToCategoryVariables
  >({
    mutationFn: (variables: PlaceControllerAddPlaceToCategoryVariables) =>
      fetchPlaceControllerAddPlaceToCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PlaceControllerGeneratePlaceImagePathParams = {
  id: string
}

export type PlaceControllerGeneratePlaceImageError = Fetcher.ErrorWrapper<
  | {
      status: 400
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
>

export type PlaceControllerGeneratePlaceImageVariables = {
  pathParams: PlaceControllerGeneratePlaceImagePathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerGeneratePlaceImage = (
  variables: PlaceControllerGeneratePlaceImageVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    PlaceControllerGeneratePlaceImageError,
    undefined,
    {},
    {},
    PlaceControllerGeneratePlaceImagePathParams
  >({
    url: '/api/place/{id}/generate-image',
    method: 'post',
    ...variables,
    signal,
  })

export const usePlaceControllerGeneratePlaceImage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PlaceControllerGeneratePlaceImageError,
      PlaceControllerGeneratePlaceImageVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    PlaceControllerGeneratePlaceImageError,
    PlaceControllerGeneratePlaceImageVariables
  >({
    mutationFn: (variables: PlaceControllerGeneratePlaceImageVariables) =>
      fetchPlaceControllerGeneratePlaceImage({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PlaceControllerSetPrimaryImagePathParams = {
  id: string
  imageId: string
}

export type PlaceControllerSetPrimaryImageError = Fetcher.ErrorWrapper<
  | {
      status: 404
      payload: Schemas.GenericErrorDto
    }
  | {
      status: 500
      payload: Schemas.GenericErrorDto
    }
>

export type PlaceControllerSetPrimaryImageVariables = {
  pathParams: PlaceControllerSetPrimaryImagePathParams
} & ApiContext['fetcherOptions']

export const fetchPlaceControllerSetPrimaryImage = (
  variables: PlaceControllerSetPrimaryImageVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, PlaceControllerSetPrimaryImageError, undefined, {}, {}, PlaceControllerSetPrimaryImagePathParams>(
    {
      url: '/api/place/{id}/set-primary/{imageId}',
      method: 'post',
      ...variables,
      signal,
    },
  )

export const usePlaceControllerSetPrimaryImage = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PlaceControllerSetPrimaryImageError,
      PlaceControllerSetPrimaryImageVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    PlaceControllerSetPrimaryImageError,
    PlaceControllerSetPrimaryImageVariables
  >({
    mutationFn: (variables: PlaceControllerSetPrimaryImageVariables) =>
      fetchPlaceControllerSetPrimaryImage({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CharacterControllerCreateError = Fetcher.ErrorWrapper<undefined>

export type CharacterControllerCreateVariables = {
  body: Schemas.CreateCharacterDto
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerCreate = (variables: CharacterControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.CharacterDto, CharacterControllerCreateError, Schemas.CreateCharacterDto, {}, {}, {}>({
    url: '/api/character',
    method: 'post',
    ...variables,
    signal,
  })

export const useCharacterControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CharacterDto,
      CharacterControllerCreateError,
      CharacterControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.CharacterDto,
    CharacterControllerCreateError,
    CharacterControllerCreateVariables
  >({
    mutationFn: (variables: CharacterControllerCreateVariables) =>
      fetchCharacterControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CharacterControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type CharacterControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type CharacterControllerFindAllVariables = {
  queryParams: CharacterControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerFindAll = (variables: CharacterControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.CharacterListDto,
    CharacterControllerFindAllError,
    undefined,
    {},
    CharacterControllerFindAllQueryParams,
    {}
  >({ url: '/api/character', method: 'get', ...variables, signal })

export const useCharacterControllerFindAll = <TData = Schemas.CharacterListDto>(
  variables: CharacterControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CharacterListDto, CharacterControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CharacterListDto, CharacterControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/api/character',
      operationId: 'characterControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchCharacterControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CharacterControllerUpdatePathParams = {
  id: string
}

export type CharacterControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CharacterControllerUpdateVariables = {
  body?: Schemas.UpdateCharacterDto
  pathParams: CharacterControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerUpdate = (variables: CharacterControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.CharacterDto,
    CharacterControllerUpdateError,
    Schemas.UpdateCharacterDto,
    {},
    {},
    CharacterControllerUpdatePathParams
  >({ url: '/api/character/{id}', method: 'patch', ...variables, signal })

export const useCharacterControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CharacterDto,
      CharacterControllerUpdateError,
      CharacterControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.CharacterDto,
    CharacterControllerUpdateError,
    CharacterControllerUpdateVariables
  >({
    mutationFn: (variables: CharacterControllerUpdateVariables) =>
      fetchCharacterControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CharacterControllerFindOnePathParams = {
  id: string
}

export type CharacterControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CharacterControllerFindOneVariables = {
  pathParams: CharacterControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerFindOne = (variables: CharacterControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.CharacterDto,
    CharacterControllerFindOneError,
    undefined,
    {},
    {},
    CharacterControllerFindOnePathParams
  >({ url: '/api/character/{id}', method: 'get', ...variables, signal })

export const useCharacterControllerFindOne = <TData = Schemas.CharacterDto>(
  variables: CharacterControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CharacterDto, CharacterControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CharacterDto, CharacterControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/api/character/{id}',
      operationId: 'characterControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchCharacterControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CharacterControllerRemovePathParams = {
  id: string
}

export type CharacterControllerRemoveError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CharacterControllerRemoveVariables = {
  pathParams: CharacterControllerRemovePathParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerRemove = (variables: CharacterControllerRemoveVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.CharacterDto,
    CharacterControllerRemoveError,
    undefined,
    {},
    {},
    CharacterControllerRemovePathParams
  >({ url: '/api/character/{id}', method: 'delete', ...variables, signal })

export const useCharacterControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CharacterDto,
      CharacterControllerRemoveError,
      CharacterControllerRemoveVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.CharacterDto,
    CharacterControllerRemoveError,
    CharacterControllerRemoveVariables
  >({
    mutationFn: (variables: CharacterControllerRemoveVariables) =>
      fetchCharacterControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CharacterControllerFindAllCharactersQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
  episodeId?: string
  projectId?: string
  seasonId?: string
}

export type CharacterControllerFindAllCharactersError = Fetcher.ErrorWrapper<undefined>

export type CharacterControllerFindAllCharactersVariables = {
  queryParams: CharacterControllerFindAllCharactersQueryParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerFindAllCharacters = (
  variables: CharacterControllerFindAllCharactersVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CharacterListResponseDto,
    CharacterControllerFindAllCharactersError,
    undefined,
    {},
    CharacterControllerFindAllCharactersQueryParams,
    {}
  >({ url: '/api/getAllCharacters', method: 'get', ...variables, signal })

export const useCharacterControllerFindAllCharacters = <TData = Schemas.CharacterListResponseDto>(
  variables: CharacterControllerFindAllCharactersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CharacterListResponseDto, CharacterControllerFindAllCharactersError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CharacterListResponseDto, CharacterControllerFindAllCharactersError, TData>({
    queryKey: queryKeyFn({
      path: '/api/getAllCharacters',
      operationId: 'characterControllerFindAllCharacters',
      variables,
    }),
    queryFn: ({ signal }) => fetchCharacterControllerFindAllCharacters({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CharacterControllerPublishPathParams = {
  id: string
}

export type CharacterControllerPublishError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CharacterControllerPublishVariables = {
  pathParams: CharacterControllerPublishPathParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerPublish = (variables: CharacterControllerPublishVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.CharacterDto,
    CharacterControllerPublishError,
    undefined,
    {},
    {},
    CharacterControllerPublishPathParams
  >({
    url: '/api/character/{id}/publish',
    method: 'patch',
    ...variables,
    signal,
  })

export const useCharacterControllerPublish = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CharacterDto,
      CharacterControllerPublishError,
      CharacterControllerPublishVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.CharacterDto,
    CharacterControllerPublishError,
    CharacterControllerPublishVariables
  >({
    mutationFn: (variables: CharacterControllerPublishVariables) =>
      fetchCharacterControllerPublish({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type CharacterControllerCreateCharacterCategoryError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type CharacterControllerCreateCharacterCategoryVariables = {
  body: Schemas.CreateCharacterCategoryDto
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerCreateCharacterCategory = (
  variables: CharacterControllerCreateCharacterCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CharacterCategoryDto,
    CharacterControllerCreateCharacterCategoryError,
    Schemas.CreateCharacterCategoryDto,
    {},
    {},
    {}
  >({ url: '/api/character-category', method: 'post', ...variables, signal })

export const useCharacterControllerCreateCharacterCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CharacterCategoryDto,
      CharacterControllerCreateCharacterCategoryError,
      CharacterControllerCreateCharacterCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.CharacterCategoryDto,
    CharacterControllerCreateCharacterCategoryError,
    CharacterControllerCreateCharacterCategoryVariables
  >({
    mutationFn: (variables: CharacterControllerCreateCharacterCategoryVariables) =>
      fetchCharacterControllerCreateCharacterCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type CharacterControllerFindAllCharacterCategoryQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type CharacterControllerFindAllCharacterCategoryError = Fetcher.ErrorWrapper<undefined>

export type CharacterControllerFindAllCharacterCategoryVariables = {
  queryParams: CharacterControllerFindAllCharacterCategoryQueryParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerFindAllCharacterCategory = (
  variables: CharacterControllerFindAllCharacterCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CharacterCategoryListDto,
    CharacterControllerFindAllCharacterCategoryError,
    undefined,
    {},
    CharacterControllerFindAllCharacterCategoryQueryParams,
    {}
  >({ url: '/api/character-category', method: 'get', ...variables, signal })

export const useCharacterControllerFindAllCharacterCategory = <TData = Schemas.CharacterCategoryListDto>(
  variables: CharacterControllerFindAllCharacterCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CharacterCategoryListDto,
      CharacterControllerFindAllCharacterCategoryError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CharacterCategoryListDto, CharacterControllerFindAllCharacterCategoryError, TData>(
    {
      queryKey: queryKeyFn({
        path: '/api/character-category',
        operationId: 'characterControllerFindAllCharacterCategory',
        variables,
      }),
      queryFn: ({ signal }) =>
        fetchCharacterControllerFindAllCharacterCategory({ ...fetcherOptions, ...variables }, signal),
      ...options,
      ...queryOptions,
    },
  )
}

export type CharacterControllerUpdateCharacterCategoryPathParams = {
  id: string
}

export type CharacterControllerUpdateCharacterCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CharacterControllerUpdateCharacterCategoryVariables = {
  body: Schemas.UpdateCharacterCategoryDto
  pathParams: CharacterControllerUpdateCharacterCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerUpdateCharacterCategory = (
  variables: CharacterControllerUpdateCharacterCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CharacterCategoryDto,
    CharacterControllerUpdateCharacterCategoryError,
    Schemas.UpdateCharacterCategoryDto,
    {},
    {},
    CharacterControllerUpdateCharacterCategoryPathParams
  >({
    url: '/api/character-category/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useCharacterControllerUpdateCharacterCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CharacterCategoryDto,
      CharacterControllerUpdateCharacterCategoryError,
      CharacterControllerUpdateCharacterCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.CharacterCategoryDto,
    CharacterControllerUpdateCharacterCategoryError,
    CharacterControllerUpdateCharacterCategoryVariables
  >({
    mutationFn: (variables: CharacterControllerUpdateCharacterCategoryVariables) =>
      fetchCharacterControllerUpdateCharacterCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type CharacterControllerFindOneCharacterCategoryPathParams = {
  id: string
}

export type CharacterControllerFindOneCharacterCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CharacterControllerFindOneCharacterCategoryVariables = {
  pathParams: CharacterControllerFindOneCharacterCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerFindOneCharacterCategory = (
  variables: CharacterControllerFindOneCharacterCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CharacterCategoryDto,
    CharacterControllerFindOneCharacterCategoryError,
    undefined,
    {},
    {},
    CharacterControllerFindOneCharacterCategoryPathParams
  >({
    url: '/api/character-category/{id}',
    method: 'get',
    ...variables,
    signal,
  })

export const useCharacterControllerFindOneCharacterCategory = <TData = Schemas.CharacterCategoryDto>(
  variables: CharacterControllerFindOneCharacterCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CharacterCategoryDto, CharacterControllerFindOneCharacterCategoryError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CharacterCategoryDto, CharacterControllerFindOneCharacterCategoryError, TData>({
    queryKey: queryKeyFn({
      path: '/api/character-category/{id}',
      operationId: 'characterControllerFindOneCharacterCategory',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchCharacterControllerFindOneCharacterCategory({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CharacterControllerRemoveCharacterCategoryPathParams = {
  id: string
}

export type CharacterControllerRemoveCharacterCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CharacterControllerRemoveCharacterCategoryVariables = {
  pathParams: CharacterControllerRemoveCharacterCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerRemoveCharacterCategory = (
  variables: CharacterControllerRemoveCharacterCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CharacterDto,
    CharacterControllerRemoveCharacterCategoryError,
    undefined,
    {},
    {},
    CharacterControllerRemoveCharacterCategoryPathParams
  >({
    url: '/api/character-category/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useCharacterControllerRemoveCharacterCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CharacterDto,
      CharacterControllerRemoveCharacterCategoryError,
      CharacterControllerRemoveCharacterCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.CharacterDto,
    CharacterControllerRemoveCharacterCategoryError,
    CharacterControllerRemoveCharacterCategoryVariables
  >({
    mutationFn: (variables: CharacterControllerRemoveCharacterCategoryVariables) =>
      fetchCharacterControllerRemoveCharacterCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type CharacterControllerFindAllCharactersByCategoryPathParams = {
  id: string
}

export type CharacterControllerFindAllCharactersByCategoryQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type CharacterControllerFindAllCharactersByCategoryError = Fetcher.ErrorWrapper<undefined>

export type CharacterControllerFindAllCharactersByCategoryVariables = {
  pathParams: CharacterControllerFindAllCharactersByCategoryPathParams
  queryParams: CharacterControllerFindAllCharactersByCategoryQueryParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerFindAllCharactersByCategory = (
  variables: CharacterControllerFindAllCharactersByCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CharacterCategoryCharacterListDto,
    CharacterControllerFindAllCharactersByCategoryError,
    undefined,
    {},
    CharacterControllerFindAllCharactersByCategoryQueryParams,
    CharacterControllerFindAllCharactersByCategoryPathParams
  >({
    url: '/api/character-category/{id}/characters',
    method: 'get',
    ...variables,
    signal,
  })

export const useCharacterControllerFindAllCharactersByCategory = <TData = Schemas.CharacterCategoryCharacterListDto>(
  variables: CharacterControllerFindAllCharactersByCategoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.CharacterCategoryCharacterListDto,
      CharacterControllerFindAllCharactersByCategoryError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.CharacterCategoryCharacterListDto,
    CharacterControllerFindAllCharactersByCategoryError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/api/character-category/{id}/characters',
      operationId: 'characterControllerFindAllCharactersByCategory',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchCharacterControllerFindAllCharactersByCategory({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type CharacterControllerAddCharacterToCategoryPathParams = {
  id: string
  characterId: string
}

export type CharacterControllerAddCharacterToCategoryError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type CharacterControllerAddCharacterToCategoryVariables = {
  pathParams: CharacterControllerAddCharacterToCategoryPathParams
} & ApiContext['fetcherOptions']

export const fetchCharacterControllerAddCharacterToCategory = (
  variables: CharacterControllerAddCharacterToCategoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    CharacterControllerAddCharacterToCategoryError,
    undefined,
    {},
    {},
    CharacterControllerAddCharacterToCategoryPathParams
  >({
    url: '/api/character-category/{id}/add-character/{characterId}',
    method: 'patch',
    ...variables,
    signal,
  })

export const useCharacterControllerAddCharacterToCategory = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      CharacterControllerAddCharacterToCategoryError,
      CharacterControllerAddCharacterToCategoryVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    CharacterControllerAddCharacterToCategoryError,
    CharacterControllerAddCharacterToCategoryVariables
  >({
    mutationFn: (variables: CharacterControllerAddCharacterToCategoryVariables) =>
      fetchCharacterControllerAddCharacterToCategory({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type FactorAbstractionControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type FactorAbstractionControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type FactorAbstractionControllerFindAllVariables = {
  queryParams: FactorAbstractionControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchFactorAbstractionControllerFindAll = (
  variables: FactorAbstractionControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorAbstractionListDto,
    FactorAbstractionControllerFindAllError,
    undefined,
    {},
    FactorAbstractionControllerFindAllQueryParams,
    {}
  >({ url: '/factorAbstractions', method: 'get', ...variables, signal })

export const useFactorAbstractionControllerFindAll = <TData = Schemas.FactorAbstractionListDto>(
  variables: FactorAbstractionControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FactorAbstractionListDto, FactorAbstractionControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.FactorAbstractionListDto, FactorAbstractionControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/factorAbstractions',
      operationId: 'factorAbstractionControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchFactorAbstractionControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type FactorAbstractionControllerCreateError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type FactorAbstractionControllerCreateVariables = {
  body: Schemas.CreateFactorAbstractionDto
} & ApiContext['fetcherOptions']

export const fetchFactorAbstractionControllerCreate = (
  variables: FactorAbstractionControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorAbstractionDto,
    FactorAbstractionControllerCreateError,
    Schemas.CreateFactorAbstractionDto,
    {},
    {},
    {}
  >({ url: '/factorAbstractions', method: 'post', ...variables, signal })

export const useFactorAbstractionControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FactorAbstractionDto,
      FactorAbstractionControllerCreateError,
      FactorAbstractionControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.FactorAbstractionDto,
    FactorAbstractionControllerCreateError,
    FactorAbstractionControllerCreateVariables
  >({
    mutationFn: (variables: FactorAbstractionControllerCreateVariables) =>
      fetchFactorAbstractionControllerCreate({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type FactorAbstractionControllerFindOnePathParams = {
  id: string
}

export type FactorAbstractionControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type FactorAbstractionControllerFindOneVariables = {
  pathParams: FactorAbstractionControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchFactorAbstractionControllerFindOne = (
  variables: FactorAbstractionControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorAbstractionDto,
    FactorAbstractionControllerFindOneError,
    undefined,
    {},
    {},
    FactorAbstractionControllerFindOnePathParams
  >({ url: '/factorAbstractions/{id}', method: 'get', ...variables, signal })

export const useFactorAbstractionControllerFindOne = <TData = Schemas.FactorAbstractionDto>(
  variables: FactorAbstractionControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.FactorAbstractionDto, FactorAbstractionControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.FactorAbstractionDto, FactorAbstractionControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/factorAbstractions/{id}',
      operationId: 'factorAbstractionControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchFactorAbstractionControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type FactorAbstractionControllerUpdatePathParams = {
  id: string
}

export type FactorAbstractionControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type FactorAbstractionControllerUpdateVariables = {
  body?: Schemas.UpdateFactorAbstractionDto
  pathParams: FactorAbstractionControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchFactorAbstractionControllerUpdate = (
  variables: FactorAbstractionControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorAbstractionDto,
    FactorAbstractionControllerUpdateError,
    Schemas.UpdateFactorAbstractionDto,
    {},
    {},
    FactorAbstractionControllerUpdatePathParams
  >({ url: '/factorAbstractions/{id}', method: 'patch', ...variables, signal })

export const useFactorAbstractionControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FactorAbstractionDto,
      FactorAbstractionControllerUpdateError,
      FactorAbstractionControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.FactorAbstractionDto,
    FactorAbstractionControllerUpdateError,
    FactorAbstractionControllerUpdateVariables
  >({
    mutationFn: (variables: FactorAbstractionControllerUpdateVariables) =>
      fetchFactorAbstractionControllerUpdate({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type FactorAbstractionControllerDeletePathParams = {
  id: string
}

export type FactorAbstractionControllerDeleteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type FactorAbstractionControllerDeleteVariables = {
  pathParams: FactorAbstractionControllerDeletePathParams
} & ApiContext['fetcherOptions']

export const fetchFactorAbstractionControllerDelete = (
  variables: FactorAbstractionControllerDeleteVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    FactorAbstractionControllerDeleteError,
    undefined,
    {},
    {},
    FactorAbstractionControllerDeletePathParams
  >({
    url: '/factorAbstractions/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useFactorAbstractionControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      FactorAbstractionControllerDeleteError,
      FactorAbstractionControllerDeleteVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    FactorAbstractionControllerDeleteError,
    FactorAbstractionControllerDeleteVariables
  >({
    mutationFn: (variables: FactorAbstractionControllerDeleteVariables) =>
      fetchFactorAbstractionControllerDelete({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsPathParams = {
  id: string
}

export type FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsError = Fetcher.ErrorWrapper<undefined>

export type FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsVariables = {
  pathParams: FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsPathParams
  queryParams: FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsQueryParams
} & ApiContext['fetcherOptions']

export const fetchFactorAbstractionControllerFindAllFactorAbstractionPriorDependents = (
  variables: FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorAbstractionDependentListDto,
    FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsError,
    undefined,
    {},
    FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsQueryParams,
    FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsPathParams
  >({
    url: '/factorAbstractions/{id}/prior-dependents',
    method: 'get',
    ...variables,
    signal,
  })

export const useFactorAbstractionControllerFindAllFactorAbstractionPriorDependents = <
  TData = Schemas.FactorAbstractionDependentListDto,
>(
  variables: FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.FactorAbstractionDependentListDto,
      FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.FactorAbstractionDependentListDto,
    FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/factorAbstractions/{id}/prior-dependents',
      operationId: 'factorAbstractionControllerFindAllFactorAbstractionPriorDependents',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchFactorAbstractionControllerFindAllFactorAbstractionPriorDependents(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  })
}

export type FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsPathParams = {
  id: string
}

export type FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsError = Fetcher.ErrorWrapper<undefined>

export type FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsVariables = {
  pathParams: FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsPathParams
  queryParams: FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsQueryParams
} & ApiContext['fetcherOptions']

export const fetchFactorAbstractionControllerFindAllFactorAbstractionAfterDependents = (
  variables: FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorAbstractionDependentListDto,
    FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsError,
    undefined,
    {},
    FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsQueryParams,
    FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsPathParams
  >({
    url: '/factorAbstractions/{id}/after-dependents',
    method: 'get',
    ...variables,
    signal,
  })

export const useFactorAbstractionControllerFindAllFactorAbstractionAfterDependents = <
  TData = Schemas.FactorAbstractionDependentListDto,
>(
  variables: FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.FactorAbstractionDependentListDto,
      FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<
    Schemas.FactorAbstractionDependentListDto,
    FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/factorAbstractions/{id}/after-dependents',
      operationId: 'factorAbstractionControllerFindAllFactorAbstractionAfterDependents',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchFactorAbstractionControllerFindAllFactorAbstractionAfterDependents(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  })
}

export type FactorAbstractionControllerAddFactorAbstractionDependentPathParams = {
  id: string
}

export type FactorAbstractionControllerAddFactorAbstractionDependentError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type FactorAbstractionControllerAddFactorAbstractionDependentVariables = {
  body?: Schemas.AddFactorAbstractionDependentDto
  pathParams: FactorAbstractionControllerAddFactorAbstractionDependentPathParams
} & ApiContext['fetcherOptions']

export const fetchFactorAbstractionControllerAddFactorAbstractionDependent = (
  variables: FactorAbstractionControllerAddFactorAbstractionDependentVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.FactorAbstractionDependentDto,
    FactorAbstractionControllerAddFactorAbstractionDependentError,
    Schemas.AddFactorAbstractionDependentDto,
    {},
    {},
    FactorAbstractionControllerAddFactorAbstractionDependentPathParams
  >({
    url: '/factorAbstractions/{id}/dependent',
    method: 'post',
    ...variables,
    signal,
  })

export const useFactorAbstractionControllerAddFactorAbstractionDependent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.FactorAbstractionDependentDto,
      FactorAbstractionControllerAddFactorAbstractionDependentError,
      FactorAbstractionControllerAddFactorAbstractionDependentVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.FactorAbstractionDependentDto,
    FactorAbstractionControllerAddFactorAbstractionDependentError,
    FactorAbstractionControllerAddFactorAbstractionDependentVariables
  >({
    mutationFn: (variables: FactorAbstractionControllerAddFactorAbstractionDependentVariables) =>
      fetchFactorAbstractionControllerAddFactorAbstractionDependent({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type FactorAbstractionControllerRemoveFactorAbstractionDependentPathParams = {
  id: string
}

export type FactorAbstractionControllerRemoveFactorAbstractionDependentError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type FactorAbstractionControllerRemoveFactorAbstractionDependentVariables = {
  pathParams: FactorAbstractionControllerRemoveFactorAbstractionDependentPathParams
} & ApiContext['fetcherOptions']

export const fetchFactorAbstractionControllerRemoveFactorAbstractionDependent = (
  variables: FactorAbstractionControllerRemoveFactorAbstractionDependentVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    FactorAbstractionControllerRemoveFactorAbstractionDependentError,
    undefined,
    {},
    {},
    FactorAbstractionControllerRemoveFactorAbstractionDependentPathParams
  >({
    url: '/factorAbstractions/{id}/dependent',
    method: 'delete',
    ...variables,
    signal,
  })

export const useFactorAbstractionControllerRemoveFactorAbstractionDependent = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      FactorAbstractionControllerRemoveFactorAbstractionDependentError,
      FactorAbstractionControllerRemoveFactorAbstractionDependentVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    FactorAbstractionControllerRemoveFactorAbstractionDependentError,
    FactorAbstractionControllerRemoveFactorAbstractionDependentVariables
  >({
    mutationFn: (variables: FactorAbstractionControllerRemoveFactorAbstractionDependentVariables) =>
      fetchFactorAbstractionControllerRemoveFactorAbstractionDependent({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PipelineControllerCreatePipelineError = Fetcher.ErrorWrapper<undefined>

export type PipelineControllerCreatePipelineVariables = {
  body: Schemas.CreatePipelineDto
} & ApiContext['fetcherOptions']

export const fetchPipelineControllerCreatePipeline = (
  variables: PipelineControllerCreatePipelineVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.CreatePipelineDto, PipelineControllerCreatePipelineError, Schemas.CreatePipelineDto, {}, {}, {}>({
    url: '/pipelines',
    method: 'post',
    ...variables,
    signal,
  })

export const usePipelineControllerCreatePipeline = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CreatePipelineDto,
      PipelineControllerCreatePipelineError,
      PipelineControllerCreatePipelineVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.CreatePipelineDto,
    PipelineControllerCreatePipelineError,
    PipelineControllerCreatePipelineVariables
  >({
    mutationFn: (variables: PipelineControllerCreatePipelineVariables) =>
      fetchPipelineControllerCreatePipeline({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PipelineControllerFindAllPipeLinesQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type PipelineControllerFindAllPipeLinesError = Fetcher.ErrorWrapper<undefined>

export type PipelineControllerFindAllPipeLinesVariables = {
  queryParams: PipelineControllerFindAllPipeLinesQueryParams
} & ApiContext['fetcherOptions']

export const fetchPipelineControllerFindAllPipeLines = (
  variables: PipelineControllerFindAllPipeLinesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PipelineListDto,
    PipelineControllerFindAllPipeLinesError,
    undefined,
    {},
    PipelineControllerFindAllPipeLinesQueryParams,
    {}
  >({ url: '/pipelines', method: 'get', ...variables, signal })

export const usePipelineControllerFindAllPipeLines = <TData = Schemas.PipelineListDto>(
  variables: PipelineControllerFindAllPipeLinesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PipelineListDto, PipelineControllerFindAllPipeLinesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.PipelineListDto, PipelineControllerFindAllPipeLinesError, TData>({
    queryKey: queryKeyFn({
      path: '/pipelines',
      operationId: 'pipelineControllerFindAllPipeLines',
      variables,
    }),
    queryFn: ({ signal }) => fetchPipelineControllerFindAllPipeLines({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PipelineControllerCreateAssemblyError = Fetcher.ErrorWrapper<undefined>

export type PipelineControllerCreateAssemblyVariables = {
  body: Schemas.CreateAssemblyDto
} & ApiContext['fetcherOptions']

export const fetchPipelineControllerCreateAssembly = (
  variables: PipelineControllerCreateAssemblyVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.CreateAssemblyDto, PipelineControllerCreateAssemblyError, Schemas.CreateAssemblyDto, {}, {}, {}>({
    url: '/pipelines/assemblies',
    method: 'post',
    ...variables,
    signal,
  })

export const usePipelineControllerCreateAssembly = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CreateAssemblyDto,
      PipelineControllerCreateAssemblyError,
      PipelineControllerCreateAssemblyVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.CreateAssemblyDto,
    PipelineControllerCreateAssemblyError,
    PipelineControllerCreateAssemblyVariables
  >({
    mutationFn: (variables: PipelineControllerCreateAssemblyVariables) =>
      fetchPipelineControllerCreateAssembly({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PipelineControllerFindAllAssembliesQueryParams = {
  limit?: void
  page?: void
}

export type PipelineControllerFindAllAssembliesError = Fetcher.ErrorWrapper<undefined>

export type PipelineControllerFindAllAssembliesVariables = {
  queryParams?: PipelineControllerFindAllAssembliesQueryParams
} & ApiContext['fetcherOptions']

export const fetchPipelineControllerFindAllAssemblies = (
  variables: PipelineControllerFindAllAssembliesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Pagination,
    PipelineControllerFindAllAssembliesError,
    undefined,
    {},
    PipelineControllerFindAllAssembliesQueryParams,
    {}
  >({ url: '/pipelines/assemblies', method: 'get', ...variables, signal })

export const usePipelineControllerFindAllAssemblies = <TData = Schemas.Pagination>(
  variables: PipelineControllerFindAllAssembliesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Pagination, PipelineControllerFindAllAssembliesError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.Pagination, PipelineControllerFindAllAssembliesError, TData>({
    queryKey: queryKeyFn({
      path: '/pipelines/assemblies',
      operationId: 'pipelineControllerFindAllAssemblies',
      variables,
    }),
    queryFn: ({ signal }) => fetchPipelineControllerFindAllAssemblies({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PipelineControllerFindOnePipelinePathParams = {
  id: string
}

export type PipelineControllerFindOnePipelineError = Fetcher.ErrorWrapper<undefined>

export type PipelineControllerFindOnePipelineVariables = {
  pathParams: PipelineControllerFindOnePipelinePathParams
} & ApiContext['fetcherOptions']

export const fetchPipelineControllerFindOnePipeline = (
  variables: PipelineControllerFindOnePipelineVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PipelineDto,
    PipelineControllerFindOnePipelineError,
    undefined,
    {},
    {},
    PipelineControllerFindOnePipelinePathParams
  >({ url: '/pipelines/{id}', method: 'get', ...variables, signal })

export const usePipelineControllerFindOnePipeline = <TData = Schemas.PipelineDto>(
  variables: PipelineControllerFindOnePipelineVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PipelineDto, PipelineControllerFindOnePipelineError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.PipelineDto, PipelineControllerFindOnePipelineError, TData>({
    queryKey: queryKeyFn({
      path: '/pipelines/{id}',
      operationId: 'pipelineControllerFindOnePipeline',
      variables,
    }),
    queryFn: ({ signal }) => fetchPipelineControllerFindOnePipeline({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type PipelineControllerUpdatePipelinePathParams = {
  id: string
}

export type PipelineControllerUpdatePipelineError = Fetcher.ErrorWrapper<undefined>

export type PipelineControllerUpdatePipelineVariables = {
  body?: Schemas.UpdatePipelineDto
  pathParams: PipelineControllerUpdatePipelinePathParams
} & ApiContext['fetcherOptions']

export const fetchPipelineControllerUpdatePipeline = (
  variables: PipelineControllerUpdatePipelineVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    PipelineControllerUpdatePipelineError,
    Schemas.UpdatePipelineDto,
    {},
    {},
    PipelineControllerUpdatePipelinePathParams
  >({ url: '/pipelines/{id}', method: 'patch', ...variables, signal })

export const usePipelineControllerUpdatePipeline = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PipelineControllerUpdatePipelineError,
      PipelineControllerUpdatePipelineVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    PipelineControllerUpdatePipelineError,
    PipelineControllerUpdatePipelineVariables
  >({
    mutationFn: (variables: PipelineControllerUpdatePipelineVariables) =>
      fetchPipelineControllerUpdatePipeline({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PipelineControllerDeletePipelinePathParams = {
  id: string
}

export type PipelineControllerDeletePipelineError = Fetcher.ErrorWrapper<undefined>

export type PipelineControllerDeletePipelineVariables = {
  pathParams: PipelineControllerDeletePipelinePathParams
} & ApiContext['fetcherOptions']

export const fetchPipelineControllerDeletePipeline = (
  variables: PipelineControllerDeletePipelineVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    PipelineControllerDeletePipelineError,
    undefined,
    {},
    {},
    PipelineControllerDeletePipelinePathParams
  >({ url: '/pipelines/{id}', method: 'delete', ...variables, signal })

export const usePipelineControllerDeletePipeline = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PipelineControllerDeletePipelineError,
      PipelineControllerDeletePipelineVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    PipelineControllerDeletePipelineError,
    PipelineControllerDeletePipelineVariables
  >({
    mutationFn: (variables: PipelineControllerDeletePipelineVariables) =>
      fetchPipelineControllerDeletePipeline({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PipelineControllerUpdateAssemblyPathParams = {
  id: string
}

export type PipelineControllerUpdateAssemblyError = Fetcher.ErrorWrapper<undefined>

export type PipelineControllerUpdateAssemblyVariables = {
  body?: Schemas.UpdateAssemblyDto
  pathParams: PipelineControllerUpdateAssemblyPathParams
} & ApiContext['fetcherOptions']

export const fetchPipelineControllerUpdateAssembly = (
  variables: PipelineControllerUpdateAssemblyVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    PipelineControllerUpdateAssemblyError,
    Schemas.UpdateAssemblyDto,
    {},
    {},
    PipelineControllerUpdateAssemblyPathParams
  >({
    url: '/pipelines/assemblies/{id}',
    method: 'patch',
    ...variables,
    signal,
  })

export const usePipelineControllerUpdateAssembly = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PipelineControllerUpdateAssemblyError,
      PipelineControllerUpdateAssemblyVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    PipelineControllerUpdateAssemblyError,
    PipelineControllerUpdateAssemblyVariables
  >({
    mutationFn: (variables: PipelineControllerUpdateAssemblyVariables) =>
      fetchPipelineControllerUpdateAssembly({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type PipelineControllerDeleteAssemblyPathParams = {
  id: string
}

export type PipelineControllerDeleteAssemblyError = Fetcher.ErrorWrapper<undefined>

export type PipelineControllerDeleteAssemblyVariables = {
  pathParams: PipelineControllerDeleteAssemblyPathParams
} & ApiContext['fetcherOptions']

export const fetchPipelineControllerDeleteAssembly = (
  variables: PipelineControllerDeleteAssemblyVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    PipelineControllerDeleteAssemblyError,
    undefined,
    {},
    {},
    PipelineControllerDeleteAssemblyPathParams
  >({
    url: '/pipelines/assemblies/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const usePipelineControllerDeleteAssembly = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PipelineControllerDeleteAssemblyError,
      PipelineControllerDeleteAssemblyVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    PipelineControllerDeleteAssemblyError,
    PipelineControllerDeleteAssemblyVariables
  >({
    mutationFn: (variables: PipelineControllerDeleteAssemblyVariables) =>
      fetchPipelineControllerDeleteAssembly({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  })
}

export type VisualsYamlControllerFindAllPathParams = {
  episodeId: string
}

export type VisualsYamlControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type VisualsYamlControllerFindAllVariables = {
  pathParams: VisualsYamlControllerFindAllPathParams
} & ApiContext['fetcherOptions']

export const fetchVisualsYamlControllerFindAll = (
  variables: VisualsYamlControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.VisualsYamlListDto,
    VisualsYamlControllerFindAllError,
    undefined,
    {},
    {},
    VisualsYamlControllerFindAllPathParams
  >({ url: '/visuals-yaml/{episodeId}', method: 'get', ...variables, signal })

export const useVisualsYamlControllerFindAll = <TData = Schemas.VisualsYamlListDto>(
  variables: VisualsYamlControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.VisualsYamlListDto, VisualsYamlControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.VisualsYamlListDto, VisualsYamlControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/visuals-yaml/{episodeId}',
      operationId: 'visualsYamlControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchVisualsYamlControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VisualsYamlControllerFindOneCharacterYAMLPathParams = {
  characterId: string
}

export type VisualsYamlControllerFindOneCharacterYAMLError = Fetcher.ErrorWrapper<undefined>

export type VisualsYamlControllerFindOneCharacterYAMLVariables = {
  pathParams: VisualsYamlControllerFindOneCharacterYAMLPathParams
} & ApiContext['fetcherOptions']

export const fetchVisualsYamlControllerFindOneCharacterYAML = (
  variables: VisualsYamlControllerFindOneCharacterYAMLVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CharacterDto,
    VisualsYamlControllerFindOneCharacterYAMLError,
    undefined,
    {},
    {},
    VisualsYamlControllerFindOneCharacterYAMLPathParams
  >({
    url: '/visuals-yaml/character/{characterId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useVisualsYamlControllerFindOneCharacterYAML = <TData = Schemas.CharacterDto>(
  variables: VisualsYamlControllerFindOneCharacterYAMLVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CharacterDto, VisualsYamlControllerFindOneCharacterYAMLError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CharacterDto, VisualsYamlControllerFindOneCharacterYAMLError, TData>({
    queryKey: queryKeyFn({
      path: '/visuals-yaml/character/{characterId}',
      operationId: 'visualsYamlControllerFindOneCharacterYAML',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchVisualsYamlControllerFindOneCharacterYAML({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VisualsYamlControllerFindAllPlaceYAMLPathParams = {
  placeId: string
}

export type VisualsYamlControllerFindAllPlaceYAMLError = Fetcher.ErrorWrapper<undefined>

export type VisualsYamlControllerFindAllPlaceYAMLVariables = {
  pathParams: VisualsYamlControllerFindAllPlaceYAMLPathParams
} & ApiContext['fetcherOptions']

export const fetchVisualsYamlControllerFindAllPlaceYAML = (
  variables: VisualsYamlControllerFindAllPlaceYAMLVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.PlaceDto,
    VisualsYamlControllerFindAllPlaceYAMLError,
    undefined,
    {},
    {},
    VisualsYamlControllerFindAllPlaceYAMLPathParams
  >({
    url: '/visuals-yaml/place/{placeId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useVisualsYamlControllerFindAllPlaceYAML = <TData = Schemas.PlaceDto>(
  variables: VisualsYamlControllerFindAllPlaceYAMLVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.PlaceDto, VisualsYamlControllerFindAllPlaceYAMLError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.PlaceDto, VisualsYamlControllerFindAllPlaceYAMLError, TData>({
    queryKey: queryKeyFn({
      path: '/visuals-yaml/place/{placeId}',
      operationId: 'visualsYamlControllerFindAllPlaceYAML',
      variables,
    }),
    queryFn: ({ signal }) => fetchVisualsYamlControllerFindAllPlaceYAML({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VisualsYamlControllerFindAllSceneYAMLPathParams = {
  sceneId: string
}

export type VisualsYamlControllerFindAllSceneYAMLError = Fetcher.ErrorWrapper<undefined>

export type VisualsYamlControllerFindAllSceneYAMLVariables = {
  pathParams: VisualsYamlControllerFindAllSceneYAMLPathParams
} & ApiContext['fetcherOptions']

export const fetchVisualsYamlControllerFindAllSceneYAML = (
  variables: VisualsYamlControllerFindAllSceneYAMLVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SceneDto,
    VisualsYamlControllerFindAllSceneYAMLError,
    undefined,
    {},
    {},
    VisualsYamlControllerFindAllSceneYAMLPathParams
  >({
    url: '/visuals-yaml/scene/{sceneId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useVisualsYamlControllerFindAllSceneYAML = <TData = Schemas.SceneDto>(
  variables: VisualsYamlControllerFindAllSceneYAMLVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SceneDto, VisualsYamlControllerFindAllSceneYAMLError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SceneDto, VisualsYamlControllerFindAllSceneYAMLError, TData>({
    queryKey: queryKeyFn({
      path: '/visuals-yaml/scene/{sceneId}',
      operationId: 'visualsYamlControllerFindAllSceneYAML',
      variables,
    }),
    queryFn: ({ signal }) => fetchVisualsYamlControllerFindAllSceneYAML({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VisualsYamlControllerFindAllShotYAMLPathParams = {
  shotId: string
}

export type VisualsYamlControllerFindAllShotYAMLError = Fetcher.ErrorWrapper<undefined>

export type VisualsYamlControllerFindAllShotYAMLVariables = {
  pathParams: VisualsYamlControllerFindAllShotYAMLPathParams
} & ApiContext['fetcherOptions']

export const fetchVisualsYamlControllerFindAllShotYAML = (
  variables: VisualsYamlControllerFindAllShotYAMLVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.ShotDto,
    VisualsYamlControllerFindAllShotYAMLError,
    undefined,
    {},
    {},
    VisualsYamlControllerFindAllShotYAMLPathParams
  >({
    url: '/visuals-yaml/shot/{shotId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useVisualsYamlControllerFindAllShotYAML = <TData = Schemas.ShotDto>(
  variables: VisualsYamlControllerFindAllShotYAMLVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.ShotDto, VisualsYamlControllerFindAllShotYAMLError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.ShotDto, VisualsYamlControllerFindAllShotYAMLError, TData>({
    queryKey: queryKeyFn({
      path: '/visuals-yaml/shot/{shotId}',
      operationId: 'visualsYamlControllerFindAllShotYAML',
      variables,
    }),
    queryFn: ({ signal }) => fetchVisualsYamlControllerFindAllShotYAML({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VisualsYamlControllerFindAllShotCharacterYAMLPathParams = {
  shotId: string
}

export type VisualsYamlControllerFindAllShotCharacterYAMLError = Fetcher.ErrorWrapper<undefined>

export type VisualsYamlControllerFindAllShotCharacterYAMLVariables = {
  pathParams: VisualsYamlControllerFindAllShotCharacterYAMLPathParams
} & ApiContext['fetcherOptions']

export const fetchVisualsYamlControllerFindAllShotCharacterYAML = (
  variables: VisualsYamlControllerFindAllShotCharacterYAMLVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.CharacterDto,
    VisualsYamlControllerFindAllShotCharacterYAMLError,
    undefined,
    {},
    {},
    VisualsYamlControllerFindAllShotCharacterYAMLPathParams
  >({
    url: '/visuals-yaml/shot-character/{shotId}',
    method: 'get',
    ...variables,
    signal,
  })

export const useVisualsYamlControllerFindAllShotCharacterYAML = <TData = Schemas.CharacterDto>(
  variables: VisualsYamlControllerFindAllShotCharacterYAMLVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.CharacterDto, VisualsYamlControllerFindAllShotCharacterYAMLError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.CharacterDto, VisualsYamlControllerFindAllShotCharacterYAMLError, TData>({
    queryKey: queryKeyFn({
      path: '/visuals-yaml/shot-character/{shotId}',
      operationId: 'visualsYamlControllerFindAllShotCharacterYAML',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchVisualsYamlControllerFindAllShotCharacterYAML({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SceneTemplateControllerCreateError = Fetcher.ErrorWrapper<{
  status: 409
  payload: Schemas.GenericErrorDto
}>

export type SceneTemplateControllerCreateVariables = {
  body: Schemas.CreateSceneTemplateDto
} & ApiContext['fetcherOptions']

export const fetchSceneTemplateControllerCreate = (
  variables: SceneTemplateControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.SceneTemplateDto, SceneTemplateControllerCreateError, Schemas.CreateSceneTemplateDto, {}, {}, {}>({
    url: '/scene-template',
    method: 'post',
    ...variables,
    signal,
  })

export const useSceneTemplateControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SceneTemplateDto,
      SceneTemplateControllerCreateError,
      SceneTemplateControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.SceneTemplateDto,
    SceneTemplateControllerCreateError,
    SceneTemplateControllerCreateVariables
  >({
    mutationFn: (variables: SceneTemplateControllerCreateVariables) =>
      fetchSceneTemplateControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SceneTemplateControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type SceneTemplateControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type SceneTemplateControllerFindAllVariables = {
  queryParams: SceneTemplateControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchSceneTemplateControllerFindAll = (
  variables: SceneTemplateControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SceneTemplateListDto,
    SceneTemplateControllerFindAllError,
    undefined,
    {},
    SceneTemplateControllerFindAllQueryParams,
    {}
  >({ url: '/scene-template', method: 'get', ...variables, signal })

export const useSceneTemplateControllerFindAll = <TData = Schemas.SceneTemplateListDto>(
  variables: SceneTemplateControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SceneTemplateListDto, SceneTemplateControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SceneTemplateListDto, SceneTemplateControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/scene-template',
      operationId: 'sceneTemplateControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchSceneTemplateControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SceneTemplateControllerFindOnePathParams = {
  id: string
}

export type SceneTemplateControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SceneTemplateControllerFindOneVariables = {
  pathParams: SceneTemplateControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchSceneTemplateControllerFindOne = (
  variables: SceneTemplateControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SceneTemplateDto,
    SceneTemplateControllerFindOneError,
    undefined,
    {},
    {},
    SceneTemplateControllerFindOnePathParams
  >({ url: '/scene-template/{id}', method: 'get', ...variables, signal })

export const useSceneTemplateControllerFindOne = <TData = Schemas.SceneTemplateDto>(
  variables: SceneTemplateControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.SceneTemplateDto, SceneTemplateControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.SceneTemplateDto, SceneTemplateControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/scene-template/{id}',
      operationId: 'sceneTemplateControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchSceneTemplateControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type SceneTemplateControllerUpdatePathParams = {
  id: string
}

export type SceneTemplateControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SceneTemplateControllerUpdateVariables = {
  body?: Schemas.UpdateSceneTemplateDto
  pathParams: SceneTemplateControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchSceneTemplateControllerUpdate = (
  variables: SceneTemplateControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SceneTemplateDto,
    SceneTemplateControllerUpdateError,
    Schemas.UpdateSceneTemplateDto,
    {},
    {},
    SceneTemplateControllerUpdatePathParams
  >({ url: '/scene-template/{id}', method: 'patch', ...variables, signal })

export const useSceneTemplateControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SceneTemplateDto,
      SceneTemplateControllerUpdateError,
      SceneTemplateControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.SceneTemplateDto,
    SceneTemplateControllerUpdateError,
    SceneTemplateControllerUpdateVariables
  >({
    mutationFn: (variables: SceneTemplateControllerUpdateVariables) =>
      fetchSceneTemplateControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type SceneTemplateControllerRemovePathParams = {
  id: string
}

export type SceneTemplateControllerRemoveError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type SceneTemplateControllerRemoveVariables = {
  pathParams: SceneTemplateControllerRemovePathParams
} & ApiContext['fetcherOptions']

export const fetchSceneTemplateControllerRemove = (
  variables: SceneTemplateControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, SceneTemplateControllerRemoveError, undefined, {}, {}, SceneTemplateControllerRemovePathParams>({
    url: '/scene-template/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useSceneTemplateControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      SceneTemplateControllerRemoveError,
      SceneTemplateControllerRemoveVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, SceneTemplateControllerRemoveError, SceneTemplateControllerRemoveVariables>({
    mutationFn: (variables: SceneTemplateControllerRemoveVariables) =>
      fetchSceneTemplateControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type VariablesControllerQueryQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type VariablesControllerQueryError = Fetcher.ErrorWrapper<undefined>

export type VariablesControllerQueryVariables = {
  queryParams: VariablesControllerQueryQueryParams
} & ApiContext['fetcherOptions']

export const fetchVariablesControllerQuery = (variables: VariablesControllerQueryVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.VariableListDto,
    VariablesControllerQueryError,
    undefined,
    {},
    VariablesControllerQueryQueryParams,
    {}
  >({ url: '/variable', method: 'get', ...variables, signal })

export const useVariablesControllerQuery = <TData = Schemas.VariableListDto>(
  variables: VariablesControllerQueryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.VariableListDto, VariablesControllerQueryError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.VariableListDto, VariablesControllerQueryError, TData>({
    queryKey: queryKeyFn({
      path: '/variable',
      operationId: 'variablesControllerQuery',
      variables,
    }),
    queryFn: ({ signal }) => fetchVariablesControllerQuery({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VariablesControllerCreateError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type VariablesControllerCreateVariables = {
  body: Schemas.VariableCreateDto
} & ApiContext['fetcherOptions']

export const fetchVariablesControllerCreate = (variables: VariablesControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.VariableDto, VariablesControllerCreateError, Schemas.VariableCreateDto, {}, {}, {}>({
    url: '/variable',
    method: 'post',
    ...variables,
    signal,
  })

export const useVariablesControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.VariableDto,
      VariablesControllerCreateError,
      VariablesControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.VariableDto,
    VariablesControllerCreateError,
    VariablesControllerCreateVariables
  >({
    mutationFn: (variables: VariablesControllerCreateVariables) =>
      fetchVariablesControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type VariablesControllerFindOnePathParams = {
  id: string
}

export type VariablesControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type VariablesControllerFindOneVariables = {
  pathParams: VariablesControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchVariablesControllerFindOne = (variables: VariablesControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.VariableDto,
    VariablesControllerFindOneError,
    undefined,
    {},
    {},
    VariablesControllerFindOnePathParams
  >({ url: '/variable/{id}', method: 'get', ...variables, signal })

export const useVariablesControllerFindOne = <TData = Schemas.VariableDto>(
  variables: VariablesControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.VariableDto, VariablesControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.VariableDto, VariablesControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/variable/{id}',
      operationId: 'variablesControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchVariablesControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VariablesControllerUpdatePathParams = {
  id: string
}

export type VariablesControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type VariablesControllerUpdateVariables = {
  body?: Schemas.VariableUpdateDto
  pathParams: VariablesControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchVariablesControllerUpdate = (variables: VariablesControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.VariableDto,
    VariablesControllerUpdateError,
    Schemas.VariableUpdateDto,
    {},
    {},
    VariablesControllerUpdatePathParams
  >({ url: '/variable/{id}', method: 'patch', ...variables, signal })

export const useVariablesControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.VariableDto,
      VariablesControllerUpdateError,
      VariablesControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.VariableDto,
    VariablesControllerUpdateError,
    VariablesControllerUpdateVariables
  >({
    mutationFn: (variables: VariablesControllerUpdateVariables) =>
      fetchVariablesControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type VariablesControllerDeletePathParams = {
  id: string
}

export type VariablesControllerDeleteError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type VariablesControllerDeleteVariables = {
  pathParams: VariablesControllerDeletePathParams
} & ApiContext['fetcherOptions']

export const fetchVariablesControllerDelete = (variables: VariablesControllerDeleteVariables, signal?: AbortSignal) =>
  apiFetch<undefined, VariablesControllerDeleteError, undefined, {}, {}, VariablesControllerDeletePathParams>({
    url: '/variable/{id}',
    method: 'delete',
    ...variables,
    signal,
  })

export const useVariablesControllerDelete = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, VariablesControllerDeleteError, VariablesControllerDeleteVariables>,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<undefined, VariablesControllerDeleteError, VariablesControllerDeleteVariables>({
    mutationFn: (variables: VariablesControllerDeleteVariables) =>
      fetchVariablesControllerDelete({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MonikerControllerFindAllMonikersQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type MonikerControllerFindAllMonikersError = Fetcher.ErrorWrapper<undefined>

export type MonikerControllerFindAllMonikersVariables = {
  queryParams: MonikerControllerFindAllMonikersQueryParams
} & ApiContext['fetcherOptions']

export const fetchMonikerControllerFindAllMonikers = (
  variables: MonikerControllerFindAllMonikersVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.MonikerListDto,
    MonikerControllerFindAllMonikersError,
    undefined,
    {},
    MonikerControllerFindAllMonikersQueryParams,
    {}
  >({ url: '/moniker', method: 'get', ...variables, signal })

export const useMonikerControllerFindAllMonikers = <TData = Schemas.MonikerListDto>(
  variables: MonikerControllerFindAllMonikersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MonikerListDto, MonikerControllerFindAllMonikersError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.MonikerListDto, MonikerControllerFindAllMonikersError, TData>({
    queryKey: queryKeyFn({
      path: '/moniker',
      operationId: 'monikerControllerFindAllMonikers',
      variables,
    }),
    queryFn: ({ signal }) => fetchMonikerControllerFindAllMonikers({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MonikerControllerCreateMonikerError = Fetcher.ErrorWrapper<{
  status: 500
  payload: Schemas.GenericErrorDto
}>

export type MonikerControllerCreateMonikerVariables = {
  body: Schemas.CreateMonikerDto
} & ApiContext['fetcherOptions']

export const fetchMonikerControllerCreateMoniker = (
  variables: MonikerControllerCreateMonikerVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.MonikerDto, MonikerControllerCreateMonikerError, Schemas.CreateMonikerDto, {}, {}, {}>({
    url: '/moniker',
    method: 'post',
    ...variables,
    signal,
  })

export const useMonikerControllerCreateMoniker = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MonikerDto,
      MonikerControllerCreateMonikerError,
      MonikerControllerCreateMonikerVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.MonikerDto,
    MonikerControllerCreateMonikerError,
    MonikerControllerCreateMonikerVariables
  >({
    mutationFn: (variables: MonikerControllerCreateMonikerVariables) =>
      fetchMonikerControllerCreateMoniker({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MonikerControllerFindOneMonikerPathParams = {
  id: string
}

export type MonikerControllerFindOneMonikerError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type MonikerControllerFindOneMonikerVariables = {
  pathParams: MonikerControllerFindOneMonikerPathParams
} & ApiContext['fetcherOptions']

export const fetchMonikerControllerFindOneMoniker = (
  variables: MonikerControllerFindOneMonikerVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.MonikerDto,
    MonikerControllerFindOneMonikerError,
    undefined,
    {},
    {},
    MonikerControllerFindOneMonikerPathParams
  >({ url: '/moniker/{id}', method: 'get', ...variables, signal })

export const useMonikerControllerFindOneMoniker = <TData = Schemas.MonikerDto>(
  variables: MonikerControllerFindOneMonikerVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.MonikerDto, MonikerControllerFindOneMonikerError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.MonikerDto, MonikerControllerFindOneMonikerError, TData>({
    queryKey: queryKeyFn({
      path: '/moniker/{id}',
      operationId: 'monikerControllerFindOneMoniker',
      variables,
    }),
    queryFn: ({ signal }) => fetchMonikerControllerFindOneMoniker({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type MonikerControllerUpdateMonikerPathParams = {
  id: string
}

export type MonikerControllerUpdateMonikerError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type MonikerControllerUpdateMonikerVariables = {
  body?: Schemas.UpdateMonikerDto
  pathParams: MonikerControllerUpdateMonikerPathParams
} & ApiContext['fetcherOptions']

export const fetchMonikerControllerUpdateMoniker = (
  variables: MonikerControllerUpdateMonikerVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.MonikerDto,
    MonikerControllerUpdateMonikerError,
    Schemas.UpdateMonikerDto,
    {},
    {},
    MonikerControllerUpdateMonikerPathParams
  >({ url: '/moniker/{id}', method: 'patch', ...variables, signal })

export const useMonikerControllerUpdateMoniker = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MonikerDto,
      MonikerControllerUpdateMonikerError,
      MonikerControllerUpdateMonikerVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.MonikerDto,
    MonikerControllerUpdateMonikerError,
    MonikerControllerUpdateMonikerVariables
  >({
    mutationFn: (variables: MonikerControllerUpdateMonikerVariables) =>
      fetchMonikerControllerUpdateMoniker({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type MonikerControllerDeleteMonikerPathParams = {
  id: string
}

export type MonikerControllerDeleteMonikerError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type MonikerControllerDeleteMonikerVariables = {
  pathParams: MonikerControllerDeleteMonikerPathParams
} & ApiContext['fetcherOptions']

export const fetchMonikerControllerDeleteMoniker = (
  variables: MonikerControllerDeleteMonikerVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, MonikerControllerDeleteMonikerError, undefined, {}, {}, MonikerControllerDeleteMonikerPathParams>(
    { url: '/moniker/{id}', method: 'delete', ...variables, signal },
  )

export const useMonikerControllerDeleteMoniker = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      MonikerControllerDeleteMonikerError,
      MonikerControllerDeleteMonikerVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    undefined,
    MonikerControllerDeleteMonikerError,
    MonikerControllerDeleteMonikerVariables
  >({
    mutationFn: (variables: MonikerControllerDeleteMonikerVariables) =>
      fetchMonikerControllerDeleteMoniker({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type VideoClipControllerCreateError = Fetcher.ErrorWrapper<undefined>

export type VideoClipControllerCreateVariables = {
  body: Schemas.CreateVideoClipDto
} & ApiContext['fetcherOptions']

export const fetchVideoClipControllerCreate = (variables: VideoClipControllerCreateVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.VideoClipDto, VideoClipControllerCreateError, Schemas.CreateVideoClipDto, {}, {}, {}>({
    url: '/api/video-clip',
    method: 'post',
    ...variables,
    signal,
  })

export const useVideoClipControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.VideoClipDto,
      VideoClipControllerCreateError,
      VideoClipControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.VideoClipDto,
    VideoClipControllerCreateError,
    VideoClipControllerCreateVariables
  >({
    mutationFn: (variables: VideoClipControllerCreateVariables) =>
      fetchVideoClipControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type VideoClipControllerFindAllQueryParams = {
  pagination: Schemas.Pagination
  sorting?: Schemas.Sorting[]
  search?: string
  filter?: Schemas.Filter
}

export type VideoClipControllerFindAllError = Fetcher.ErrorWrapper<undefined>

export type VideoClipControllerFindAllVariables = {
  queryParams: VideoClipControllerFindAllQueryParams
} & ApiContext['fetcherOptions']

export const fetchVideoClipControllerFindAll = (variables: VideoClipControllerFindAllVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.VideoClipListDto,
    VideoClipControllerFindAllError,
    undefined,
    {},
    VideoClipControllerFindAllQueryParams,
    {}
  >({ url: '/api/video-clip', method: 'get', ...variables, signal })

export const useVideoClipControllerFindAll = <TData = Schemas.VideoClipListDto>(
  variables: VideoClipControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.VideoClipListDto, VideoClipControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.VideoClipListDto, VideoClipControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/api/video-clip',
      operationId: 'videoClipControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) => fetchVideoClipControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VideoClipControllerUpdatePathParams = {
  id: string
}

export type VideoClipControllerUpdateError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type VideoClipControllerUpdateVariables = {
  body?: Schemas.UpdateVideoClipDto
  pathParams: VideoClipControllerUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchVideoClipControllerUpdate = (variables: VideoClipControllerUpdateVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.VideoClipDto,
    VideoClipControllerUpdateError,
    Schemas.UpdateVideoClipDto,
    {},
    {},
    VideoClipControllerUpdatePathParams
  >({ url: '/api/video-clip/{id}', method: 'patch', ...variables, signal })

export const useVideoClipControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.VideoClipDto,
      VideoClipControllerUpdateError,
      VideoClipControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.VideoClipDto,
    VideoClipControllerUpdateError,
    VideoClipControllerUpdateVariables
  >({
    mutationFn: (variables: VideoClipControllerUpdateVariables) =>
      fetchVideoClipControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type VideoClipControllerFindOnePathParams = {
  id: string
}

export type VideoClipControllerFindOneError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type VideoClipControllerFindOneVariables = {
  pathParams: VideoClipControllerFindOnePathParams
} & ApiContext['fetcherOptions']

export const fetchVideoClipControllerFindOne = (variables: VideoClipControllerFindOneVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.VideoClipDto,
    VideoClipControllerFindOneError,
    undefined,
    {},
    {},
    VideoClipControllerFindOnePathParams
  >({ url: '/api/video-clip/{id}', method: 'get', ...variables, signal })

export const useVideoClipControllerFindOne = <TData = Schemas.VideoClipDto>(
  variables: VideoClipControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.VideoClipDto, VideoClipControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
  return reactQuery.useQuery<Schemas.VideoClipDto, VideoClipControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/api/video-clip/{id}',
      operationId: 'videoClipControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) => fetchVideoClipControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  })
}

export type VideoClipControllerRemovePathParams = {
  id: string
}

export type VideoClipControllerRemoveError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type VideoClipControllerRemoveVariables = {
  pathParams: VideoClipControllerRemovePathParams
} & ApiContext['fetcherOptions']

export const fetchVideoClipControllerRemove = (variables: VideoClipControllerRemoveVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.VideoClipDto,
    VideoClipControllerRemoveError,
    undefined,
    {},
    {},
    VideoClipControllerRemovePathParams
  >({ url: '/api/video-clip/{id}', method: 'delete', ...variables, signal })

export const useVideoClipControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.VideoClipDto,
      VideoClipControllerRemoveError,
      VideoClipControllerRemoveVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.VideoClipDto,
    VideoClipControllerRemoveError,
    VideoClipControllerRemoveVariables
  >({
    mutationFn: (variables: VideoClipControllerRemoveVariables) =>
      fetchVideoClipControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type VideoClipControllerPublishPathParams = {
  id: string
}

export type VideoClipControllerPublishError = Fetcher.ErrorWrapper<{
  status: 404
  payload: Schemas.GenericErrorDto
}>

export type VideoClipControllerPublishVariables = {
  pathParams: VideoClipControllerPublishPathParams
} & ApiContext['fetcherOptions']

export const fetchVideoClipControllerPublish = (variables: VideoClipControllerPublishVariables, signal?: AbortSignal) =>
  apiFetch<
    Schemas.VideoClipDto,
    VideoClipControllerPublishError,
    undefined,
    {},
    {},
    VideoClipControllerPublishPathParams
  >({
    url: '/api/video-clip/{id}/publish',
    method: 'patch',
    ...variables,
    signal,
  })

export const useVideoClipControllerPublish = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.VideoClipDto,
      VideoClipControllerPublishError,
      VideoClipControllerPublishVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext()
  return reactQuery.useMutation<
    Schemas.VideoClipDto,
    VideoClipControllerPublishError,
    VideoClipControllerPublishVariables
  >({
    mutationFn: (variables: VideoClipControllerPublishVariables) =>
      fetchVideoClipControllerPublish({ ...fetcherOptions, ...variables }),
    ...options,
  })
}

export type QueryOperation =
  | {
      path: '/healthcheck'
      operationId: 'appControllerHealthCheck'
      variables: AppControllerHealthCheckVariables
    }
  | {
      path: '/user/me'
      operationId: 'userControllerMe'
      variables: UserControllerMeVariables
    }
  | {
      path: '/user'
      operationId: 'userControllerFindAll'
      variables: UserControllerFindAllVariables
    }
  | {
      path: '/user/{id}'
      operationId: 'userControllerFindOne'
      variables: UserControllerFindOneVariables
    }
  | {
      path: '/api/tenant'
      operationId: 'tenantControllerFindAll'
      variables: TenantControllerFindAllVariables
    }
  | {
      path: '/api/tenant/{slug}'
      operationId: 'tenantControllerFindOne'
      variables: TenantControllerFindOneVariables
    }
  | {
      path: '/api/tenant/invitation/{token}'
      operationId: 'tenantControllerGetInvitationDetail'
      variables: TenantControllerGetInvitationDetailVariables
    }
  | {
      path: '/api/tenant/{idOrSlug}/users'
      operationId: 'tenantControllerFindAllTenantUsers'
      variables: TenantControllerFindAllTenantUsersVariables
    }
  | {
      path: '/api/tenant/{idOrSlug}/user-invitations'
      operationId: 'tenantControllerFindAllTenantInvitedUsers'
      variables: TenantControllerFindAllTenantInvitedUsersVariables
    }
  | {
      path: '/assembly-stages'
      operationId: 'assemblyStageControllerGetAssemblyStages'
      variables: AssemblyStageControllerGetAssemblyStagesVariables
    }
  | {
      path: '/assembly-stages/{slug}'
      operationId: 'assemblyStageControllerGetAssemblyStage'
      variables: AssemblyStageControllerGetAssemblyStageVariables
    }
  | {
      path: '/assembly-group'
      operationId: 'assemblyGroupControllerFindAll'
      variables: AssemblyGroupControllerFindAllVariables
    }
  | {
      path: '/assembly-group/{id}'
      operationId: 'assemblyGroupControllerFindOne'
      variables: AssemblyGroupControllerFindOneVariables
    }
  | {
      path: '/assembly-missions'
      operationId: 'assemblyMissionControllerGetAssemblyMissions'
      variables: AssemblyMissionControllerGetAssemblyMissionsVariables
    }
  | {
      path: '/assembly-missions/{id}'
      operationId: 'assemblyMissionControllerGetAssemblyMission'
      variables: AssemblyMissionControllerGetAssemblyMissionVariables
    }
  | {
      path: '/storyboard/shots'
      operationId: 'shotControllerFindAllShots'
      variables: ShotControllerFindAllShotsVariables
    }
  | {
      path: '/storyboard/shots/video-generation/{id}'
      operationId: 'shotControllerGetVideoGenerationShot'
      variables: ShotControllerGetVideoGenerationShotVariables
    }
  | {
      path: '/storyboard/shots/{id}'
      operationId: 'shotControllerFindOneShot'
      variables: ShotControllerFindOneShotVariables
    }
  | {
      path: '/storyboard/scenes'
      operationId: 'sceneControllerFindAllScenes'
      variables: SceneControllerFindAllScenesVariables
    }
  | {
      path: '/storyboard/scenes/{id}'
      operationId: 'sceneControllerFindOneScene'
      variables: SceneControllerFindOneSceneVariables
    }
  | {
      path: '/storyboard/scenes/{sceneId}/shots'
      operationId: 'sceneControllerFindAllSceneShots'
      variables: SceneControllerFindAllSceneShotsVariables
    }
  | {
      path: '/storyboard/episodes'
      operationId: 'episodeControllerFindAllEpisodes'
      variables: EpisodeControllerFindAllEpisodesVariables
    }
  | {
      path: '/storyboard/episodes/suggestions/epi/{episodeId}'
      operationId: 'episodeControllerFindAllEpisodeSuggestions'
      variables: EpisodeControllerFindAllEpisodeSuggestionsVariables
    }
  | {
      path: '/storyboard/episodes/{id}'
      operationId: 'episodeControllerFindOneEpisode'
      variables: EpisodeControllerFindOneEpisodeVariables
    }
  | {
      path: '/storyboard/episodes/suggestions/{id}'
      operationId: 'episodeControllerFindOneEpisodeSuggestion'
      variables: EpisodeControllerFindOneEpisodeSuggestionVariables
    }
  | {
      path: '/storyboard/episodes/gen-script-template/{id}'
      operationId: 'episodeControllerGetScriptTemplate'
      variables: EpisodeControllerGetScriptTemplateVariables
    }
  | {
      path: '/storyboard/episodes/{episodeId}/scenes'
      operationId: 'episodeControllerFindAllEpisodeScenes'
      variables: EpisodeControllerFindAllEpisodeScenesVariables
    }
  | {
      path: '/storyboard/episodes/{episodeId}/generate-script'
      operationId: 'episodeControllerGenerateScript'
      variables: EpisodeControllerGenerateScriptVariables
    }
  | {
      path: '/storyboard/episodes/{episodeId}/suggestion-stats'
      operationId: 'episodeControllerGetSuggestionStats'
      variables: EpisodeControllerGetSuggestionStatsVariables
    }
  | {
      path: '/storyboard/seasons'
      operationId: 'seasonControllerFindAllSeasons'
      variables: SeasonControllerFindAllSeasonsVariables
    }
  | {
      path: '/storyboard/seasons/{id}'
      operationId: 'seasonControllerFindOneSeason'
      variables: SeasonControllerFindOneSeasonVariables
    }
  | {
      path: '/storyboard/seasons/{seasonId}/series'
      operationId: 'seasonControllerFindAllSeasonEpisodes'
      variables: SeasonControllerFindAllSeasonEpisodesVariables
    }
  | {
      path: '/storyboard/seasons/{seasonId}/series/count'
      operationId: 'seasonControllerFindSeasonEpisodesCount'
      variables: SeasonControllerFindSeasonEpisodesCountVariables
    }
  | {
      path: '/storyboard/series'
      operationId: 'seriesControllerFindAllSeries'
      variables: SeriesControllerFindAllSeriesVariables
    }
  | {
      path: '/storyboard/series/{id}'
      operationId: 'seriesControllerFindOneSeries'
      variables: SeriesControllerFindOneSeriesVariables
    }
  | {
      path: '/storyboard/series/{seriesId}/seasons'
      operationId: 'seriesControllerFindAllSeriesSeasons'
      variables: SeriesControllerFindAllSeriesSeasonsVariables
    }
  | {
      path: '/storyboard/series/{seriesId}/genres'
      operationId: 'seriesControllerFindAllSeriesGenres'
      variables: SeriesControllerFindAllSeriesGenresVariables
    }
  | {
      path: '/storyboard/projects'
      operationId: 'projectControllerFindAllProjects'
      variables: ProjectControllerFindAllProjectsVariables
    }
  | {
      path: '/storyboard/projects/{id}'
      operationId: 'projectControllerFindOneProject'
      variables: ProjectControllerFindOneProjectVariables
    }
  | {
      path: '/storyboard/projects/{projectId}/series'
      operationId: 'projectControllerFindAllProjectSeries'
      variables: ProjectControllerFindAllProjectSeriesVariables
    }
  | {
      path: '/storyboard/projects/{projectId}/scene'
      operationId: 'projectControllerFindAllProjectScene'
      variables: ProjectControllerFindAllProjectSceneVariables
    }
  | {
      path: '/storyboard/projects/{id}/breadcrumb'
      operationId: 'projectControllerFindProjectBreadcrumb'
      variables: ProjectControllerFindProjectBreadcrumbVariables
    }
  | {
      path: '/storyboard/genre'
      operationId: 'genreControllerFindAllGenre'
      variables: GenreControllerFindAllGenreVariables
    }
  | {
      path: '/storyboard/genre/{id}'
      operationId: 'genreControllerFindOneGenre'
      variables: GenreControllerFindOneGenreVariables
    }
  | {
      path: '/storyboard/cast'
      operationId: 'castControllerFindAll'
      variables: CastControllerFindAllVariables
    }
  | {
      path: '/storyboard/cast/{id}'
      operationId: 'castControllerFindOne'
      variables: CastControllerFindOneVariables
    }
  | {
      path: '/storyboard/cast/project/{projectId}'
      operationId: 'castControllerFindAllByProject'
      variables: CastControllerFindAllByProjectVariables
    }
  | {
      path: '/storyboard/cast/{castId}/season-episode'
      operationId: 'castControllerFindCastSeasonAndEpisode'
      variables: CastControllerFindCastSeasonAndEpisodeVariables
    }
  | {
      path: '/storyboard/shot-cast'
      operationId: 'shotCastControllerFindAll'
      variables: ShotCastControllerFindAllVariables
    }
  | {
      path: '/storyboard/shot-cast/{id}'
      operationId: 'shotCastControllerFindOne'
      variables: ShotCastControllerFindOneVariables
    }
  | {
      path: '/storyboard/shot-cast/shot/{id}'
      operationId: 'shotCastControllerFindAllByShot'
      variables: ShotCastControllerFindAllByShotVariables
    }
  | {
      path: '/storyboard/shot-cast/season/{id}'
      operationId: 'shotCastControllerFindAllBySeason'
      variables: ShotCastControllerFindAllBySeasonVariables
    }
  | {
      path: '/storyboard/shot-cast/episode/{id}'
      operationId: 'shotCastControllerFindAllByEpisode'
      variables: ShotCastControllerFindAllByEpisodeVariables
    }
  | {
      path: '/storyboard/shot-cast/scene/{id}'
      operationId: 'shotCastControllerFindAllByScene'
      variables: ShotCastControllerFindAllBySceneVariables
    }
  | {
      path: '/storyboard/Todo'
      operationId: 'todoControllerFindAllTodos'
      variables: TodoControllerFindAllTodosVariables
    }
  | {
      path: '/storyboard/Todo/{id}'
      operationId: 'todoControllerFindOneTodo'
      variables: TodoControllerFindOneTodoVariables
    }
  | {
      path: '/storyboard/track'
      operationId: 'trackControllerFindAll'
      variables: TrackControllerFindAllVariables
    }
  | {
      path: '/storyboard/track/{id}'
      operationId: 'trackControllerFindOne'
      variables: TrackControllerFindOneVariables
    }
  | {
      path: '/storyboard/track/project/{projectId}'
      operationId: 'trackControllerFindAllByProjectId'
      variables: TrackControllerFindAllByProjectIdVariables
    }
  | {
      path: '/storyboard/navigation-cursor/user'
      operationId: 'navigationCursorControllerFindOneNavCursor'
      variables: NavigationCursorControllerFindOneNavCursorVariables
    }
  | {
      path: '/storyboard/video-styles'
      operationId: 'videoStyleControllerFindAll'
      variables: VideoStyleControllerFindAllVariables
    }
  | {
      path: '/storyboard/video-styles/{id}'
      operationId: 'videoStyleControllerFindOneEpisode'
      variables: VideoStyleControllerFindOneEpisodeVariables
    }
  | {
      path: '/storyboard/battle'
      operationId: 'battleControllerFindAll'
      variables: BattleControllerFindAllVariables
    }
  | {
      path: '/storyboard/battle/{id}'
      operationId: 'battleControllerFindOne'
      variables: BattleControllerFindOneVariables
    }
  | {
      path: '/storyboard/battle/episode/{episodeId}'
      operationId: 'battleControllerFindAllByEpisodeId'
      variables: BattleControllerFindAllByEpisodeIdVariables
    }
  | {
      path: '/storyboard/beat'
      operationId: 'beatControllerFindAll'
      variables: BeatControllerFindAllVariables
    }
  | {
      path: '/storyboard/beat/{id}'
      operationId: 'beatControllerFindOne'
      variables: BeatControllerFindOneVariables
    }
  | {
      path: '/storyboard/beat/episode/{episodeId}'
      operationId: 'beatControllerFindAllByEpisodeId'
      variables: BeatControllerFindAllByEpisodeIdVariables
    }
  | {
      path: '/storyboard/beat/universal-truth/{universalTruthId}'
      operationId: 'beatControllerFindAllByUniversalTruthId'
      variables: BeatControllerFindAllByUniversalTruthIdVariables
    }
  | {
      path: '/storyboard/universal-truth/universal-truth-category'
      operationId: 'universalTruthControllerFindAllUniversalTruthCategories'
      variables: UniversalTruthControllerFindAllUniversalTruthCategoriesVariables
    }
  | {
      path: '/storyboard/universal-truth'
      operationId: 'universalTruthControllerFindAll'
      variables: UniversalTruthControllerFindAllVariables
    }
  | {
      path: '/storyboard/universal-truth/{id}'
      operationId: 'universalTruthControllerFindOne'
      variables: UniversalTruthControllerFindOneVariables
    }
  | {
      path: '/storyboard/universal-truth/project/{projectId}'
      operationId: 'universalTruthControllerFindAllByProjectId'
      variables: UniversalTruthControllerFindAllByProjectIdVariables
    }
  | {
      path: '/storyboard/universal-truth/project/{projectId}/universal-truth-categories'
      operationId: 'universalTruthControllerFindAllCategoriesByProjectId'
      variables: UniversalTruthControllerFindAllCategoriesByProjectIdVariables
    }
  | {
      path: '/storyboard/universal-truth/universal-truth-category/{id}'
      operationId: 'universalTruthControllerFindOneUniversalTruthCategory'
      variables: UniversalTruthControllerFindOneUniversalTruthCategoryVariables
    }
  | {
      path: '/storyboard/universal-truth/universal-truth-category/{id}/universal-truths'
      operationId: 'universalTruthControllerFindAllUniversalTruthsByCategory'
      variables: UniversalTruthControllerFindAllUniversalTruthsByCategoryVariables
    }
  | {
      path: '/storyboard/universal-truth/episode/{episodeId}'
      operationId: 'universalTruthControllerFindAllUniversalTruthsByEpisode'
      variables: UniversalTruthControllerFindAllUniversalTruthsByEpisodeVariables
    }
  | {
      path: '/storyboard/universal-truth/season/{seasonId}'
      operationId: 'universalTruthControllerFindAllUniversalTruthsBySeason'
      variables: UniversalTruthControllerFindAllUniversalTruthsBySeasonVariables
    }
  | {
      path: '/jobs'
      operationId: 'jobsControllerFindAll'
      variables: JobsControllerFindAllVariables
    }
  | {
      path: '/jobs/{id}'
      operationId: 'jobsControllerFindOne'
      variables: JobsControllerFindOneVariables
    }
  | {
      path: '/factor-instance'
      operationId: 'factorInstanceControllerFindAll'
      variables: FactorInstanceControllerFindAllVariables
    }
  | {
      path: '/factor-instance/primary'
      operationId: 'factorInstanceControllerFindPrimaryInstance'
      variables: FactorInstanceControllerFindPrimaryInstanceVariables
    }
  | {
      path: '/factor-instance/{id}'
      operationId: 'factorInstanceControllerFindOne'
      variables: FactorInstanceControllerFindOneVariables
    }
  | {
      path: '/script'
      operationId: 'scriptControllerGetJobStatus'
      variables: ScriptControllerGetJobStatusVariables
    }
  | {
      path: '/api/place'
      operationId: 'placeControllerFindAll'
      variables: PlaceControllerFindAllVariables
    }
  | {
      path: '/api/place/{id}'
      operationId: 'placeControllerFindOne'
      variables: PlaceControllerFindOneVariables
    }
  | {
      path: '/api/place/queue'
      operationId: 'placeControllerGetAllQueue'
      variables: PlaceControllerGetAllQueueVariables
    }
  | {
      path: '/api/place-category'
      operationId: 'placeControllerFindAllPlaceCategory'
      variables: PlaceControllerFindAllPlaceCategoryVariables
    }
  | {
      path: '/api/place-category/{id}'
      operationId: 'placeControllerFindOnePlaceCategory'
      variables: PlaceControllerFindOnePlaceCategoryVariables
    }
  | {
      path: '/api/place-category/{id}/places'
      operationId: 'placeControllerFindAllPlacesByCategory'
      variables: PlaceControllerFindAllPlacesByCategoryVariables
    }
  | {
      path: '/api/character'
      operationId: 'characterControllerFindAll'
      variables: CharacterControllerFindAllVariables
    }
  | {
      path: '/api/character/{id}'
      operationId: 'characterControllerFindOne'
      variables: CharacterControllerFindOneVariables
    }
  | {
      path: '/api/getAllCharacters'
      operationId: 'characterControllerFindAllCharacters'
      variables: CharacterControllerFindAllCharactersVariables
    }
  | {
      path: '/api/character-category'
      operationId: 'characterControllerFindAllCharacterCategory'
      variables: CharacterControllerFindAllCharacterCategoryVariables
    }
  | {
      path: '/api/character-category/{id}'
      operationId: 'characterControllerFindOneCharacterCategory'
      variables: CharacterControllerFindOneCharacterCategoryVariables
    }
  | {
      path: '/api/character-category/{id}/characters'
      operationId: 'characterControllerFindAllCharactersByCategory'
      variables: CharacterControllerFindAllCharactersByCategoryVariables
    }
  | {
      path: '/factorAbstractions'
      operationId: 'factorAbstractionControllerFindAll'
      variables: FactorAbstractionControllerFindAllVariables
    }
  | {
      path: '/factorAbstractions/{id}'
      operationId: 'factorAbstractionControllerFindOne'
      variables: FactorAbstractionControllerFindOneVariables
    }
  | {
      path: '/factorAbstractions/{id}/prior-dependents'
      operationId: 'factorAbstractionControllerFindAllFactorAbstractionPriorDependents'
      variables: FactorAbstractionControllerFindAllFactorAbstractionPriorDependentsVariables
    }
  | {
      path: '/factorAbstractions/{id}/after-dependents'
      operationId: 'factorAbstractionControllerFindAllFactorAbstractionAfterDependents'
      variables: FactorAbstractionControllerFindAllFactorAbstractionAfterDependentsVariables
    }
  | {
      path: '/pipelines'
      operationId: 'pipelineControllerFindAllPipeLines'
      variables: PipelineControllerFindAllPipeLinesVariables
    }
  | {
      path: '/pipelines/assemblies'
      operationId: 'pipelineControllerFindAllAssemblies'
      variables: PipelineControllerFindAllAssembliesVariables
    }
  | {
      path: '/pipelines/{id}'
      operationId: 'pipelineControllerFindOnePipeline'
      variables: PipelineControllerFindOnePipelineVariables
    }
  | {
      path: '/visuals-yaml/{episodeId}'
      operationId: 'visualsYamlControllerFindAll'
      variables: VisualsYamlControllerFindAllVariables
    }
  | {
      path: '/visuals-yaml/character/{characterId}'
      operationId: 'visualsYamlControllerFindOneCharacterYAML'
      variables: VisualsYamlControllerFindOneCharacterYAMLVariables
    }
  | {
      path: '/visuals-yaml/place/{placeId}'
      operationId: 'visualsYamlControllerFindAllPlaceYAML'
      variables: VisualsYamlControllerFindAllPlaceYAMLVariables
    }
  | {
      path: '/visuals-yaml/scene/{sceneId}'
      operationId: 'visualsYamlControllerFindAllSceneYAML'
      variables: VisualsYamlControllerFindAllSceneYAMLVariables
    }
  | {
      path: '/visuals-yaml/shot/{shotId}'
      operationId: 'visualsYamlControllerFindAllShotYAML'
      variables: VisualsYamlControllerFindAllShotYAMLVariables
    }
  | {
      path: '/visuals-yaml/shot-character/{shotId}'
      operationId: 'visualsYamlControllerFindAllShotCharacterYAML'
      variables: VisualsYamlControllerFindAllShotCharacterYAMLVariables
    }
  | {
      path: '/scene-template'
      operationId: 'sceneTemplateControllerFindAll'
      variables: SceneTemplateControllerFindAllVariables
    }
  | {
      path: '/scene-template/{id}'
      operationId: 'sceneTemplateControllerFindOne'
      variables: SceneTemplateControllerFindOneVariables
    }
  | {
      path: '/variable'
      operationId: 'variablesControllerQuery'
      variables: VariablesControllerQueryVariables
    }
  | {
      path: '/variable/{id}'
      operationId: 'variablesControllerFindOne'
      variables: VariablesControllerFindOneVariables
    }
  | {
      path: '/moniker'
      operationId: 'monikerControllerFindAllMonikers'
      variables: MonikerControllerFindAllMonikersVariables
    }
  | {
      path: '/moniker/{id}'
      operationId: 'monikerControllerFindOneMoniker'
      variables: MonikerControllerFindOneMonikerVariables
    }
  | {
      path: '/api/video-clip'
      operationId: 'videoClipControllerFindAll'
      variables: VideoClipControllerFindAllVariables
    }
  | {
      path: '/api/video-clip/{id}'
      operationId: 'videoClipControllerFindOne'
      variables: VideoClipControllerFindOneVariables
    }
