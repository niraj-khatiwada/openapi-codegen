// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import {
  type UserControllerGetCurrentUserError,
  type UserControllerGetCurrentUserResponse,
  type UserControllerCreateUserData,
  type UserControllerCreateUserError,
  type UserControllerCreateUserResponse,
  type UserControllerFindAllUsersData,
  type UserControllerFindAllUsersError,
  type UserControllerFindAllUsersResponse,
  type UserControllerLoadMoreUsersData,
  type UserControllerLoadMoreUsersError,
  type UserControllerLoadMoreUsersResponse,
  type HealthControllerCheckError,
  type HealthControllerCheckResponse,
  type AuthControllerSignInData,
  type AuthControllerSignInError,
  type AuthControllerSignInResponse,
  type AuthControllerRegisterData,
  type AuthControllerRegisterError,
  type AuthControllerRegisterResponse,
  type HomeControllerHomeError,
  type HomeControllerHomeResponse,
  UserControllerGetCurrentUserResponseTransformer,
  UserControllerCreateUserResponseTransformer,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get current user
 */
export const userControllerGetCurrentUser = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UserControllerGetCurrentUserResponse,
    UserControllerGetCurrentUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me",
    responseTransformer: UserControllerGetCurrentUserResponseTransformer,
  });
};

/**
 * Create user
 */
export const userControllerCreateUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerCreateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UserControllerCreateUserResponse,
    UserControllerCreateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users",
    responseTransformer: UserControllerCreateUserResponseTransformer,
  });
};

/**
 * List users
 */
export const userControllerFindAllUsers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerFindAllUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UserControllerFindAllUsersResponse,
    UserControllerFindAllUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users",
  });
};

/**
 * Load more users
 */
export const userControllerLoadMoreUsers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerLoadMoreUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UserControllerLoadMoreUsersResponse,
    UserControllerLoadMoreUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/load-more",
  });
};

/**
 * Health check
 */
export const healthControllerCheck = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HealthControllerCheckResponse,
    HealthControllerCheckError,
    ThrowOnError
  >({
    ...options,
    url: "/health",
  });
};

/**
 * Sign in
 */
export const authControllerSignIn = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerSignInData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthControllerSignInResponse,
    AuthControllerSignInError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/auth/email/login",
  });
};

export const authControllerRegister = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerRegisterData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthControllerRegisterResponse,
    AuthControllerRegisterError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/auth/email/register",
  });
};

/**
 * Home
 */
export const homeControllerHome = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HomeControllerHomeResponse,
    HomeControllerHomeError,
    ThrowOnError
  >({
    ...options,
    url: "/",
  });
};
