// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import {
  type HealthControllerCheckError,
  type HealthControllerCheckResponse,
  type AuthControllerSignInData,
  type AuthControllerSignInError,
  type AuthControllerSignInResponse,
  type AuthControllerRegisterData,
  type AuthControllerRegisterError,
  type AuthControllerRegisterResponse,
  type UserControllerGetCurrentUserError,
  type UserControllerGetCurrentUserResponse,
  type UserControllerCreateUserData,
  type UserControllerCreateUserError,
  type UserControllerCreateUserResponse,
  type UserControllerFindAllUsersData,
  type UserControllerFindAllUsersError,
  type UserControllerFindAllUsersResponse,
  type UserControllerLoadMoreUsersData,
  type UserControllerLoadMoreUsersError,
  type UserControllerLoadMoreUsersResponse,
  type UserControllerFindUserData,
  type UserControllerFindUserError,
  type UserControllerFindUserResponse,
  type UserControllerUpdateUserData,
  type UserControllerUpdateUserError,
  type UserControllerUpdateUserResponse,
  type UserControllerRemoveUserData,
  type UserControllerRemoveUserError,
  type UserControllerRemoveUserResponse,
  type UserControllerChangePasswordError,
  type UserControllerChangePasswordResponse,
  UserControllerGetCurrentUserResponseTransformer,
  UserControllerCreateUserResponseTransformer,
  UserControllerFindUserResponseTransformer,
  UserControllerUpdateUserResponseTransformer,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Health check
 */
export const healthControllerCheck = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HealthControllerCheckResponse,
    HealthControllerCheckError,
    ThrowOnError
  >({
    ...options,
    url: "/health",
  });
};

/**
 * Sign in
 */
export const authControllerSignIn = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerSignInData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthControllerSignInResponse,
    AuthControllerSignInError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/auth/email/login",
  });
};

export const authControllerRegister = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerRegisterData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthControllerRegisterResponse,
    AuthControllerRegisterError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/auth/email/register",
  });
};

/**
 * Get current user
 */
export const userControllerGetCurrentUser = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UserControllerGetCurrentUserResponse,
    UserControllerGetCurrentUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me",
    responseTransformer: UserControllerGetCurrentUserResponseTransformer,
  });
};

/**
 * Create user
 */
export const userControllerCreateUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerCreateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UserControllerCreateUserResponse,
    UserControllerCreateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users",
    responseTransformer: UserControllerCreateUserResponseTransformer,
  });
};

/**
 * List users
 */
export const userControllerFindAllUsers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerFindAllUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UserControllerFindAllUsersResponse,
    UserControllerFindAllUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users",
  });
};

/**
 * Load more users
 */
export const userControllerLoadMoreUsers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerLoadMoreUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UserControllerLoadMoreUsersResponse,
    UserControllerLoadMoreUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/load-more",
  });
};

/**
 * Find user by id
 */
export const userControllerFindUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerFindUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UserControllerFindUserResponse,
    UserControllerFindUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{id}",
    responseTransformer: UserControllerFindUserResponseTransformer,
  });
};

/**
 * Update user
 */
export const userControllerUpdateUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerUpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UserControllerUpdateUserResponse,
    UserControllerUpdateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{id}",
    responseTransformer: UserControllerUpdateUserResponseTransformer,
  });
};

/**
 * Delete user
 */
export const userControllerRemoveUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerRemoveUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    UserControllerRemoveUserResponse,
    UserControllerRemoveUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{id}",
  });
};

export const userControllerChangePassword = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UserControllerChangePasswordResponse,
    UserControllerChangePasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me/change-password",
  });
};
