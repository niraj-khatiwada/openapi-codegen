// This file is auto-generated by @hey-api/openapi-ts

export type UserResDto = {
  id: string;
  username: string;
  email: string;
  bio?: string;
  image: string;
  createdAt: Date;
  updatedAt: Date;
};

export type ErrorDetailDto = {
  property?: string;
  code: string;
  message: string;
};

export type ErrorDto = {
  timestamp: string;
  statusCode: number;
  error: string;
  errorCode?: string;
  message: string;
  details?: Array<ErrorDetailDto>;
};

export type CreateUserReqDto = {
  username: string;
  email: string;
  password: string;
  bio?: string;
  image?: string;
};

export type OffsetPaginationDto = {
  limit: number;
  currentPage: number;
  nextPage: number;
  previousPage: number;
  totalRecords: number;
  totalPages: number;
};

export type OffsetPaginatedDto = {
  data: Array<{
    [key: string]: unknown;
  }>;
  pagination: OffsetPaginationDto;
};

export type CursorPaginationDto = {
  limit: number;
  afterCursor: string;
  beforeCursor: string;
  totalRecords: number;
};

export type CursorPaginatedDto = {
  data: Array<{
    [key: string]: unknown;
  }>;
  pagination: CursorPaginationDto;
};

export type HealthCheckDto = {
  status: {
    [key: string]: unknown;
  };
  details: {
    [key: string]: unknown;
  };
};

export type LoginReqDto = {
  email: string;
  password: string;
};

export type LoginResDto = {
  userId: string;
  accessToken: string;
  refreshToken: string;
  tokenExpires: number;
};

export type RegisterReqDto = {
  email: string;
  password: string;
};

export type UserControllerGetCurrentUserResponse = UserResDto;

export type UserControllerGetCurrentUserError = ErrorDto;

export type UserControllerCreateUserData = {
  body: CreateUserReqDto;
};

export type UserControllerCreateUserResponse = UserResDto;

export type UserControllerCreateUserError = ErrorDto;

export type UserControllerFindAllUsersData = {
  query?: {
    limit?: number;
    order?: "ASC" | "DESC";
    page?: number;
    q?: string;
  };
};

export type UserControllerFindAllUsersResponse = OffsetPaginatedDto & {
  data?: Array<UserResDto>;
};

export type UserControllerFindAllUsersError = ErrorDto;

export type UserControllerLoadMoreUsersData = {
  query?: {
    afterCursor?: string;
    beforeCursor?: string;
    limit?: number;
    q?: string;
  };
};

export type UserControllerLoadMoreUsersResponse = CursorPaginatedDto & {
  data?: Array<UserResDto>;
};

export type UserControllerLoadMoreUsersError = ErrorDto;

export type HealthControllerCheckResponse = HealthCheckDto;

export type HealthControllerCheckError =
  | ErrorDto
  | {
      status?: string;
      info?: {
        [key: string]: {
          status: string;
          [key: string]: unknown | string;
        };
      } | null;
      error?: {
        [key: string]: {
          status: string;
          [key: string]: unknown | string;
        };
      } | null;
      details?: {
        [key: string]: {
          status: string;
          [key: string]: unknown | string;
        };
      };
    };

export type AuthControllerSignInData = {
  body: LoginReqDto;
};

export type AuthControllerSignInResponse = LoginResDto;

export type AuthControllerSignInError = ErrorDto;

export type AuthControllerRegisterData = {
  body: RegisterReqDto;
};

export type AuthControllerRegisterResponse = unknown;

export type AuthControllerRegisterError = ErrorDto;

export type HomeControllerHomeResponse = unknown;

export type HomeControllerHomeError = ErrorDto;

export type UserControllerGetCurrentUserResponseTransformer = (
  data: any,
) => Promise<UserControllerGetCurrentUserResponse>;

export type UserResDtoModelResponseTransformer = (data: any) => UserResDto;

export const UserResDtoModelResponseTransformer: UserResDtoModelResponseTransformer =
  (data) => {
    if (data?.createdAt) {
      data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
      data.updatedAt = new Date(data.updatedAt);
    }
    return data;
  };

export const UserControllerGetCurrentUserResponseTransformer: UserControllerGetCurrentUserResponseTransformer =
  async (data) => {
    UserResDtoModelResponseTransformer(data);
    return data;
  };

export type UserControllerCreateUserResponseTransformer = (
  data: any,
) => Promise<UserControllerCreateUserResponse>;

export const UserControllerCreateUserResponseTransformer: UserControllerCreateUserResponseTransformer =
  async (data) => {
    UserResDtoModelResponseTransformer(data);
    return data;
  };
